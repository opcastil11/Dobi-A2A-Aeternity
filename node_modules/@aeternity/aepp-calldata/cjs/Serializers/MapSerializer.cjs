"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _FateTag = _interopRequireDefault(require("../FateTag.cjs"));
var RLPInt = _interopRequireWildcard(require("../utils/RLPInt.cjs"));
var _BaseSerializer = _interopRequireDefault(require("./BaseSerializer.cjs"));
var _FateComparator = _interopRequireDefault(require("../FateComparator.cjs"));
var _FateMap = _interopRequireDefault(require("../types/FateMap.cjs"));
var _FatePrefixError = _interopRequireDefault(require("../Errors/FatePrefixError.cjs"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
class MapSerializer extends _BaseSerializer.default {
  serialize(map) {
    const len = map.length;
    const cmp = (0, _FateComparator.default)(map.keyType);
    const sortedItems = [...map.items];
    sortedItems.sort((elA, elB) => cmp(elA.key, elB.key));
    const serializedItems = sortedItems.map(i => {
      return [this.globalSerializer.serialize(i.key), this.globalSerializer.serialize(i.value)];
    });
    return [_FateTag.default.MAP, ...RLPInt.encode(len), ...serializedItems.flat(Infinity)];
  }
  deserializeStream(data, typeInfo) {
    const buffer = new Uint8Array(data);
    const prefix = buffer[0];
    if (prefix !== _FateTag.default.MAP) {
      throw new _FatePrefixError.default(prefix);
    }
    const [len, remainder] = RLPInt.decode(buffer.slice(1));
    let rest = remainder;
    if (len === 0n) {
      return [new _FateMap.default(), rest];
    }
    let keyType;
    let valueType;
    if (typeof typeInfo !== 'undefined') {
      ({
        keyType,
        valueType
      } = typeInfo);
    }
    const elements = [];
    for (let i = 0n; i < len; i++) {
      const [key, keyRest] = this.globalSerializer.deserializeStream(rest, keyType);
      const [value, valueRest] = this.globalSerializer.deserializeStream(keyRest, valueType);
      elements.push([key, value]);
      rest = valueRest;
    }
    const firstEl = elements[0];
    if (typeof typeInfo === 'undefined') {
      keyType = firstEl[0].type;
      valueType = firstEl[1].type;
    }
    return [new _FateMap.default(keyType, valueType, elements), rest];
  }
}
var _default = exports.default = MapSerializer;