"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _FateTag = _interopRequireDefault(require("../FateTag.cjs"));
var RLPInt = _interopRequireWildcard(require("../utils/RLPInt.cjs"));
var _FateInt = _interopRequireDefault(require("../types/FateInt.cjs"));
var _BaseSerializer = _interopRequireDefault(require("./BaseSerializer.cjs"));
var _FatePrefixError = _interopRequireDefault(require("../Errors/FatePrefixError.cjs"));
var _abs = _interopRequireDefault(require("../utils/abs.cjs"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const SMALL_INT_MASK = 0b00000001;
class IntSerializer extends _BaseSerializer.default {
  serialize(data) {
    const bigValue = data instanceof _FateInt.default ? data.value : BigInt(data);
    const absVal = (0, _abs.default)(bigValue);

    // small integer
    if (absVal < 64) {
      const small = Number(absVal);
      if (bigValue >= 0) {
        return [small << 1];
      }

      // negative
      return [(0b10000000 | small << 1) & 0b11111110];
    }

    // large negative integer
    if (bigValue < 0) {
      return [_FateTag.default.NEG_BIG_INT, ...RLPInt.encode(absVal - 64n)];
    }

    // large positive integer
    return [_FateTag.default.POS_BIG_INT, ...RLPInt.encode(absVal - 64n)];
  }
  deserializeStream(stream) {
    const data = new Uint8Array(stream);
    const prefix = data[0];

    // small int
    if ((prefix & SMALL_INT_MASK) === 0) {
      // positive
      if ((prefix & 0b10000000) === 0) {
        return [new _FateInt.default(prefix >> 1), data.slice(1)];
      }

      // negative
      const i = (prefix & 0b01111110) >> 1;
      return [new _FateInt.default(-i), data.slice(1)];
    }
    if (prefix === _FateTag.default.POS_BIG_INT || prefix === _FateTag.default.NEG_BIG_INT) {
      const sign = prefix === _FateTag.default.POS_BIG_INT ? 1n : -1n;
      const [i, remainder] = RLPInt.decode(data.slice(1));
      return [new _FateInt.default((i + 64n) * sign), new Uint8Array(remainder)];
    }
    throw new _FatePrefixError.default(prefix);
  }
}
var _default = exports.default = IntSerializer;