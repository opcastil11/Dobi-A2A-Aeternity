{"version":3,"file":"index.js","names":[],"sources":["../../../../src/apis/node/models/index.ts"],"sourcesContent":["import * as coreClient from \"@azure/core-client\";\n\nexport type OffChainUpdateUnion =\n  | OffChainUpdate\n  | OffChainCallContract\n  | OffChainDeposit\n  | OffChainNewContract\n  | OffChainTransfer\n  | OffChainWithdrawal;\n\nexport interface Account {\n  /** Base58Check encoded tagged pubkey */\n  id: string;\n  balance: bigint;\n  nonce: number;\n  /** Payable */\n  payable?: boolean;\n  kind?: AccountKind;\n  /** Base58Check encoded tagged pubkey */\n  contractId?: string;\n  /** Name of authorization function for generalized account */\n  authFun?: string;\n}\n\nexport interface ErrorModel {\n  reason: string;\n  errorCode?: string;\n}\n\nexport interface NextNonceResponse {\n  nextNonce: number;\n}\n\nexport interface SignedTxs {\n  transactions: SignedTx[];\n}\n\nexport interface SignedTx {\n  /** A mix of all transaction types. */\n  tx: Tx;\n  blockHeight: number;\n  /** Base58Check encoded tagged hash */\n  blockHash: string;\n  /** Base58Check encoded tagged hash */\n  hash: string;\n  /** Base64Check encoded tagged byte array */\n  encodedTx?: string;\n  /** At least one signature is required unless for Generalized Account Meta transactions */\n  signatures: string[];\n}\n\n/** A mix of all transaction types. */\nexport interface Tx {\n  /** Base58Check encoded tagged pubkey */\n  recipientId?: string;\n  amount?: bigint;\n  fee: bigint;\n  ttl?: number;\n  /** Base58Check encoded tagged pubkey */\n  senderId?: string;\n  nonce?: number;\n  /** Base64Check encoded tagged byte array */\n  payload?: string;\n  /** Base58Check encoded tagged pubkey */\n  initiatorId?: string;\n  initiatorAmount?: bigint;\n  /** Base58Check encoded tagged pubkey */\n  responderId?: string;\n  responderAmount?: bigint;\n  channelReserve?: bigint;\n  lockPeriod?: number;\n  /** Base58Check encoded tagged pubkey */\n  stateHash?: string;\n  delegateIds?: Delegates;\n  /** Base58Check encoded tagged pubkey */\n  channelId?: string;\n  /** Base58Check encoded tagged pubkey */\n  fromId?: string;\n  round?: number;\n  /** Base58Check encoded tagged pubkey */\n  toId?: string;\n  update?: OffChainUpdateUnion;\n  /** Base64Check encoded tagged byte array */\n  offchainTrees?: string;\n  initiatorAmountFinal?: bigint;\n  responderAmountFinal?: bigint;\n  /** Base64Check encoded tagged byte array */\n  poi?: string;\n  initiatorDelegateIds?: string[];\n  responderDelegateIds?: string[];\n  queryFormat?: string;\n  responseFormat?: string;\n  queryFee?: bigint;\n  oracleTtl?: RelativeTTL;\n  /** Base58Check encoded tagged pubkey */\n  accountId?: string;\n  abiVersion?: number;\n  /** Base58Check encoded tagged pubkey */\n  oracleId?: string;\n  query?: string;\n  queryTtl?: Ttl;\n  responseTtl?: RelativeTTL;\n  /** Base58Check encoded tagged value */\n  queryId?: string;\n  response?: string;\n  /** Base58Check encoded tagged value */\n  commitmentId?: string;\n  name?: string;\n  nameSalt?: number;\n  nameFee?: bigint;\n  /** Base58Check encoded tagged value */\n  nameId?: string;\n  nameTtl?: number;\n  pointers?: NamePointer[];\n  clientTtl?: number;\n  /** Base58Check encoded tagged pubkey */\n  ownerId?: string;\n  /** Base64Check encoded tagged byte array */\n  code?: string;\n  vmVersion?: number;\n  deposit?: bigint;\n  gas?: number;\n  gasPrice?: bigint;\n  /** Base64Check encoded tagged byte array */\n  callData?: string;\n  /** Base58Check encoded tagged pubkey */\n  callerId?: string;\n  /** Base58Check encoded tagged pubkey */\n  contractId?: string;\n  /** Contract authorization function hash (hex encoded) */\n  authFun?: string;\n  /** Base58Check encoded tagged pubkey */\n  gaId?: string;\n  /** Base64Check encoded tagged byte array */\n  authData?: string;\n  tx?: SignedTx;\n  /** Base58Check encoded tagged pubkey */\n  payerId?: string;\n  version: number;\n  type: TxType;\n}\n\nexport interface Delegates {\n  initiator?: string[];\n  responder?: string[];\n}\n\nexport interface OffChainUpdate {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  op:\n    | \"OffChainCallContract\"\n    | \"OffChainDeposit\"\n    | \"OffChainNewContract\"\n    | \"OffChainTransfer\"\n    | \"OffChainWithdrawal\";\n}\n\nexport interface RelativeTTL {\n  type: \"delta\";\n  value: number;\n}\n\nexport interface Ttl {\n  type: TTLType;\n  value: number;\n}\n\nexport interface NamePointer {\n  key: string;\n  /** Base58Check encoded tagged value */\n  encodedKey?: string;\n  /** Base58Check encoded tagged pubkey */\n  id: string;\n}\n\nexport interface AuctionEntry {\n  /** Base58Check encoded tagged value */\n  id: string;\n  startedAt: number;\n  endsAt: number;\n  /** Base58Check encoded tagged pubkey */\n  highestBidder: string;\n  highestBid: bigint;\n}\n\nexport interface Channel {\n  /** Base58Check encoded tagged pubkey */\n  id: string;\n  /** Base58Check encoded tagged pubkey */\n  initiatorId: string;\n  /** Base58Check encoded tagged pubkey */\n  responderId: string;\n  channelAmount: bigint;\n  initiatorAmount: bigint;\n  responderAmount: bigint;\n  channelReserve: bigint;\n  delegateIds: Delegates;\n  /** Base58Check encoded tagged hash */\n  stateHash: string;\n  round: number;\n  soloRound: number;\n  lockPeriod: number;\n  lockedUntil: number;\n}\n\nexport interface ContractObject {\n  /** Base58Check encoded tagged pubkey */\n  id: string;\n  /** Base58Check encoded tagged pubkey */\n  ownerId: string;\n  vmVersion: number;\n  abiVersion: number;\n  active: boolean;\n  referrerIds: string[];\n  deposit: bigint;\n}\n\nexport interface ByteCode {\n  /** Base64Check encoded tagged byte array */\n  bytecode: `cb_${string}`;\n}\n\nexport interface PoI {\n  /** Base64Check encoded tagged byte array */\n  poi: string;\n}\n\nexport interface Currency {\n  name: string;\n  symbol: string;\n  subunit: string;\n  subunitsPerUnit: bigint;\n  /** Use `fiat_conversion_url` instead */\n  fiatConverstionUrl?: string;\n  fiatConversionUrl?: string;\n  logo?: Image;\n  primaryColour: string;\n  secondaryColour: string;\n  networkName: string;\n}\n\nexport interface Image {\n  type?: string;\n  data?: string;\n}\n\nexport interface DryRunInput {\n  /** Base58Check encoded tagged hash */\n  top?: string;\n  /** Accounts */\n  accounts?: DryRunAccount[];\n  /** Txs */\n  txs: DryRunInputItem[];\n  /** Collect and return on-chain tx events that would result from the call */\n  txEvents?: boolean;\n}\n\nexport interface DryRunAccount {\n  /** Base58Check encoded tagged pubkey */\n  pubKey: string;\n  amount: bigint;\n}\n\nexport interface DryRunInputItem {\n  /** Base64Check encoded tagged byte array */\n  tx?: string;\n  /** Base58Check encoded tagged hash */\n  txHash?: `th_${string}`;\n  callReq?: DryRunCallReq;\n}\n\nexport interface DryRunCallReq {\n  /** Base64Check encoded tagged byte array */\n  calldata: string;\n  /** Base58Check encoded tagged pubkey */\n  contract: string;\n  amount?: bigint;\n  gas?: number;\n  /** Base58Check encoded tagged pubkey */\n  caller?: string;\n  nonce?: number;\n  abiVersion?: number;\n  context?: DryRunCallContext;\n}\n\nexport interface DryRunCallContext {\n  /** Base64Check encoded tagged byte array */\n  tx?: string;\n  /** Base58Check encoded tagged hash */\n  txHash?: `th_${string}`;\n  /** This call will have effects on the next call in this dry-run (or not) */\n  stateful?: boolean;\n}\n\nexport interface DryRunResults {\n  /** results */\n  results: DryRunResult[];\n  /** on-chain tx events */\n  txEvents?: Record<string, unknown>[];\n}\n\nexport interface DryRunResult {\n  type: string;\n  result: string;\n  reason?: string;\n  callObj?: ContractCallObject;\n}\n\nexport interface ContractCallObject {\n  /** Base58Check encoded tagged pubkey */\n  callerId: string;\n  callerNonce: number;\n  height: number;\n  /** Base58Check encoded tagged pubkey */\n  contractId: string;\n  gasPrice: bigint;\n  gasUsed: number;\n  log: Event[];\n  /** Base64Check encoded tagged byte array */\n  returnValue: string;\n  /** The status of the call 'ok | error | revert'. */\n  returnType: ContractCallObjectReturnType;\n}\n\nexport interface Event {\n  /** Base58Check encoded tagged pubkey */\n  address: string;\n  /** Event topics */\n  topics: bigint[];\n  /** Base64Check encoded tagged byte array */\n  data: string;\n}\n\nexport interface Generation {\n  keyBlock: KeyBlock;\n  microBlocks: string[];\n}\n\nexport interface KeyBlock {\n  /** Base58Check encoded tagged hash */\n  hash: string;\n  height: number;\n  /** Base58Check encoded tagged hash */\n  prevHash: string;\n  /** Base58Check encoded tagged hash */\n  prevKeyHash: string;\n  /** Base58Check encoded tagged hash */\n  stateHash: string;\n  /** Base58Check encoded tagged pubkey */\n  miner: string;\n  /** Base58Check encoded tagged pubkey */\n  beneficiary: string;\n  /** Base64Check encoded tagged byte array */\n  flags: string;\n  target: number;\n  pow?: number[];\n  nonce?: number;\n  time: Date;\n  version: number;\n  /** Base64Check encoded tagged byte array */\n  info: string;\n}\n\n/** A mix of KeyBlock, MicroBlockHeader properties. */\nexport interface Header {\n  /** Base58Check encoded tagged hash */\n  hash: string;\n  height: number;\n  /** Base58Check encoded tagged hash */\n  prevHash: string;\n  /** Base58Check encoded tagged hash */\n  prevKeyHash: string;\n  /** Base58Check encoded tagged hash */\n  stateHash: string;\n  /** Base58Check encoded tagged pubkey */\n  miner?: string;\n  /** Base58Check encoded tagged pubkey */\n  beneficiary?: string;\n  /** Base64Check encoded tagged byte array */\n  flags?: string;\n  target?: number;\n  pow?: number[];\n  nonce?: number;\n  time: Date;\n  version: number;\n  /** Base64Check encoded tagged byte array */\n  info?: string;\n  /** Base58Check encoded tagged hash */\n  pofHash?: string;\n  /** Base58Check encoded tagged hash */\n  txsHash?: string;\n  /** Base58Check encoded tagged value */\n  signature?: string;\n}\n\nexport interface PinningTx {\n  /** The epoch for which the pin is valid */\n  epoch: number;\n  /** the height of the pinned block (usually last block of ) */\n  height: number;\n  /** Base58Check encoded tagged hash */\n  blockHash: string;\n  /** this is the payload to post to the parent chain (standardized). Combines Epoch, Height and Hash. */\n  parentPayload: string;\n  /** The last leader in the epoch that could use this pin to collect the reward */\n  lastLeader: string;\n  /** chain type of parent (aeternity, btc, doge eventually supported) */\n  parentType: string;\n  /** the parent node id */\n  parentNetworkId: string;\n}\n\nexport interface HCContractPubkeys {\n  /** Base58Check encoded tagged pubkey */\n  staking: string;\n  /** Base58Check encoded tagged pubkey */\n  election?: string;\n  /** Base58Check encoded tagged pubkey */\n  rewards?: string;\n}\n\nexport interface HashResponse {\n  hash: string;\n}\n\nexport interface HeightResponse {\n  height: number;\n}\n\nexport interface MicroBlockHeader {\n  /** Base58Check encoded tagged hash */\n  hash: string;\n  height: number;\n  /** Base58Check encoded tagged hash */\n  pofHash: string;\n  /** Base58Check encoded tagged hash */\n  prevHash: string;\n  /** Base58Check encoded tagged hash */\n  prevKeyHash: string;\n  /** Base58Check encoded tagged hash */\n  stateHash: string;\n  /** Base58Check encoded tagged hash */\n  txsHash: string;\n  /** Base58Check encoded tagged value */\n  signature: string;\n  time: Date;\n  version: number;\n}\n\nexport interface CountResponse {\n  count: number;\n}\n\nexport interface NameEntry {\n  /** Base58Check encoded tagged value */\n  id: string;\n  /** Base58Check encoded tagged pubkey */\n  owner?: string;\n  ttl: number;\n  pointers: NamePointerComplete[];\n}\n\nexport interface NamePointerComplete {\n  key: string;\n  /** Base58Check encoded tagged value */\n  encodedKey: string;\n  /** Base58Check encoded tagged pubkey */\n  id: string;\n}\n\nexport interface RegisteredOracle {\n  /** Base58Check encoded tagged pubkey */\n  id: string;\n  queryFormat: string;\n  responseFormat: string;\n  queryFee: bigint;\n  ttl: number;\n  abiVersion: number;\n}\n\nexport interface OracleQueries {\n  oracleQueries: OracleQuery[];\n}\n\nexport interface OracleQuery {\n  /** Base58Check encoded tagged value */\n  id: string;\n  /** Base58Check encoded tagged pubkey */\n  senderId: string;\n  senderNonce: number;\n  /** Base58Check encoded tagged pubkey */\n  oracleId: string;\n  query: string;\n  response: string;\n  ttl: number;\n  responseTtl: Ttl;\n  fee: bigint;\n}\n\nexport interface PeerPubKey {\n  /** Base58Check encoded tagged pubkey */\n  pubkey: string;\n}\n\nexport interface GasPricesItem {\n  /** Minimum gas price in the block range */\n  minGasPrice: bigint;\n  /** Percent of available gas used */\n  utilization: number;\n  /** Number of minutes from the top */\n  minutes: number;\n}\n\nexport interface Status {\n  /** Base58Check encoded tagged hash */\n  genesisKeyBlockHash: string;\n  solutions: number;\n  difficulty: number;\n  hashrate: number;\n  syncing: boolean;\n  syncProgress?: number;\n  uptime: string;\n  listening: boolean;\n  protocols: Protocol[];\n  nodeVersion: string;\n  nodeRevision: string;\n  peerCount: number;\n  peerConnections: PeerConnections;\n  pendingTransactionsCount: number;\n  networkId: string;\n  /** Base58Check encoded tagged pubkey */\n  peerPubkey: string;\n  /** Base58Check encoded tagged hash */\n  topKeyBlockHash: string;\n  topBlockHeight: number;\n}\n\nexport interface Protocol {\n  version: number;\n  effectiveAtHeight: number;\n}\n\nexport interface PeerConnections {\n  inbound: number;\n  outbound: number;\n}\n\nexport interface SyncStatus {\n  progress: number;\n  target: number;\n  speed: number;\n  estimate: number;\n}\n\nexport interface EncodedTx {\n  /** Base64Check encoded tagged byte array */\n  tx: string;\n}\n\nexport interface PostTxResponse {\n  /** Base58Check encoded tagged hash */\n  txHash: `th_${string}`;\n}\n\nexport interface TxInfoObject {\n  callInfo?: ContractCallObject;\n  gaInfo?: GAObject;\n  txInfo?: string;\n}\n\nexport interface GAObject {\n  /** Base58Check encoded tagged pubkey */\n  callerId: string;\n  height: number;\n  gasPrice: bigint;\n  gasUsed: number;\n  /** Base64Check encoded tagged byte array */\n  returnValue: string;\n  /** The status of the call 'ok | error'. */\n  returnType: GAObjectReturnType;\n  innerObject?: TxInfoObject;\n}\n\nexport interface ChannelCloseMutualTx {\n  /** Base58Check encoded tagged pubkey */\n  channelId: string;\n  /** Base58Check encoded tagged pubkey */\n  fromId: string;\n  initiatorAmountFinal: bigint;\n  responderAmountFinal: bigint;\n  ttl?: number;\n  fee: bigint;\n  nonce: number;\n}\n\nexport interface ChannelCloseSoloTx {\n  /** Base58Check encoded tagged pubkey */\n  channelId: string;\n  /** Base58Check encoded tagged pubkey */\n  fromId: string;\n  /** Base64Check encoded tagged byte array */\n  payload: string;\n  ttl?: number;\n  fee: bigint;\n  nonce?: number;\n  /** Base64Check encoded tagged byte array */\n  poi: string;\n}\n\nexport interface ChannelCreateTx {\n  /** Base58Check encoded tagged pubkey */\n  initiatorId: string;\n  initiatorAmount: bigint;\n  /** Base58Check encoded tagged pubkey */\n  responderId: string;\n  responderAmount: bigint;\n  channelReserve: bigint;\n  lockPeriod: number;\n  ttl?: number;\n  fee: bigint;\n  nonce?: number;\n  /** Base58Check encoded tagged hash */\n  stateHash: string;\n  delegateIds?: Delegates;\n}\n\nexport interface ChannelDepositTx {\n  /** Base58Check encoded tagged pubkey */\n  channelId: string;\n  /** Base58Check encoded tagged pubkey */\n  fromId: string;\n  amount: bigint;\n  ttl?: number;\n  fee: bigint;\n  nonce: number;\n  /** Base58Check encoded tagged hash */\n  stateHash: string;\n  round: number;\n}\n\nexport interface ChannelForceProgressTx {\n  /** Base58Check encoded tagged pubkey */\n  channelId: string;\n  /** Base58Check encoded tagged pubkey */\n  fromId: string;\n  /** Base64Check encoded tagged byte array */\n  payload: string;\n  round: number;\n  update: OffChainUpdateUnion;\n  /** Base58Check encoded tagged hash */\n  stateHash: string;\n  ttl?: number;\n  fee: bigint;\n  nonce?: number;\n  /** Base64Check encoded tagged byte array */\n  offchainTrees?: string;\n}\n\nexport interface ChannelSetDelegatesTx {\n  /** Base58Check encoded tagged pubkey */\n  channelId: string;\n  /** Base58Check encoded tagged pubkey */\n  fromId: string;\n  initiatorDelegateIds: string[];\n  responderDelegateIds: string[];\n  /** Base58Check encoded tagged pubkey */\n  stateHash: string;\n  round: number;\n  /** Base64Check encoded tagged byte array */\n  payload: string;\n  ttl?: number;\n  fee: bigint;\n  nonce?: number;\n}\n\nexport interface ChannelSettleTx {\n  /** Base58Check encoded tagged pubkey */\n  channelId: string;\n  /** Base58Check encoded tagged pubkey */\n  fromId: string;\n  initiatorAmountFinal: bigint;\n  responderAmountFinal: bigint;\n  ttl?: number;\n  fee: bigint;\n  nonce: number;\n}\n\nexport interface ChannelSlashTx {\n  /** Base58Check encoded tagged pubkey */\n  channelId: string;\n  /** Base58Check encoded tagged pubkey */\n  fromId: string;\n  /** Base64Check encoded tagged byte array */\n  payload: string;\n  ttl?: number;\n  fee: bigint;\n  nonce?: number;\n  /** Base64Check encoded tagged byte array */\n  poi: string;\n}\n\nexport interface ChannelSnapshotSoloTx {\n  /** Base58Check encoded tagged pubkey */\n  channelId: string;\n  /** Base58Check encoded tagged pubkey */\n  fromId: string;\n  /** Base64Check encoded tagged byte array */\n  payload: string;\n  ttl?: number;\n  fee: bigint;\n  nonce?: number;\n}\n\nexport interface ChannelWithdrawTx {\n  /** Base58Check encoded tagged pubkey */\n  channelId: string;\n  /** Base58Check encoded tagged pubkey */\n  toId: string;\n  amount: bigint;\n  ttl?: number;\n  fee: bigint;\n  nonce: number;\n  /** Base58Check encoded tagged hash */\n  stateHash: string;\n  round: number;\n}\n\nexport interface CheckTxInPoolResponse {\n  status: string;\n}\n\nexport interface CommitmentId {\n  /** Base58Check encoded tagged value */\n  commitmentId: string;\n}\n\nexport interface ContractCallTx {\n  /** Base58Check encoded tagged pubkey */\n  callerId: string;\n  nonce?: number;\n  /** Base58Check encoded tagged pubkey */\n  contractId: string;\n  abiVersion: number;\n  fee: bigint;\n  ttl?: number;\n  amount: bigint;\n  gas: number;\n  gasPrice: bigint;\n  /** Base64Check encoded tagged byte array */\n  callData: string;\n}\n\nexport interface ContractCreateTx {\n  /** Base58Check encoded tagged pubkey */\n  ownerId: string;\n  nonce?: number;\n  /** Base64Check encoded tagged byte array */\n  code: string;\n  vmVersion: number;\n  abiVersion: number;\n  deposit: bigint;\n  amount: bigint;\n  gas: number;\n  gasPrice: bigint;\n  fee: bigint;\n  ttl?: number;\n  /** Base64Check encoded tagged byte array */\n  callData: string;\n}\n\nexport interface UnsignedTx {\n  /** Base64Check encoded tagged byte array */\n  tx: string;\n}\n\nexport interface GAAttachTx {\n  /** Base58Check encoded tagged pubkey */\n  ownerId: string;\n  nonce?: number;\n  /** Base64Check encoded tagged byte array */\n  code: string;\n  vmVersion: number;\n  abiVersion: number;\n  gas: number;\n  gasPrice: bigint;\n  fee: bigint;\n  ttl?: number;\n  /** Base64Check encoded tagged byte array */\n  callData: string;\n  /** Contract authorization function hash (hex encoded) */\n  authFun: string;\n}\n\nexport interface GAMetaTx {\n  /** Base58Check encoded tagged pubkey */\n  gaId: string;\n  abiVersion: number;\n  gas: number;\n  gasPrice: bigint;\n  fee: bigint;\n  ttl?: number;\n  /** Base64Check encoded tagged byte array */\n  authData: string;\n  tx: SignedTx;\n}\n\nexport interface NameClaimTx {\n  name: string;\n  nameSalt: number;\n  nameFee?: bigint;\n  fee: bigint;\n  ttl?: number;\n  /** Base58Check encoded tagged pubkey */\n  accountId: string;\n  nonce?: number;\n}\n\nexport interface NameHash {\n  /** Base58Check encoded tagged value */\n  nameId: string;\n}\n\nexport interface NamePreclaimTx {\n  /** Base58Check encoded tagged value */\n  commitmentId: string;\n  fee: bigint;\n  ttl?: number;\n  /** Base58Check encoded tagged pubkey */\n  accountId: string;\n  nonce?: number;\n}\n\nexport interface NameRevokeTx {\n  /** Base58Check encoded tagged value */\n  nameId: string;\n  fee: bigint;\n  ttl?: number;\n  /** Base58Check encoded tagged pubkey */\n  accountId: string;\n  nonce?: number;\n}\n\nexport interface NameTransferTx {\n  /** Base58Check encoded tagged value */\n  nameId: string;\n  /** Base58Check encoded tagged pubkey */\n  recipientId: string;\n  fee: bigint;\n  ttl?: number;\n  /** Base58Check encoded tagged pubkey */\n  accountId: string;\n  nonce?: number;\n}\n\nexport interface NameUpdateTx {\n  /** Base58Check encoded tagged value */\n  nameId: string;\n  nameTtl: number;\n  pointers: NamePointer[];\n  clientTtl: number;\n  fee: bigint;\n  ttl?: number;\n  /** Base58Check encoded tagged pubkey */\n  accountId: string;\n  nonce?: number;\n}\n\nexport interface PeerDetails {\n  /** Hostname of peer */\n  host: string;\n  port: number;\n  firstSeen: number;\n  lastSeen: number;\n  /** Base58Check encoded tagged hash */\n  genesisHash: string;\n  /** Base58Check encoded tagged hash */\n  topHash: string;\n  topDifficulty: number;\n  networkId?: string;\n  nodeVersion?: string;\n  nodeRevision?: string;\n  nodeVendor?: string;\n  nodeOs?: string;\n}\n\nexport interface OracleExtendTx {\n  fee: bigint;\n  oracleTtl: RelativeTTL;\n  /** Base58Check encoded tagged pubkey */\n  oracleId: string;\n  nonce?: number;\n  ttl?: number;\n}\n\nexport interface OracleQueryTx {\n  /** Base58Check encoded tagged pubkey */\n  oracleId: string;\n  query: string;\n  queryFee: bigint;\n  queryTtl: Ttl;\n  responseTtl: RelativeTTL;\n  fee: bigint;\n  ttl?: number;\n  /** Base58Check encoded tagged pubkey */\n  senderId: string;\n  nonce?: number;\n}\n\nexport interface OracleRegisterTx {\n  queryFormat: string;\n  responseFormat: string;\n  queryFee: bigint;\n  oracleTtl: Ttl;\n  /** Base58Check encoded tagged pubkey */\n  accountId: string;\n  nonce?: number;\n  fee: bigint;\n  ttl?: number;\n  abiVersion?: number;\n}\n\nexport interface OracleRespondTx {\n  /** Base58Check encoded tagged value */\n  queryId: string;\n  response: string;\n  responseTtl: RelativeTTL;\n  fee: bigint;\n  ttl?: number;\n  /** Base58Check encoded tagged pubkey */\n  oracleId: string;\n  nonce?: number;\n}\n\nexport interface PayingForTx {\n  /** Base58Check encoded tagged pubkey */\n  payerId: string;\n  fee: bigint;\n  nonce?: number;\n  tx: SignedTx;\n}\n\nexport interface PeerCount {\n  connected: PeerCountConnected;\n  available: PeerCountAvailable;\n  blocked: number;\n}\n\nexport interface PeerCountConnected {\n  inbound?: number;\n  outbound?: number;\n}\n\nexport interface PeerCountAvailable {\n  verified?: number;\n  unverified?: number;\n}\n\nexport interface Peers {\n  /** All discovered peers */\n  peers: string[];\n  /** All blocked peers */\n  blocked: string[];\n}\n\nexport interface PubKey {\n  /** Base58Check encoded tagged pubkey */\n  pubKey: string;\n}\n\nexport interface SpendTx {\n  /** Base58Check encoded tagged pubkey */\n  recipientId: string;\n  amount: bigint;\n  fee: bigint;\n  ttl?: number;\n  /** Base58Check encoded tagged pubkey */\n  senderId: string;\n  nonce?: number;\n  /** Base64Check encoded tagged byte array */\n  payload: string;\n}\n\nexport interface TokenSupply {\n  accounts?: number;\n  contracts?: number;\n  contractOracles?: number;\n  locked?: number;\n  oracles?: number;\n  oracleQueries?: number;\n  pendingRewards?: number;\n  total?: number;\n}\n\nexport interface OffChainCallContract extends OffChainUpdate {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  op: \"OffChainCallContract\";\n  /** Base58Check encoded tagged pubkey */\n  caller: string;\n  /** Base58Check encoded tagged pubkey */\n  contract: string;\n  abiVersion: number;\n  amount: bigint;\n  gas: number;\n  gasPrice: bigint;\n  /** Base64Check encoded tagged byte array */\n  callData: string;\n}\n\nexport interface OffChainDeposit extends OffChainUpdate {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  op: \"OffChainDeposit\";\n  /** Base58Check encoded tagged pubkey */\n  from: string;\n  amount: bigint;\n}\n\nexport interface OffChainNewContract extends OffChainUpdate {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  op: \"OffChainNewContract\";\n  /** Base58Check encoded tagged pubkey */\n  owner: string;\n  vmVersion: number;\n  abiVersion: number;\n  code: ByteCode;\n  deposit: bigint;\n  /** Base64Check encoded tagged byte array */\n  callData: string;\n}\n\nexport interface OffChainTransfer extends OffChainUpdate {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  op: \"OffChainTransfer\";\n  /** Base58Check encoded tagged pubkey */\n  from: string;\n  /** Base58Check encoded tagged pubkey */\n  to: string;\n  amount: bigint;\n}\n\nexport interface OffChainWithdrawal extends OffChainUpdate {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  op: \"OffChainWithdrawal\";\n  /** Base58Check encoded tagged pubkey */\n  to: string;\n  amount: bigint;\n}\n\nexport interface CreateContractUnsignedTx extends UnsignedTx {\n  /** Base58Check encoded tagged pubkey */\n  contractId: string;\n}\n\n/** Defines values for AccountKind. */\nexport type AccountKind = \"basic\" | \"generalized\";\n/** Defines values for Enum1. */\nexport type Enum1 = \"max\" | \"continuity\";\n/** Defines values for TTLType. */\nexport type TTLType = \"delta\" | \"block\";\n/** Defines values for TxType. */\nexport type TxType =\n  | \"SpendTx\"\n  | \"ChannelCreateTx\"\n  | \"ChannelDepositTx\"\n  | \"ChannelWithdrawTx\"\n  | \"ChannelForceProgressTx\"\n  | \"ChannelCloseMutualTx\"\n  | \"ChannelCloseSoloTx\"\n  | \"ChannelSlashTx\"\n  | \"ChannelSettleTx\"\n  | \"ChannelSnapshotSoloTx\"\n  | \"ChannelSetDelegatesTx\"\n  | \"OracleRegisterTx\"\n  | \"OracleExtendTx\"\n  | \"OracleQueryTx\"\n  | \"OracleRespondTx\"\n  | \"NamePreclaimTx\"\n  | \"NameClaimTx\"\n  | \"NameUpdateTx\"\n  | \"NameTransferTx\"\n  | \"NameRevokeTx\"\n  | \"ContractCreateTx\"\n  | \"ContractCallTx\"\n  | \"GAAttachTx\"\n  | \"GAMetaTx\"\n  | \"PayingForTx\";\n/** Defines values for ContractCallObjectReturnType. */\nexport type ContractCallObjectReturnType = \"ok\" | \"error\" | \"revert\";\n/** Defines values for Enum5. */\nexport type Enum5 = \"open\" | \"closed\" | \"all\";\n/** Defines values for GAObjectReturnType. */\nexport type GAObjectReturnType = \"ok\" | \"error\";\n\n/** Optional parameters. */\nexport interface GetAccountByPubkeyOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getAccountByPubkey operation. */\nexport type GetAccountByPubkeyResponse = Account;\n\n/** Optional parameters. */\nexport interface GetAccountByPubkeyAndHashOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getAccountByPubkeyAndHash operation. */\nexport type GetAccountByPubkeyAndHashResponse = Account;\n\n/** Optional parameters. */\nexport interface GetAccountByPubkeyAndHeightOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getAccountByPubkeyAndHeight operation. */\nexport type GetAccountByPubkeyAndHeightResponse = Account;\n\n/** Optional parameters. */\nexport interface GetAccountNextNonceOptionalParams\n  extends coreClient.OperationOptions {\n  /** What strategy to use in order to determine the next nonce: shall it check for continuity or return the largest nonce seen + 1. If you choose strategy max, then the greatest nonce seen in the account or currently in the transaction pool is incremented with 1 and returned. If you choose the strategy continuity, then transactions in the mempool are checked if there are gaps - missing nonces that prevent transactions with greater nonces to get included. */\n  strategy?: Enum1;\n}\n\n/** Contains response data for the getAccountNextNonce operation. */\nexport type GetAccountNextNonceResponse = NextNonceResponse;\n\n/** Optional parameters. */\nexport interface GetPendingAccountTransactionsByPubkeyOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getPendingAccountTransactionsByPubkey operation. */\nexport type GetPendingAccountTransactionsByPubkeyResponse = SignedTxs;\n\n/** Optional parameters. */\nexport interface GetAuctionEntryByNameOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getAuctionEntryByName operation. */\nexport type GetAuctionEntryByNameResponse = AuctionEntry;\n\n/** Optional parameters. */\nexport interface GetChannelByPubkeyOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getChannelByPubkey operation. */\nexport type GetChannelByPubkeyResponse = Channel;\n\n/** Optional parameters. */\nexport interface GetContractOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getContract operation. */\nexport type GetContractResponse = ContractObject;\n\n/** Optional parameters. */\nexport interface GetContractCodeOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getContractCode operation. */\nexport type GetContractCodeResponse = ByteCode;\n\n/** Optional parameters. */\nexport interface GetContractPoIOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getContractPoI operation. */\nexport type GetContractPoIResponse = PoI;\n\n/** Optional parameters. */\nexport interface GetCurrencyOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getCurrency operation. */\nexport type GetCurrencyResponse = Currency;\n\n/** Optional parameters. */\nexport interface ProtectedDryRunTxsOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the protectedDryRunTxs operation. */\nexport type ProtectedDryRunTxsResponse = DryRunResults;\n\n/** Optional parameters. */\nexport interface GetCurrentGenerationOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getCurrentGeneration operation. */\nexport type GetCurrentGenerationResponse = Generation;\n\n/** Optional parameters. */\nexport interface GetGenerationByHashOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getGenerationByHash operation. */\nexport type GetGenerationByHashResponse = Generation;\n\n/** Optional parameters. */\nexport interface GetGenerationByHeightOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getGenerationByHeight operation. */\nexport type GetGenerationByHeightResponse = Generation;\n\n/** Optional parameters. */\nexport interface GetTopHeaderOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getTopHeader operation. */\nexport type GetTopHeaderResponse = Header;\n\n/** Optional parameters. */\nexport interface GetPinningTxOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getPinningTx operation. */\nexport type GetPinningTxResponse = PinningTx;\n\n/** Optional parameters. */\nexport interface GetHyperchainContractPubkeysOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getHyperchainContractPubkeys operation. */\nexport type GetHyperchainContractPubkeysResponse = HCContractPubkeys;\n\n/** Optional parameters. */\nexport interface GetCurrentKeyBlockOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getCurrentKeyBlock operation. */\nexport type GetCurrentKeyBlockResponse = KeyBlock;\n\n/** Optional parameters. */\nexport interface GetCurrentKeyBlockHashOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getCurrentKeyBlockHash operation. */\nexport type GetCurrentKeyBlockHashResponse = HashResponse;\n\n/** Optional parameters. */\nexport interface GetCurrentKeyBlockHeightOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getCurrentKeyBlockHeight operation. */\nexport type GetCurrentKeyBlockHeightResponse = HeightResponse;\n\n/** Optional parameters. */\nexport interface GetKeyBlockByHashOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getKeyBlockByHash operation. */\nexport type GetKeyBlockByHashResponse = KeyBlock;\n\n/** Optional parameters. */\nexport interface GetKeyBlockByHeightOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getKeyBlockByHeight operation. */\nexport type GetKeyBlockByHeightResponse = KeyBlock;\n\n/** Optional parameters. */\nexport interface GetPendingKeyBlockOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getPendingKeyBlock operation. */\nexport type GetPendingKeyBlockResponse = KeyBlock;\n\n/** Optional parameters. */\nexport interface GetMicroBlockHeaderByHashOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getMicroBlockHeaderByHash operation. */\nexport type GetMicroBlockHeaderByHashResponse = MicroBlockHeader;\n\n/** Optional parameters. */\nexport interface GetMicroBlockTransactionsByHashOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getMicroBlockTransactionsByHash operation. */\nexport type GetMicroBlockTransactionsByHashResponse = SignedTxs;\n\n/** Optional parameters. */\nexport interface GetMicroBlockTransactionsCountByHashOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getMicroBlockTransactionsCountByHash operation. */\nexport type GetMicroBlockTransactionsCountByHashResponse = CountResponse;\n\n/** Optional parameters. */\nexport interface GetMicroBlockTransactionByHashAndIndexOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getMicroBlockTransactionByHashAndIndex operation. */\nexport type GetMicroBlockTransactionByHashAndIndexResponse = SignedTx;\n\n/** Optional parameters. */\nexport interface GetNameEntryByNameOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getNameEntryByName operation. */\nexport type GetNameEntryByNameResponse = NameEntry;\n\n/** Optional parameters. */\nexport interface GetNameEntryByNameHashOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getNameEntryByNameHash operation. */\nexport type GetNameEntryByNameHashResponse = NameEntry;\n\n/** Optional parameters. */\nexport interface GetOracleByPubkeyOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getOracleByPubkey operation. */\nexport type GetOracleByPubkeyResponse = RegisteredOracle;\n\n/** Optional parameters. */\nexport interface GetOracleQueriesByPubkeyOptionalParams\n  extends coreClient.OperationOptions {\n  /** Last query id in previous page */\n  from?: string;\n  /** Max number of oracle queries */\n  limit?: number;\n  /** The type of a query: open, closed or all */\n  type?: Enum5;\n}\n\n/** Contains response data for the getOracleQueriesByPubkey operation. */\nexport type GetOracleQueriesByPubkeyResponse = OracleQueries;\n\n/** Optional parameters. */\nexport interface GetOracleQueryByPubkeyAndQueryIdOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getOracleQueryByPubkeyAndQueryId operation. */\nexport type GetOracleQueryByPubkeyAndQueryIdResponse = OracleQuery;\n\n/** Optional parameters. */\nexport interface GetPeerPubkeyOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getPeerPubkey operation. */\nexport type GetPeerPubkeyResponse = PeerPubKey;\n\n/** Optional parameters. */\nexport interface GetRecentGasPricesOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getRecentGasPrices operation. */\nexport type GetRecentGasPricesResponse = GasPricesItem[];\n\n/** Optional parameters. */\nexport interface GetStatusOptionalParams extends coreClient.OperationOptions {}\n\n/** Contains response data for the getStatus operation. */\nexport type GetStatusResponse = Status;\n\n/** Optional parameters. */\nexport interface GetChainEndsOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getChainEnds operation. */\nexport type GetChainEndsResponse = {\n  /** The parsed response body. */\n  body: string[];\n};\n\n/** Optional parameters. */\nexport interface GetSyncStatusOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getSyncStatus operation. */\nexport type GetSyncStatusResponse = SyncStatus;\n\n/** Optional parameters. */\nexport interface PostTransactionOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the postTransaction operation. */\nexport type PostTransactionResponse = PostTxResponse;\n\n/** Optional parameters. */\nexport interface GetTransactionByHashOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getTransactionByHash operation. */\nexport type GetTransactionByHashResponse = SignedTx;\n\n/** Optional parameters. */\nexport interface GetTransactionInfoByHashOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getTransactionInfoByHash operation. */\nexport type GetTransactionInfoByHashResponse = TxInfoObject;\n\n/** Optional parameters. */\nexport interface NodeOptionalParams extends coreClient.ServiceClientOptions {\n  /** Overrides client endpoint. */\n  endpoint?: string;\n}\n"],"mappings":"","ignoreList":[]}