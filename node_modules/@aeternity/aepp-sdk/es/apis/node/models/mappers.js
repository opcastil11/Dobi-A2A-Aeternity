export const Account = {
  type: {
    name: "Composite",
    className: "Account",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      balance: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "balance",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      nonce: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "nonce",
        required: true,
        type: {
          name: "Number"
        }
      },
      payable: {
        serializedName: "payable",
        type: {
          name: "Boolean"
        }
      },
      kind: {
        serializedName: "kind",
        type: {
          name: "Enum",
          allowedValues: ["basic", "generalized"]
        }
      },
      contractId: {
        serializedName: "contract_id",
        type: {
          name: "String"
        }
      },
      authFun: {
        serializedName: "auth_fun",
        type: {
          name: "String"
        }
      }
    }
  }
};
export const ErrorModel = {
  type: {
    name: "Composite",
    className: "ErrorModel",
    modelProperties: {
      reason: {
        serializedName: "reason",
        required: true,
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "error_code",
        type: {
          name: "String"
        }
      }
    }
  }
};
export const NextNonceResponse = {
  type: {
    name: "Composite",
    className: "NextNonceResponse",
    modelProperties: {
      nextNonce: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "next_nonce",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const SignedTxs = {
  type: {
    name: "Composite",
    className: "SignedTxs",
    modelProperties: {
      transactions: {
        serializedName: "transactions",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SignedTx"
            }
          }
        }
      }
    }
  }
};
export const SignedTx = {
  type: {
    name: "Composite",
    className: "SignedTx",
    modelProperties: {
      tx: {
        serializedName: "tx",
        type: {
          name: "Composite",
          className: "Tx"
        }
      },
      blockHeight: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: -1
        },
        serializedName: "block_height",
        required: true,
        type: {
          name: "Number"
        }
      },
      blockHash: {
        serializedName: "block_hash",
        required: true,
        type: {
          name: "String"
        }
      },
      hash: {
        serializedName: "hash",
        required: true,
        type: {
          name: "String"
        }
      },
      encodedTx: {
        serializedName: "encoded_tx",
        type: {
          name: "String"
        }
      },
      signatures: {
        serializedName: "signatures",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};
export const Tx = {
  type: {
    name: "Composite",
    className: "Tx",
    modelProperties: {
      recipientId: {
        serializedName: "recipient_id",
        type: {
          name: "String"
        }
      },
      amount: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "amount",
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      fee: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "fee",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      ttl: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "ttl",
        type: {
          name: "Number"
        }
      },
      senderId: {
        serializedName: "sender_id",
        type: {
          name: "String"
        }
      },
      nonce: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "nonce",
        type: {
          name: "Number"
        }
      },
      payload: {
        serializedName: "payload",
        type: {
          name: "String"
        }
      },
      initiatorId: {
        serializedName: "initiator_id",
        type: {
          name: "String"
        }
      },
      initiatorAmount: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "initiator_amount",
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      responderId: {
        serializedName: "responder_id",
        type: {
          name: "String"
        }
      },
      responderAmount: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "responder_amount",
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      channelReserve: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "channel_reserve",
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      lockPeriod: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "lock_period",
        type: {
          name: "Number"
        }
      },
      stateHash: {
        serializedName: "state_hash",
        type: {
          name: "String"
        }
      },
      delegateIds: {
        serializedName: "delegate_ids",
        type: {
          name: "Composite",
          className: "Delegates"
        }
      },
      channelId: {
        serializedName: "channel_id",
        type: {
          name: "String"
        }
      },
      fromId: {
        serializedName: "from_id",
        type: {
          name: "String"
        }
      },
      round: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "round",
        type: {
          name: "Number"
        }
      },
      toId: {
        serializedName: "to_id",
        type: {
          name: "String"
        }
      },
      update: {
        serializedName: "update",
        type: {
          name: "Composite",
          className: "OffChainUpdate"
        }
      },
      offchainTrees: {
        serializedName: "offchain_trees",
        type: {
          name: "String"
        }
      },
      initiatorAmountFinal: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "initiator_amount_final",
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      responderAmountFinal: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "responder_amount_final",
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      poi: {
        serializedName: "poi",
        type: {
          name: "String"
        }
      },
      initiatorDelegateIds: {
        serializedName: "initiator_delegate_ids",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      responderDelegateIds: {
        serializedName: "responder_delegate_ids",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      queryFormat: {
        serializedName: "query_format",
        type: {
          name: "String"
        }
      },
      responseFormat: {
        serializedName: "response_format",
        type: {
          name: "String"
        }
      },
      queryFee: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "query_fee",
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      oracleTtl: {
        serializedName: "oracle_ttl",
        type: {
          name: "Composite",
          className: "RelativeTTL"
        }
      },
      accountId: {
        serializedName: "account_id",
        type: {
          name: "String"
        }
      },
      abiVersion: {
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 0
        },
        serializedName: "abi_version",
        type: {
          name: "Number"
        }
      },
      oracleId: {
        serializedName: "oracle_id",
        type: {
          name: "String"
        }
      },
      query: {
        serializedName: "query",
        type: {
          name: "String"
        }
      },
      queryTtl: {
        serializedName: "query_ttl",
        type: {
          name: "Composite",
          className: "Ttl"
        }
      },
      responseTtl: {
        serializedName: "response_ttl",
        type: {
          name: "Composite",
          className: "RelativeTTL"
        }
      },
      queryId: {
        serializedName: "query_id",
        type: {
          name: "String"
        }
      },
      response: {
        serializedName: "response",
        type: {
          name: "String"
        }
      },
      commitmentId: {
        serializedName: "commitment_id",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      nameSalt: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "name_salt",
        type: {
          name: "Number"
        }
      },
      nameFee: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "name_fee",
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      nameId: {
        serializedName: "name_id",
        type: {
          name: "String"
        }
      },
      nameTtl: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "name_ttl",
        type: {
          name: "Number"
        }
      },
      pointers: {
        serializedName: "pointers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NamePointer"
            }
          }
        }
      },
      clientTtl: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "client_ttl",
        type: {
          name: "Number"
        }
      },
      ownerId: {
        serializedName: "owner_id",
        type: {
          name: "String"
        }
      },
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      vmVersion: {
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 0
        },
        serializedName: "vm_version",
        type: {
          name: "Number"
        }
      },
      deposit: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "deposit",
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      gas: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "gas",
        type: {
          name: "Number"
        }
      },
      gasPrice: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "gas_price",
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      callData: {
        serializedName: "call_data",
        type: {
          name: "String"
        }
      },
      callerId: {
        serializedName: "caller_id",
        type: {
          name: "String"
        }
      },
      contractId: {
        serializedName: "contract_id",
        type: {
          name: "String"
        }
      },
      authFun: {
        constraints: {
          Pattern: new RegExp("^(0x|0X)?[a-fA-F0-9]+$")
        },
        serializedName: "auth_fun",
        type: {
          name: "String"
        }
      },
      gaId: {
        serializedName: "ga_id",
        type: {
          name: "String"
        }
      },
      authData: {
        serializedName: "auth_data",
        type: {
          name: "String"
        }
      },
      tx: {
        serializedName: "tx",
        type: {
          name: "Composite",
          className: "SignedTx"
        }
      },
      payerId: {
        serializedName: "payer_id",
        type: {
          name: "String"
        }
      },
      version: {
        constraints: {
          InclusiveMaximum: 4294967295,
          InclusiveMinimum: 0
        },
        serializedName: "version",
        required: true,
        type: {
          name: "Number"
        }
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["SpendTx", "ChannelCreateTx", "ChannelDepositTx", "ChannelWithdrawTx", "ChannelForceProgressTx", "ChannelCloseMutualTx", "ChannelCloseSoloTx", "ChannelSlashTx", "ChannelSettleTx", "ChannelSnapshotSoloTx", "ChannelSetDelegatesTx", "OracleRegisterTx", "OracleExtendTx", "OracleQueryTx", "OracleRespondTx", "NamePreclaimTx", "NameClaimTx", "NameUpdateTx", "NameTransferTx", "NameRevokeTx", "ContractCreateTx", "ContractCallTx", "GAAttachTx", "GAMetaTx", "PayingForTx"]
        }
      }
    }
  }
};
export const Delegates = {
  type: {
    name: "Composite",
    className: "Delegates",
    modelProperties: {
      initiator: {
        serializedName: "initiator",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      responder: {
        serializedName: "responder",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};
export const OffChainUpdate = {
  type: {
    name: "Composite",
    className: "OffChainUpdate",
    uberParent: "OffChainUpdate",
    polymorphicDiscriminator: {
      serializedName: "op",
      clientName: "op"
    },
    modelProperties: {
      op: {
        serializedName: "op",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};
export const RelativeTTL = {
  type: {
    name: "Composite",
    className: "RelativeTTL",
    modelProperties: {
      type: {
        defaultValue: "delta",
        isConstant: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      value: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "value",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const Ttl = {
  type: {
    name: "Composite",
    className: "Ttl",
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["delta", "block"]
        }
      },
      value: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "value",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const NamePointer = {
  type: {
    name: "Composite",
    className: "NamePointer",
    modelProperties: {
      key: {
        serializedName: "key",
        required: true,
        type: {
          name: "String"
        }
      },
      encodedKey: {
        serializedName: "encoded_key",
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};
export const AuctionEntry = {
  type: {
    name: "Composite",
    className: "AuctionEntry",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      startedAt: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "started_at",
        required: true,
        type: {
          name: "Number"
        }
      },
      endsAt: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "ends_at",
        required: true,
        type: {
          name: "Number"
        }
      },
      highestBidder: {
        serializedName: "highest_bidder",
        required: true,
        type: {
          name: "String"
        }
      },
      highestBid: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "highest_bid",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      }
    }
  }
};
export const Channel = {
  type: {
    name: "Composite",
    className: "Channel",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      initiatorId: {
        serializedName: "initiator_id",
        required: true,
        type: {
          name: "String"
        }
      },
      responderId: {
        serializedName: "responder_id",
        required: true,
        type: {
          name: "String"
        }
      },
      channelAmount: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "channel_amount",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      initiatorAmount: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "initiator_amount",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      responderAmount: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "responder_amount",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      channelReserve: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "channel_reserve",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      delegateIds: {
        serializedName: "delegate_ids",
        type: {
          name: "Composite",
          className: "Delegates"
        }
      },
      stateHash: {
        serializedName: "state_hash",
        required: true,
        type: {
          name: "String"
        }
      },
      round: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "round",
        required: true,
        type: {
          name: "Number"
        }
      },
      soloRound: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "solo_round",
        required: true,
        type: {
          name: "Number"
        }
      },
      lockPeriod: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "lock_period",
        required: true,
        type: {
          name: "Number"
        }
      },
      lockedUntil: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "locked_until",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const ContractObject = {
  type: {
    name: "Composite",
    className: "ContractObject",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      ownerId: {
        serializedName: "owner_id",
        required: true,
        type: {
          name: "String"
        }
      },
      vmVersion: {
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 0
        },
        serializedName: "vm_version",
        required: true,
        type: {
          name: "Number"
        }
      },
      abiVersion: {
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 0
        },
        serializedName: "abi_version",
        required: true,
        type: {
          name: "Number"
        }
      },
      active: {
        serializedName: "active",
        required: true,
        type: {
          name: "Boolean"
        }
      },
      referrerIds: {
        serializedName: "referrer_ids",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      deposit: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "deposit",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      }
    }
  }
};
export const ByteCode = {
  type: {
    name: "Composite",
    className: "ByteCode",
    modelProperties: {
      bytecode: {
        serializedName: "bytecode",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};
export const PoI = {
  type: {
    name: "Composite",
    className: "PoI",
    modelProperties: {
      poi: {
        serializedName: "poi",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};
export const Currency = {
  type: {
    name: "Composite",
    className: "Currency",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      symbol: {
        serializedName: "symbol",
        required: true,
        type: {
          name: "String"
        }
      },
      subunit: {
        serializedName: "subunit",
        required: true,
        type: {
          name: "String"
        }
      },
      subunitsPerUnit: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "subunits_per_unit",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      fiatConverstionUrl: {
        serializedName: "fiat_converstion_url",
        type: {
          name: "String"
        }
      },
      fiatConversionUrl: {
        serializedName: "fiat_conversion_url",
        type: {
          name: "String"
        }
      },
      logo: {
        serializedName: "logo",
        type: {
          name: "Composite",
          className: "Image"
        }
      },
      primaryColour: {
        serializedName: "primary_colour",
        required: true,
        type: {
          name: "String"
        }
      },
      secondaryColour: {
        serializedName: "secondary_colour",
        required: true,
        type: {
          name: "String"
        }
      },
      networkName: {
        serializedName: "network_name",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};
export const Image = {
  type: {
    name: "Composite",
    className: "Image",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      data: {
        serializedName: "data",
        type: {
          name: "String"
        }
      }
    }
  }
};
export const DryRunInput = {
  type: {
    name: "Composite",
    className: "DryRunInput",
    modelProperties: {
      top: {
        serializedName: "top",
        type: {
          name: "String"
        }
      },
      accounts: {
        serializedName: "accounts",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DryRunAccount"
            }
          }
        }
      },
      txs: {
        serializedName: "txs",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DryRunInputItem"
            }
          }
        }
      },
      txEvents: {
        defaultValue: false,
        serializedName: "tx_events",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};
export const DryRunAccount = {
  type: {
    name: "Composite",
    className: "DryRunAccount",
    modelProperties: {
      pubKey: {
        serializedName: "pub_key",
        required: true,
        type: {
          name: "String"
        }
      },
      amount: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "amount",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      }
    }
  }
};
export const DryRunInputItem = {
  type: {
    name: "Composite",
    className: "DryRunInputItem",
    modelProperties: {
      tx: {
        serializedName: "tx",
        type: {
          name: "String"
        }
      },
      txHash: {
        serializedName: "tx_hash",
        type: {
          name: "String"
        }
      },
      callReq: {
        serializedName: "call_req",
        type: {
          name: "Composite",
          className: "DryRunCallReq"
        }
      }
    }
  }
};
export const DryRunCallReq = {
  type: {
    name: "Composite",
    className: "DryRunCallReq",
    modelProperties: {
      calldata: {
        serializedName: "calldata",
        required: true,
        type: {
          name: "String"
        }
      },
      contract: {
        serializedName: "contract",
        required: true,
        type: {
          name: "String"
        }
      },
      amount: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "amount",
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      gas: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "gas",
        type: {
          name: "Number"
        }
      },
      caller: {
        serializedName: "caller",
        type: {
          name: "String"
        }
      },
      nonce: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "nonce",
        type: {
          name: "Number"
        }
      },
      abiVersion: {
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 0
        },
        serializedName: "abi_version",
        type: {
          name: "Number"
        }
      },
      context: {
        serializedName: "context",
        type: {
          name: "Composite",
          className: "DryRunCallContext"
        }
      }
    }
  }
};
export const DryRunCallContext = {
  type: {
    name: "Composite",
    className: "DryRunCallContext",
    modelProperties: {
      tx: {
        serializedName: "tx",
        type: {
          name: "String"
        }
      },
      txHash: {
        serializedName: "tx_hash",
        type: {
          name: "String"
        }
      },
      stateful: {
        serializedName: "stateful",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};
export const DryRunResults = {
  type: {
    name: "Composite",
    className: "DryRunResults",
    modelProperties: {
      results: {
        serializedName: "results",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DryRunResult"
            }
          }
        }
      },
      txEvents: {
        serializedName: "tx_events",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Dictionary",
              value: {
                type: {
                  name: "any"
                }
              }
            }
          }
        }
      }
    }
  }
};
export const DryRunResult = {
  type: {
    name: "Composite",
    className: "DryRunResult",
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      result: {
        serializedName: "result",
        required: true,
        type: {
          name: "String"
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      },
      callObj: {
        serializedName: "call_obj",
        type: {
          name: "Composite",
          className: "ContractCallObject"
        }
      }
    }
  }
};
export const ContractCallObject = {
  type: {
    name: "Composite",
    className: "ContractCallObject",
    modelProperties: {
      callerId: {
        serializedName: "caller_id",
        required: true,
        type: {
          name: "String"
        }
      },
      callerNonce: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "caller_nonce",
        required: true,
        type: {
          name: "Number"
        }
      },
      height: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "height",
        required: true,
        type: {
          name: "Number"
        }
      },
      contractId: {
        serializedName: "contract_id",
        required: true,
        type: {
          name: "String"
        }
      },
      gasPrice: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "gas_price",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      gasUsed: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "gas_used",
        required: true,
        type: {
          name: "Number"
        }
      },
      log: {
        serializedName: "log",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Event"
            }
          }
        }
      },
      returnValue: {
        serializedName: "return_value",
        required: true,
        type: {
          name: "String"
        }
      },
      returnType: {
        serializedName: "return_type",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["ok", "error", "revert"]
        }
      }
    }
  }
};
export const Event = {
  type: {
    name: "Composite",
    className: "Event",
    modelProperties: {
      address: {
        serializedName: "address",
        required: true,
        type: {
          name: "String"
        }
      },
      topics: {
        serializedName: "topics",
        required: true,
        type: {
          name: "Sequence",
          element: {
            constraints: {
              InclusiveMinimum: 0
            },
            type: {
              // @ts-expect-error we are extending autorest with BigInt support
              name: "BigInt"
            }
          }
        }
      },
      data: {
        serializedName: "data",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};
export const Generation = {
  type: {
    name: "Composite",
    className: "Generation",
    modelProperties: {
      keyBlock: {
        serializedName: "key_block",
        type: {
          name: "Composite",
          className: "KeyBlock"
        }
      },
      microBlocks: {
        serializedName: "micro_blocks",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};
export const KeyBlock = {
  type: {
    name: "Composite",
    className: "KeyBlock",
    modelProperties: {
      hash: {
        serializedName: "hash",
        required: true,
        type: {
          name: "String"
        }
      },
      height: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "height",
        required: true,
        type: {
          name: "Number"
        }
      },
      prevHash: {
        serializedName: "prev_hash",
        required: true,
        type: {
          name: "String"
        }
      },
      prevKeyHash: {
        serializedName: "prev_key_hash",
        required: true,
        type: {
          name: "String"
        }
      },
      stateHash: {
        serializedName: "state_hash",
        required: true,
        type: {
          name: "String"
        }
      },
      miner: {
        serializedName: "miner",
        required: true,
        type: {
          name: "String"
        }
      },
      beneficiary: {
        serializedName: "beneficiary",
        required: true,
        type: {
          name: "String"
        }
      },
      flags: {
        serializedName: "flags",
        required: true,
        type: {
          name: "String"
        }
      },
      target: {
        constraints: {
          InclusiveMaximum: 4294967295,
          InclusiveMinimum: 0
        },
        serializedName: "target",
        required: true,
        type: {
          name: "Number"
        }
      },
      pow: {
        constraints: {
          MinItems: 42,
          MaxItems: 42
        },
        serializedName: "pow",
        type: {
          name: "Sequence",
          element: {
            constraints: {
              InclusiveMaximum: 4294967295,
              InclusiveMinimum: 0
            },
            type: {
              name: "Number"
            }
          }
        }
      },
      nonce: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "nonce",
        type: {
          name: "Number"
        }
      },
      time: {
        serializedName: "time",
        required: true,
        type: {
          name: "UnixTime"
        }
      },
      version: {
        constraints: {
          InclusiveMaximum: 4294967295,
          InclusiveMinimum: 0
        },
        serializedName: "version",
        required: true,
        type: {
          name: "Number"
        }
      },
      info: {
        serializedName: "info",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};
export const Header = {
  type: {
    name: "Composite",
    className: "Header",
    modelProperties: {
      hash: {
        serializedName: "hash",
        required: true,
        type: {
          name: "String"
        }
      },
      height: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "height",
        required: true,
        type: {
          name: "Number"
        }
      },
      prevHash: {
        serializedName: "prev_hash",
        required: true,
        type: {
          name: "String"
        }
      },
      prevKeyHash: {
        serializedName: "prev_key_hash",
        required: true,
        type: {
          name: "String"
        }
      },
      stateHash: {
        serializedName: "state_hash",
        required: true,
        type: {
          name: "String"
        }
      },
      miner: {
        serializedName: "miner",
        type: {
          name: "String"
        }
      },
      beneficiary: {
        serializedName: "beneficiary",
        type: {
          name: "String"
        }
      },
      flags: {
        serializedName: "flags",
        type: {
          name: "String"
        }
      },
      target: {
        constraints: {
          InclusiveMaximum: 4294967295,
          InclusiveMinimum: 0
        },
        serializedName: "target",
        type: {
          name: "Number"
        }
      },
      pow: {
        constraints: {
          MinItems: 42,
          MaxItems: 42
        },
        serializedName: "pow",
        type: {
          name: "Sequence",
          element: {
            constraints: {
              InclusiveMaximum: 4294967295,
              InclusiveMinimum: 0
            },
            type: {
              name: "Number"
            }
          }
        }
      },
      nonce: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "nonce",
        type: {
          name: "Number"
        }
      },
      time: {
        serializedName: "time",
        required: true,
        type: {
          name: "UnixTime"
        }
      },
      version: {
        constraints: {
          InclusiveMaximum: 4294967295,
          InclusiveMinimum: 0
        },
        serializedName: "version",
        required: true,
        type: {
          name: "Number"
        }
      },
      info: {
        serializedName: "info",
        type: {
          name: "String"
        }
      },
      pofHash: {
        serializedName: "pof_hash",
        type: {
          name: "String"
        }
      },
      txsHash: {
        serializedName: "txs_hash",
        type: {
          name: "String"
        }
      },
      signature: {
        serializedName: "signature",
        type: {
          name: "String"
        }
      }
    }
  }
};
export const PinningTx = {
  type: {
    name: "Composite",
    className: "PinningTx",
    modelProperties: {
      epoch: {
        serializedName: "epoch",
        required: true,
        type: {
          name: "Number"
        }
      },
      height: {
        serializedName: "height",
        required: true,
        type: {
          name: "Number"
        }
      },
      blockHash: {
        serializedName: "block_hash",
        required: true,
        type: {
          name: "String"
        }
      },
      parentPayload: {
        serializedName: "parent_payload",
        required: true,
        type: {
          name: "String"
        }
      },
      lastLeader: {
        serializedName: "last_leader",
        required: true,
        type: {
          name: "String"
        }
      },
      parentType: {
        serializedName: "parent_type",
        required: true,
        type: {
          name: "String"
        }
      },
      parentNetworkId: {
        serializedName: "parent_network_id",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};
export const HCContractPubkeys = {
  type: {
    name: "Composite",
    className: "HCContractPubkeys",
    modelProperties: {
      staking: {
        serializedName: "staking",
        required: true,
        type: {
          name: "String"
        }
      },
      election: {
        serializedName: "election",
        type: {
          name: "String"
        }
      },
      rewards: {
        serializedName: "rewards",
        type: {
          name: "String"
        }
      }
    }
  }
};
export const HashResponse = {
  type: {
    name: "Composite",
    className: "HashResponse",
    modelProperties: {
      hash: {
        serializedName: "hash",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};
export const HeightResponse = {
  type: {
    name: "Composite",
    className: "HeightResponse",
    modelProperties: {
      height: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "height",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const MicroBlockHeader = {
  type: {
    name: "Composite",
    className: "MicroBlockHeader",
    modelProperties: {
      hash: {
        serializedName: "hash",
        required: true,
        type: {
          name: "String"
        }
      },
      height: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "height",
        required: true,
        type: {
          name: "Number"
        }
      },
      pofHash: {
        serializedName: "pof_hash",
        required: true,
        type: {
          name: "String"
        }
      },
      prevHash: {
        serializedName: "prev_hash",
        required: true,
        type: {
          name: "String"
        }
      },
      prevKeyHash: {
        serializedName: "prev_key_hash",
        required: true,
        type: {
          name: "String"
        }
      },
      stateHash: {
        serializedName: "state_hash",
        required: true,
        type: {
          name: "String"
        }
      },
      txsHash: {
        serializedName: "txs_hash",
        required: true,
        type: {
          name: "String"
        }
      },
      signature: {
        serializedName: "signature",
        required: true,
        type: {
          name: "String"
        }
      },
      time: {
        serializedName: "time",
        required: true,
        type: {
          name: "UnixTime"
        }
      },
      version: {
        constraints: {
          InclusiveMaximum: 4294967295,
          InclusiveMinimum: 0
        },
        serializedName: "version",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const CountResponse = {
  type: {
    name: "Composite",
    className: "CountResponse",
    modelProperties: {
      count: {
        constraints: {
          InclusiveMaximum: 4294967295,
          InclusiveMinimum: 0
        },
        serializedName: "count",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const NameEntry = {
  type: {
    name: "Composite",
    className: "NameEntry",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      owner: {
        serializedName: "owner",
        type: {
          name: "String"
        }
      },
      ttl: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "ttl",
        required: true,
        type: {
          name: "Number"
        }
      },
      pointers: {
        serializedName: "pointers",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NamePointerComplete"
            }
          }
        }
      }
    }
  }
};
export const NamePointerComplete = {
  type: {
    name: "Composite",
    className: "NamePointerComplete",
    modelProperties: {
      key: {
        serializedName: "key",
        required: true,
        type: {
          name: "String"
        }
      },
      encodedKey: {
        serializedName: "encoded_key",
        required: true,
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};
export const RegisteredOracle = {
  type: {
    name: "Composite",
    className: "RegisteredOracle",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      queryFormat: {
        serializedName: "query_format",
        required: true,
        type: {
          name: "String"
        }
      },
      responseFormat: {
        serializedName: "response_format",
        required: true,
        type: {
          name: "String"
        }
      },
      queryFee: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "query_fee",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      ttl: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "ttl",
        required: true,
        type: {
          name: "Number"
        }
      },
      abiVersion: {
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 0
        },
        serializedName: "abi_version",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const OracleQueries = {
  type: {
    name: "Composite",
    className: "OracleQueries",
    modelProperties: {
      oracleQueries: {
        serializedName: "oracle_queries",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OracleQuery"
            }
          }
        }
      }
    }
  }
};
export const OracleQuery = {
  type: {
    name: "Composite",
    className: "OracleQuery",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      senderId: {
        serializedName: "sender_id",
        required: true,
        type: {
          name: "String"
        }
      },
      senderNonce: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "sender_nonce",
        required: true,
        type: {
          name: "Number"
        }
      },
      oracleId: {
        serializedName: "oracle_id",
        required: true,
        type: {
          name: "String"
        }
      },
      query: {
        serializedName: "query",
        required: true,
        type: {
          name: "String"
        }
      },
      response: {
        serializedName: "response",
        required: true,
        type: {
          name: "String"
        }
      },
      ttl: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "ttl",
        required: true,
        type: {
          name: "Number"
        }
      },
      responseTtl: {
        serializedName: "response_ttl",
        type: {
          name: "Composite",
          className: "Ttl"
        }
      },
      fee: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "fee",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      }
    }
  }
};
export const PeerPubKey = {
  type: {
    name: "Composite",
    className: "PeerPubKey",
    modelProperties: {
      pubkey: {
        serializedName: "pubkey",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};
export const GasPricesItem = {
  type: {
    name: "Composite",
    className: "GasPricesItem",
    modelProperties: {
      minGasPrice: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "min_gas_price",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      utilization: {
        constraints: {
          InclusiveMaximum: 100,
          InclusiveMinimum: 0
        },
        serializedName: "utilization",
        required: true,
        type: {
          name: "Number"
        }
      },
      minutes: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "minutes",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const Status = {
  type: {
    name: "Composite",
    className: "Status",
    modelProperties: {
      genesisKeyBlockHash: {
        serializedName: "genesis_key_block_hash",
        required: true,
        type: {
          name: "String"
        }
      },
      solutions: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "solutions",
        required: true,
        type: {
          name: "Number"
        }
      },
      difficulty: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "difficulty",
        required: true,
        type: {
          name: "Number"
        }
      },
      hashrate: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "hashrate",
        required: true,
        type: {
          name: "Number"
        }
      },
      syncing: {
        serializedName: "syncing",
        required: true,
        type: {
          name: "Boolean"
        }
      },
      syncProgress: {
        constraints: {
          InclusiveMaximum: 100,
          InclusiveMinimum: 0
        },
        serializedName: "sync_progress",
        type: {
          name: "Number"
        }
      },
      uptime: {
        serializedName: "uptime",
        required: true,
        type: {
          name: "String"
        }
      },
      listening: {
        serializedName: "listening",
        required: true,
        type: {
          name: "Boolean"
        }
      },
      protocols: {
        serializedName: "protocols",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Protocol"
            }
          }
        }
      },
      nodeVersion: {
        serializedName: "node_version",
        required: true,
        type: {
          name: "String"
        }
      },
      nodeRevision: {
        serializedName: "node_revision",
        required: true,
        type: {
          name: "String"
        }
      },
      peerCount: {
        constraints: {
          InclusiveMaximum: 4294967295,
          InclusiveMinimum: 0
        },
        serializedName: "peer_count",
        required: true,
        type: {
          name: "Number"
        }
      },
      peerConnections: {
        serializedName: "peer_connections",
        type: {
          name: "Composite",
          className: "PeerConnections"
        }
      },
      pendingTransactionsCount: {
        constraints: {
          InclusiveMaximum: 4294967295,
          InclusiveMinimum: 0
        },
        serializedName: "pending_transactions_count",
        required: true,
        type: {
          name: "Number"
        }
      },
      networkId: {
        serializedName: "network_id",
        required: true,
        type: {
          name: "String"
        }
      },
      peerPubkey: {
        serializedName: "peer_pubkey",
        required: true,
        type: {
          name: "String"
        }
      },
      topKeyBlockHash: {
        serializedName: "top_key_block_hash",
        required: true,
        type: {
          name: "String"
        }
      },
      topBlockHeight: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "top_block_height",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const Protocol = {
  type: {
    name: "Composite",
    className: "Protocol",
    modelProperties: {
      version: {
        constraints: {
          InclusiveMaximum: 4294967295,
          InclusiveMinimum: 0
        },
        serializedName: "version",
        required: true,
        type: {
          name: "Number"
        }
      },
      effectiveAtHeight: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "effective_at_height",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const PeerConnections = {
  type: {
    name: "Composite",
    className: "PeerConnections",
    modelProperties: {
      inbound: {
        constraints: {
          InclusiveMaximum: 4294967295,
          InclusiveMinimum: 0
        },
        serializedName: "inbound",
        required: true,
        type: {
          name: "Number"
        }
      },
      outbound: {
        constraints: {
          InclusiveMaximum: 4294967295,
          InclusiveMinimum: 0
        },
        serializedName: "outbound",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const SyncStatus = {
  type: {
    name: "Composite",
    className: "SyncStatus",
    modelProperties: {
      progress: {
        serializedName: "progress",
        required: true,
        type: {
          name: "Number"
        }
      },
      target: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "target",
        required: true,
        type: {
          name: "Number"
        }
      },
      speed: {
        serializedName: "speed",
        required: true,
        type: {
          name: "Number"
        }
      },
      estimate: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "estimate",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const EncodedTx = {
  type: {
    name: "Composite",
    className: "EncodedTx",
    modelProperties: {
      tx: {
        serializedName: "tx",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};
export const PostTxResponse = {
  type: {
    name: "Composite",
    className: "PostTxResponse",
    modelProperties: {
      txHash: {
        serializedName: "tx_hash",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};
export const TxInfoObject = {
  type: {
    name: "Composite",
    className: "TxInfoObject",
    modelProperties: {
      callInfo: {
        serializedName: "call_info",
        type: {
          name: "Composite",
          className: "ContractCallObject"
        }
      },
      gaInfo: {
        serializedName: "ga_info",
        type: {
          name: "Composite",
          className: "GAObject"
        }
      },
      txInfo: {
        serializedName: "tx_info",
        type: {
          name: "String"
        }
      }
    }
  }
};
export const GAObject = {
  type: {
    name: "Composite",
    className: "GAObject",
    modelProperties: {
      callerId: {
        serializedName: "caller_id",
        required: true,
        type: {
          name: "String"
        }
      },
      height: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "height",
        required: true,
        type: {
          name: "Number"
        }
      },
      gasPrice: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "gas_price",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      gasUsed: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "gas_used",
        required: true,
        type: {
          name: "Number"
        }
      },
      returnValue: {
        serializedName: "return_value",
        required: true,
        type: {
          name: "String"
        }
      },
      returnType: {
        serializedName: "return_type",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["ok", "error"]
        }
      },
      innerObject: {
        serializedName: "inner_object",
        type: {
          name: "Composite",
          className: "TxInfoObject"
        }
      }
    }
  }
};
export const ChannelCloseMutualTx = {
  type: {
    name: "Composite",
    className: "ChannelCloseMutualTx",
    modelProperties: {
      channelId: {
        serializedName: "channel_id",
        required: true,
        type: {
          name: "String"
        }
      },
      fromId: {
        serializedName: "from_id",
        required: true,
        type: {
          name: "String"
        }
      },
      initiatorAmountFinal: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "initiator_amount_final",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      responderAmountFinal: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "responder_amount_final",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      ttl: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "ttl",
        type: {
          name: "Number"
        }
      },
      fee: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "fee",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      nonce: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "nonce",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const ChannelCloseSoloTx = {
  type: {
    name: "Composite",
    className: "ChannelCloseSoloTx",
    modelProperties: {
      channelId: {
        serializedName: "channel_id",
        required: true,
        type: {
          name: "String"
        }
      },
      fromId: {
        serializedName: "from_id",
        required: true,
        type: {
          name: "String"
        }
      },
      payload: {
        serializedName: "payload",
        required: true,
        type: {
          name: "String"
        }
      },
      ttl: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "ttl",
        type: {
          name: "Number"
        }
      },
      fee: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "fee",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      nonce: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "nonce",
        type: {
          name: "Number"
        }
      },
      poi: {
        serializedName: "poi",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};
export const ChannelCreateTx = {
  type: {
    name: "Composite",
    className: "ChannelCreateTx",
    modelProperties: {
      initiatorId: {
        serializedName: "initiator_id",
        required: true,
        type: {
          name: "String"
        }
      },
      initiatorAmount: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "initiator_amount",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      responderId: {
        serializedName: "responder_id",
        required: true,
        type: {
          name: "String"
        }
      },
      responderAmount: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "responder_amount",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      channelReserve: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "channel_reserve",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      lockPeriod: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "lock_period",
        required: true,
        type: {
          name: "Number"
        }
      },
      ttl: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "ttl",
        type: {
          name: "Number"
        }
      },
      fee: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "fee",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      nonce: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "nonce",
        type: {
          name: "Number"
        }
      },
      stateHash: {
        serializedName: "state_hash",
        required: true,
        type: {
          name: "String"
        }
      },
      delegateIds: {
        serializedName: "delegate_ids",
        type: {
          name: "Composite",
          className: "Delegates"
        }
      }
    }
  }
};
export const ChannelDepositTx = {
  type: {
    name: "Composite",
    className: "ChannelDepositTx",
    modelProperties: {
      channelId: {
        serializedName: "channel_id",
        required: true,
        type: {
          name: "String"
        }
      },
      fromId: {
        serializedName: "from_id",
        required: true,
        type: {
          name: "String"
        }
      },
      amount: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "amount",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      ttl: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "ttl",
        type: {
          name: "Number"
        }
      },
      fee: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "fee",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      nonce: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "nonce",
        required: true,
        type: {
          name: "Number"
        }
      },
      stateHash: {
        serializedName: "state_hash",
        required: true,
        type: {
          name: "String"
        }
      },
      round: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "round",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const ChannelForceProgressTx = {
  type: {
    name: "Composite",
    className: "ChannelForceProgressTx",
    modelProperties: {
      channelId: {
        serializedName: "channel_id",
        required: true,
        type: {
          name: "String"
        }
      },
      fromId: {
        serializedName: "from_id",
        required: true,
        type: {
          name: "String"
        }
      },
      payload: {
        serializedName: "payload",
        required: true,
        type: {
          name: "String"
        }
      },
      round: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "round",
        required: true,
        type: {
          name: "Number"
        }
      },
      update: {
        serializedName: "update",
        type: {
          name: "Composite",
          className: "OffChainUpdate"
        }
      },
      stateHash: {
        serializedName: "state_hash",
        required: true,
        type: {
          name: "String"
        }
      },
      ttl: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "ttl",
        type: {
          name: "Number"
        }
      },
      fee: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "fee",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      nonce: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "nonce",
        type: {
          name: "Number"
        }
      },
      offchainTrees: {
        serializedName: "offchain_trees",
        type: {
          name: "String"
        }
      }
    }
  }
};
export const ChannelSetDelegatesTx = {
  type: {
    name: "Composite",
    className: "ChannelSetDelegatesTx",
    modelProperties: {
      channelId: {
        serializedName: "channel_id",
        required: true,
        type: {
          name: "String"
        }
      },
      fromId: {
        serializedName: "from_id",
        required: true,
        type: {
          name: "String"
        }
      },
      initiatorDelegateIds: {
        serializedName: "initiator_delegate_ids",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      responderDelegateIds: {
        serializedName: "responder_delegate_ids",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      stateHash: {
        serializedName: "state_hash",
        required: true,
        type: {
          name: "String"
        }
      },
      round: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "round",
        required: true,
        type: {
          name: "Number"
        }
      },
      payload: {
        serializedName: "payload",
        required: true,
        type: {
          name: "String"
        }
      },
      ttl: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "ttl",
        type: {
          name: "Number"
        }
      },
      fee: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "fee",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      nonce: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "nonce",
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const ChannelSettleTx = {
  type: {
    name: "Composite",
    className: "ChannelSettleTx",
    modelProperties: {
      channelId: {
        serializedName: "channel_id",
        required: true,
        type: {
          name: "String"
        }
      },
      fromId: {
        serializedName: "from_id",
        required: true,
        type: {
          name: "String"
        }
      },
      initiatorAmountFinal: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "initiator_amount_final",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      responderAmountFinal: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "responder_amount_final",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      ttl: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "ttl",
        type: {
          name: "Number"
        }
      },
      fee: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "fee",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      nonce: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "nonce",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const ChannelSlashTx = {
  type: {
    name: "Composite",
    className: "ChannelSlashTx",
    modelProperties: {
      channelId: {
        serializedName: "channel_id",
        required: true,
        type: {
          name: "String"
        }
      },
      fromId: {
        serializedName: "from_id",
        required: true,
        type: {
          name: "String"
        }
      },
      payload: {
        serializedName: "payload",
        required: true,
        type: {
          name: "String"
        }
      },
      ttl: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "ttl",
        type: {
          name: "Number"
        }
      },
      fee: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "fee",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      nonce: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "nonce",
        type: {
          name: "Number"
        }
      },
      poi: {
        serializedName: "poi",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};
export const ChannelSnapshotSoloTx = {
  type: {
    name: "Composite",
    className: "ChannelSnapshotSoloTx",
    modelProperties: {
      channelId: {
        serializedName: "channel_id",
        required: true,
        type: {
          name: "String"
        }
      },
      fromId: {
        serializedName: "from_id",
        required: true,
        type: {
          name: "String"
        }
      },
      payload: {
        serializedName: "payload",
        required: true,
        type: {
          name: "String"
        }
      },
      ttl: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "ttl",
        type: {
          name: "Number"
        }
      },
      fee: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "fee",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      nonce: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "nonce",
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const ChannelWithdrawTx = {
  type: {
    name: "Composite",
    className: "ChannelWithdrawTx",
    modelProperties: {
      channelId: {
        serializedName: "channel_id",
        required: true,
        type: {
          name: "String"
        }
      },
      toId: {
        serializedName: "to_id",
        required: true,
        type: {
          name: "String"
        }
      },
      amount: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "amount",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      ttl: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "ttl",
        type: {
          name: "Number"
        }
      },
      fee: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "fee",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      nonce: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "nonce",
        required: true,
        type: {
          name: "Number"
        }
      },
      stateHash: {
        serializedName: "state_hash",
        required: true,
        type: {
          name: "String"
        }
      },
      round: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "round",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const CheckTxInPoolResponse = {
  type: {
    name: "Composite",
    className: "CheckTxInPoolResponse",
    modelProperties: {
      status: {
        serializedName: "status",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};
export const CommitmentId = {
  type: {
    name: "Composite",
    className: "CommitmentId",
    modelProperties: {
      commitmentId: {
        serializedName: "commitment_id",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};
export const ContractCallTx = {
  type: {
    name: "Composite",
    className: "ContractCallTx",
    modelProperties: {
      callerId: {
        serializedName: "caller_id",
        required: true,
        type: {
          name: "String"
        }
      },
      nonce: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "nonce",
        type: {
          name: "Number"
        }
      },
      contractId: {
        serializedName: "contract_id",
        required: true,
        type: {
          name: "String"
        }
      },
      abiVersion: {
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 0
        },
        serializedName: "abi_version",
        required: true,
        type: {
          name: "Number"
        }
      },
      fee: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "fee",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      ttl: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "ttl",
        type: {
          name: "Number"
        }
      },
      amount: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "amount",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      gas: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "gas",
        required: true,
        type: {
          name: "Number"
        }
      },
      gasPrice: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "gas_price",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      callData: {
        serializedName: "call_data",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};
export const ContractCreateTx = {
  type: {
    name: "Composite",
    className: "ContractCreateTx",
    modelProperties: {
      ownerId: {
        serializedName: "owner_id",
        required: true,
        type: {
          name: "String"
        }
      },
      nonce: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "nonce",
        type: {
          name: "Number"
        }
      },
      code: {
        serializedName: "code",
        required: true,
        type: {
          name: "String"
        }
      },
      vmVersion: {
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 0
        },
        serializedName: "vm_version",
        required: true,
        type: {
          name: "Number"
        }
      },
      abiVersion: {
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 0
        },
        serializedName: "abi_version",
        required: true,
        type: {
          name: "Number"
        }
      },
      deposit: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "deposit",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      amount: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "amount",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      gas: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "gas",
        required: true,
        type: {
          name: "Number"
        }
      },
      gasPrice: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "gas_price",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      fee: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "fee",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      ttl: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "ttl",
        type: {
          name: "Number"
        }
      },
      callData: {
        serializedName: "call_data",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};
export const UnsignedTx = {
  type: {
    name: "Composite",
    className: "UnsignedTx",
    modelProperties: {
      tx: {
        serializedName: "tx",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};
export const GAAttachTx = {
  type: {
    name: "Composite",
    className: "GAAttachTx",
    modelProperties: {
      ownerId: {
        serializedName: "owner_id",
        required: true,
        type: {
          name: "String"
        }
      },
      nonce: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "nonce",
        type: {
          name: "Number"
        }
      },
      code: {
        serializedName: "code",
        required: true,
        type: {
          name: "String"
        }
      },
      vmVersion: {
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 0
        },
        serializedName: "vm_version",
        required: true,
        type: {
          name: "Number"
        }
      },
      abiVersion: {
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 0
        },
        serializedName: "abi_version",
        required: true,
        type: {
          name: "Number"
        }
      },
      gas: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "gas",
        required: true,
        type: {
          name: "Number"
        }
      },
      gasPrice: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "gas_price",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      fee: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "fee",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      ttl: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "ttl",
        type: {
          name: "Number"
        }
      },
      callData: {
        serializedName: "call_data",
        required: true,
        type: {
          name: "String"
        }
      },
      authFun: {
        constraints: {
          Pattern: new RegExp("^(0x|0X)?[a-fA-F0-9]+$")
        },
        serializedName: "auth_fun",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};
export const GAMetaTx = {
  type: {
    name: "Composite",
    className: "GAMetaTx",
    modelProperties: {
      gaId: {
        serializedName: "ga_id",
        required: true,
        type: {
          name: "String"
        }
      },
      abiVersion: {
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 0
        },
        serializedName: "abi_version",
        required: true,
        type: {
          name: "Number"
        }
      },
      gas: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "gas",
        required: true,
        type: {
          name: "Number"
        }
      },
      gasPrice: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "gas_price",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      fee: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "fee",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      ttl: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "ttl",
        type: {
          name: "Number"
        }
      },
      authData: {
        serializedName: "auth_data",
        required: true,
        type: {
          name: "String"
        }
      },
      tx: {
        serializedName: "tx",
        type: {
          name: "Composite",
          className: "SignedTx"
        }
      }
    }
  }
};
export const NameClaimTx = {
  type: {
    name: "Composite",
    className: "NameClaimTx",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      nameSalt: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "name_salt",
        required: true,
        type: {
          name: "Number"
        }
      },
      nameFee: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "name_fee",
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      fee: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "fee",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      ttl: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "ttl",
        type: {
          name: "Number"
        }
      },
      accountId: {
        serializedName: "account_id",
        required: true,
        type: {
          name: "String"
        }
      },
      nonce: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "nonce",
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const NameHash = {
  type: {
    name: "Composite",
    className: "NameHash",
    modelProperties: {
      nameId: {
        serializedName: "name_id",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};
export const NamePreclaimTx = {
  type: {
    name: "Composite",
    className: "NamePreclaimTx",
    modelProperties: {
      commitmentId: {
        serializedName: "commitment_id",
        required: true,
        type: {
          name: "String"
        }
      },
      fee: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "fee",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      ttl: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "ttl",
        type: {
          name: "Number"
        }
      },
      accountId: {
        serializedName: "account_id",
        required: true,
        type: {
          name: "String"
        }
      },
      nonce: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "nonce",
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const NameRevokeTx = {
  type: {
    name: "Composite",
    className: "NameRevokeTx",
    modelProperties: {
      nameId: {
        serializedName: "name_id",
        required: true,
        type: {
          name: "String"
        }
      },
      fee: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "fee",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      ttl: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "ttl",
        type: {
          name: "Number"
        }
      },
      accountId: {
        serializedName: "account_id",
        required: true,
        type: {
          name: "String"
        }
      },
      nonce: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "nonce",
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const NameTransferTx = {
  type: {
    name: "Composite",
    className: "NameTransferTx",
    modelProperties: {
      nameId: {
        serializedName: "name_id",
        required: true,
        type: {
          name: "String"
        }
      },
      recipientId: {
        serializedName: "recipient_id",
        required: true,
        type: {
          name: "String"
        }
      },
      fee: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "fee",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      ttl: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "ttl",
        type: {
          name: "Number"
        }
      },
      accountId: {
        serializedName: "account_id",
        required: true,
        type: {
          name: "String"
        }
      },
      nonce: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "nonce",
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const NameUpdateTx = {
  type: {
    name: "Composite",
    className: "NameUpdateTx",
    modelProperties: {
      nameId: {
        serializedName: "name_id",
        required: true,
        type: {
          name: "String"
        }
      },
      nameTtl: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "name_ttl",
        required: true,
        type: {
          name: "Number"
        }
      },
      pointers: {
        serializedName: "pointers",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NamePointer"
            }
          }
        }
      },
      clientTtl: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "client_ttl",
        required: true,
        type: {
          name: "Number"
        }
      },
      fee: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "fee",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      ttl: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "ttl",
        type: {
          name: "Number"
        }
      },
      accountId: {
        serializedName: "account_id",
        required: true,
        type: {
          name: "String"
        }
      },
      nonce: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "nonce",
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const PeerDetails = {
  type: {
    name: "Composite",
    className: "PeerDetails",
    modelProperties: {
      host: {
        serializedName: "host",
        required: true,
        type: {
          name: "String"
        }
      },
      port: {
        constraints: {
          InclusiveMaximum: 4294967295,
          InclusiveMinimum: 0
        },
        serializedName: "port",
        required: true,
        type: {
          name: "Number"
        }
      },
      firstSeen: {
        constraints: {
          InclusiveMaximum: 4294967295,
          InclusiveMinimum: 0
        },
        serializedName: "first_seen",
        required: true,
        type: {
          name: "Number"
        }
      },
      lastSeen: {
        constraints: {
          InclusiveMaximum: 4294967295,
          InclusiveMinimum: 0
        },
        serializedName: "last_seen",
        required: true,
        type: {
          name: "Number"
        }
      },
      genesisHash: {
        serializedName: "genesis_hash",
        required: true,
        type: {
          name: "String"
        }
      },
      topHash: {
        serializedName: "top_hash",
        required: true,
        type: {
          name: "String"
        }
      },
      topDifficulty: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "top_difficulty",
        required: true,
        type: {
          name: "Number"
        }
      },
      networkId: {
        serializedName: "network_id",
        type: {
          name: "String"
        }
      },
      nodeVersion: {
        serializedName: "node_version",
        type: {
          name: "String"
        }
      },
      nodeRevision: {
        serializedName: "node_revision",
        type: {
          name: "String"
        }
      },
      nodeVendor: {
        serializedName: "node_vendor",
        type: {
          name: "String"
        }
      },
      nodeOs: {
        serializedName: "node_os",
        type: {
          name: "String"
        }
      }
    }
  }
};
export const OracleExtendTx = {
  type: {
    name: "Composite",
    className: "OracleExtendTx",
    modelProperties: {
      fee: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "fee",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      oracleTtl: {
        serializedName: "oracle_ttl",
        type: {
          name: "Composite",
          className: "RelativeTTL"
        }
      },
      oracleId: {
        serializedName: "oracle_id",
        required: true,
        type: {
          name: "String"
        }
      },
      nonce: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "nonce",
        type: {
          name: "Number"
        }
      },
      ttl: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "ttl",
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const OracleQueryTx = {
  type: {
    name: "Composite",
    className: "OracleQueryTx",
    modelProperties: {
      oracleId: {
        serializedName: "oracle_id",
        required: true,
        type: {
          name: "String"
        }
      },
      query: {
        serializedName: "query",
        required: true,
        type: {
          name: "String"
        }
      },
      queryFee: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "query_fee",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      queryTtl: {
        serializedName: "query_ttl",
        type: {
          name: "Composite",
          className: "Ttl"
        }
      },
      responseTtl: {
        serializedName: "response_ttl",
        type: {
          name: "Composite",
          className: "RelativeTTL"
        }
      },
      fee: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "fee",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      ttl: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "ttl",
        type: {
          name: "Number"
        }
      },
      senderId: {
        serializedName: "sender_id",
        required: true,
        type: {
          name: "String"
        }
      },
      nonce: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "nonce",
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const OracleRegisterTx = {
  type: {
    name: "Composite",
    className: "OracleRegisterTx",
    modelProperties: {
      queryFormat: {
        serializedName: "query_format",
        required: true,
        type: {
          name: "String"
        }
      },
      responseFormat: {
        serializedName: "response_format",
        required: true,
        type: {
          name: "String"
        }
      },
      queryFee: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "query_fee",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      oracleTtl: {
        serializedName: "oracle_ttl",
        type: {
          name: "Composite",
          className: "Ttl"
        }
      },
      accountId: {
        serializedName: "account_id",
        required: true,
        type: {
          name: "String"
        }
      },
      nonce: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "nonce",
        type: {
          name: "Number"
        }
      },
      fee: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "fee",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      ttl: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "ttl",
        type: {
          name: "Number"
        }
      },
      abiVersion: {
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 0
        },
        serializedName: "abi_version",
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const OracleRespondTx = {
  type: {
    name: "Composite",
    className: "OracleRespondTx",
    modelProperties: {
      queryId: {
        serializedName: "query_id",
        required: true,
        type: {
          name: "String"
        }
      },
      response: {
        serializedName: "response",
        required: true,
        type: {
          name: "String"
        }
      },
      responseTtl: {
        serializedName: "response_ttl",
        type: {
          name: "Composite",
          className: "RelativeTTL"
        }
      },
      fee: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "fee",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      ttl: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "ttl",
        type: {
          name: "Number"
        }
      },
      oracleId: {
        serializedName: "oracle_id",
        required: true,
        type: {
          name: "String"
        }
      },
      nonce: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "nonce",
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const PayingForTx = {
  type: {
    name: "Composite",
    className: "PayingForTx",
    modelProperties: {
      payerId: {
        serializedName: "payer_id",
        required: true,
        type: {
          name: "String"
        }
      },
      fee: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "fee",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      nonce: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "nonce",
        type: {
          name: "Number"
        }
      },
      tx: {
        serializedName: "tx",
        type: {
          name: "Composite",
          className: "SignedTx"
        }
      }
    }
  }
};
export const PeerCount = {
  type: {
    name: "Composite",
    className: "PeerCount",
    modelProperties: {
      connected: {
        serializedName: "connected",
        type: {
          name: "Composite",
          className: "PeerCountConnected"
        }
      },
      available: {
        serializedName: "available",
        type: {
          name: "Composite",
          className: "PeerCountAvailable"
        }
      },
      blocked: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "blocked",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const PeerCountConnected = {
  type: {
    name: "Composite",
    className: "PeerCountConnected",
    modelProperties: {
      inbound: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "inbound",
        type: {
          name: "Number"
        }
      },
      outbound: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "outbound",
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const PeerCountAvailable = {
  type: {
    name: "Composite",
    className: "PeerCountAvailable",
    modelProperties: {
      verified: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "verified",
        type: {
          name: "Number"
        }
      },
      unverified: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "unverified",
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const Peers = {
  type: {
    name: "Composite",
    className: "Peers",
    modelProperties: {
      peers: {
        serializedName: "peers",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      blocked: {
        serializedName: "blocked",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};
export const PubKey = {
  type: {
    name: "Composite",
    className: "PubKey",
    modelProperties: {
      pubKey: {
        serializedName: "pub_key",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};
export const SpendTx = {
  type: {
    name: "Composite",
    className: "SpendTx",
    modelProperties: {
      recipientId: {
        serializedName: "recipient_id",
        required: true,
        type: {
          name: "String"
        }
      },
      amount: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "amount",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      fee: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "fee",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      ttl: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "ttl",
        type: {
          name: "Number"
        }
      },
      senderId: {
        serializedName: "sender_id",
        required: true,
        type: {
          name: "String"
        }
      },
      nonce: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "nonce",
        type: {
          name: "Number"
        }
      },
      payload: {
        serializedName: "payload",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};
export const TokenSupply = {
  type: {
    name: "Composite",
    className: "TokenSupply",
    modelProperties: {
      accounts: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "accounts",
        type: {
          name: "Number"
        }
      },
      contracts: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "contracts",
        type: {
          name: "Number"
        }
      },
      contractOracles: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "contract_oracles",
        type: {
          name: "Number"
        }
      },
      locked: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "locked",
        type: {
          name: "Number"
        }
      },
      oracles: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "oracles",
        type: {
          name: "Number"
        }
      },
      oracleQueries: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "oracle_queries",
        type: {
          name: "Number"
        }
      },
      pendingRewards: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "pending_rewards",
        type: {
          name: "Number"
        }
      },
      total: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "total",
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const OffChainCallContract = {
  serializedName: "OffChainCallContract",
  type: {
    name: "Composite",
    className: "OffChainCallContract",
    uberParent: "OffChainUpdate",
    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,
    modelProperties: {
      ...OffChainUpdate.type.modelProperties,
      caller: {
        serializedName: "caller",
        required: true,
        type: {
          name: "String"
        }
      },
      contract: {
        serializedName: "contract",
        required: true,
        type: {
          name: "String"
        }
      },
      abiVersion: {
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 0
        },
        serializedName: "abi_version",
        required: true,
        type: {
          name: "Number"
        }
      },
      amount: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "amount",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      gas: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "gas",
        required: true,
        type: {
          name: "Number"
        }
      },
      gasPrice: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "gas_price",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      callData: {
        serializedName: "call_data",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};
export const OffChainDeposit = {
  serializedName: "OffChainDeposit",
  type: {
    name: "Composite",
    className: "OffChainDeposit",
    uberParent: "OffChainUpdate",
    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,
    modelProperties: {
      ...OffChainUpdate.type.modelProperties,
      from: {
        serializedName: "from",
        required: true,
        type: {
          name: "String"
        }
      },
      amount: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "amount",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      }
    }
  }
};
export const OffChainNewContract = {
  serializedName: "OffChainNewContract",
  type: {
    name: "Composite",
    className: "OffChainNewContract",
    uberParent: "OffChainUpdate",
    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,
    modelProperties: {
      ...OffChainUpdate.type.modelProperties,
      owner: {
        serializedName: "owner",
        required: true,
        type: {
          name: "String"
        }
      },
      vmVersion: {
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 0
        },
        serializedName: "vm_version",
        required: true,
        type: {
          name: "Number"
        }
      },
      abiVersion: {
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 0
        },
        serializedName: "abi_version",
        required: true,
        type: {
          name: "Number"
        }
      },
      code: {
        serializedName: "code",
        type: {
          name: "Composite",
          className: "ByteCode"
        }
      },
      deposit: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "deposit",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      callData: {
        serializedName: "call_data",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};
export const OffChainTransfer = {
  serializedName: "OffChainTransfer",
  type: {
    name: "Composite",
    className: "OffChainTransfer",
    uberParent: "OffChainUpdate",
    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,
    modelProperties: {
      ...OffChainUpdate.type.modelProperties,
      from: {
        serializedName: "from",
        required: true,
        type: {
          name: "String"
        }
      },
      to: {
        serializedName: "to",
        required: true,
        type: {
          name: "String"
        }
      },
      amount: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "amount",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      }
    }
  }
};
export const OffChainWithdrawal = {
  serializedName: "OffChainWithdrawal",
  type: {
    name: "Composite",
    className: "OffChainWithdrawal",
    uberParent: "OffChainUpdate",
    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,
    modelProperties: {
      ...OffChainUpdate.type.modelProperties,
      to: {
        serializedName: "to",
        required: true,
        type: {
          name: "String"
        }
      },
      amount: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "amount",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      }
    }
  }
};
export const CreateContractUnsignedTx = {
  type: {
    name: "Composite",
    className: "CreateContractUnsignedTx",
    modelProperties: {
      ...UnsignedTx.type.modelProperties,
      contractId: {
        serializedName: "contract_id",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};
export let discriminators = {
  OffChainUpdate: OffChainUpdate,
  "OffChainUpdate.OffChainCallContract": OffChainCallContract,
  "OffChainUpdate.OffChainDeposit": OffChainDeposit,
  "OffChainUpdate.OffChainNewContract": OffChainNewContract,
  "OffChainUpdate.OffChainTransfer": OffChainTransfer,
  "OffChainUpdate.OffChainWithdrawal": OffChainWithdrawal
};
//# sourceMappingURL=mappers.js.map