export const accept = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String"
    }
  }
};
export const $host = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};
export const accountId = {
  parameterPath: "accountId",
  mapper: {
    constraints: {
      Pattern: new RegExp("^ak_\\w{38,50}$")
    },
    serializedName: "accountId",
    required: true,
    type: {
      name: "String"
    }
  }
};
export const ownedOnly = {
  parameterPath: ["options", "ownedOnly"],
  mapper: {
    serializedName: "owned_only",
    type: {
      name: "Boolean"
    }
  }
};
export const typeParam = {
  parameterPath: ["options", "type"],
  mapper: {
    serializedName: "type",
    type: {
      name: "Enum",
      allowedValues: ["transactions", "aexn", "aex9", "aex141", "contract", "transfers", "claims", "swaps"]
    }
  }
};
export const limit = {
  parameterPath: ["options", "limit"],
  mapper: {
    defaultValue: 10,
    constraints: {
      InclusiveMaximum: 100,
      InclusiveMinimum: 1
    },
    serializedName: "limit",
    type: {
      name: "Number"
    }
  }
};
export const scope = {
  parameterPath: ["options", "scope"],
  mapper: {
    constraints: {
      Pattern: new RegExp("(gen):\\d+(-\\d+)?")
    },
    serializedName: "scope",
    type: {
      name: "String"
    }
  }
};
export const direction = {
  parameterPath: ["options", "direction"],
  mapper: {
    serializedName: "direction",
    type: {
      name: "Enum",
      allowedValues: ["forward", "backward"]
    }
  }
};
export const direction1 = {
  parameterPath: ["options", "direction"],
  mapper: {
    serializedName: "direction",
    type: {
      name: "Enum",
      allowedValues: ["forward", "backward"]
    }
  }
};
export const contract = {
  parameterPath: ["options", "contract"],
  mapper: {
    constraints: {
      Pattern: new RegExp("^ct_\\w{38,50}$")
    },
    serializedName: "contract",
    type: {
      name: "String"
    }
  }
};
export const direction2 = {
  parameterPath: ["options", "direction"],
  mapper: {
    serializedName: "direction",
    type: {
      name: "Enum",
      allowedValues: ["forward", "backward"]
    }
  }
};
export const direction3 = {
  parameterPath: ["options", "direction"],
  mapper: {
    serializedName: "direction",
    type: {
      name: "Enum",
      allowedValues: ["forward", "backward"]
    }
  }
};
export const direction4 = {
  parameterPath: ["options", "direction"],
  mapper: {
    serializedName: "direction",
    type: {
      name: "Enum",
      allowedValues: ["forward", "backward"]
    }
  }
};
export const by = {
  parameterPath: ["options", "by"],
  mapper: {
    serializedName: "by",
    type: {
      name: "Enum",
      allowedValues: ["creation", "name", "symbol"]
    }
  }
};
export const prefix = {
  parameterPath: ["options", "prefix"],
  mapper: {
    serializedName: "prefix",
    type: {
      name: "String"
    }
  }
};
export const exact = {
  parameterPath: ["options", "exact"],
  mapper: {
    serializedName: "exact",
    type: {
      name: "String"
    }
  }
};
export const direction5 = {
  parameterPath: ["options", "direction"],
  mapper: {
    serializedName: "direction",
    type: {
      name: "Enum",
      allowedValues: ["forward", "backward"]
    }
  }
};
export const contractId = {
  parameterPath: "contractId",
  mapper: {
    constraints: {
      Pattern: new RegExp("^ct_\\w{38,50}$")
    },
    serializedName: "contractId",
    required: true,
    type: {
      name: "String"
    }
  }
};
export const direction6 = {
  parameterPath: ["options", "direction"],
  mapper: {
    serializedName: "direction",
    type: {
      name: "Enum",
      allowedValues: ["forward", "backward"]
    }
  }
};
export const templateId = {
  parameterPath: "templateId",
  mapper: {
    serializedName: "templateId",
    required: true,
    type: {
      name: "Number"
    }
  }
};
export const direction7 = {
  parameterPath: ["options", "direction"],
  mapper: {
    serializedName: "direction",
    type: {
      name: "Enum",
      allowedValues: ["forward", "backward"]
    }
  }
};
export const tokenId = {
  parameterPath: "tokenId",
  mapper: {
    serializedName: "tokenId",
    required: true,
    type: {
      name: "Number"
    }
  }
};
export const direction8 = {
  parameterPath: ["options", "direction"],
  mapper: {
    serializedName: "direction",
    type: {
      name: "Enum",
      allowedValues: ["forward", "backward"]
    }
  }
};
export const fromParam = {
  parameterPath: ["options", "from"],
  mapper: {
    constraints: {
      Pattern: new RegExp("^ak_\\w{38,50}$")
    },
    serializedName: "from",
    type: {
      name: "String"
    }
  }
};
export const to = {
  parameterPath: ["options", "to"],
  mapper: {
    constraints: {
      Pattern: new RegExp("^ak_\\w{38,50}$")
    },
    serializedName: "to",
    type: {
      name: "String"
    }
  }
};
export const id = {
  parameterPath: "id",
  mapper: {
    constraints: {
      Pattern: new RegExp("^ct_\\w{38,50}$")
    },
    serializedName: "id",
    required: true,
    type: {
      name: "String"
    }
  }
};
export const direction9 = {
  parameterPath: ["options", "direction"],
  mapper: {
    serializedName: "direction",
    type: {
      name: "Enum",
      allowedValues: ["forward", "backward"]
    }
  }
};
export const by1 = {
  parameterPath: ["options", "by"],
  mapper: {
    serializedName: "by",
    type: {
      name: "Enum",
      allowedValues: ["creation", "name", "symbol"]
    }
  }
};
export const direction10 = {
  parameterPath: ["options", "direction"],
  mapper: {
    serializedName: "direction",
    type: {
      name: "Enum",
      allowedValues: ["forward", "backward"]
    }
  }
};
export const by2 = {
  parameterPath: ["options", "by"],
  mapper: {
    serializedName: "by",
    type: {
      name: "String"
    }
  }
};
export const blockHash = {
  parameterPath: ["options", "blockHash"],
  mapper: {
    constraints: {
      Pattern: new RegExp("^mh_\\w{38,50}$")
    },
    serializedName: "block_hash",
    type: {
      name: "String"
    }
  }
};
export const hash = {
  parameterPath: ["options", "hash"],
  mapper: {
    constraints: {
      Pattern: new RegExp("^mh_\\w{38,50}$")
    },
    serializedName: "hash",
    type: {
      name: "String"
    }
  }
};
export const direction11 = {
  parameterPath: ["options", "direction"],
  mapper: {
    serializedName: "direction",
    type: {
      name: "Enum",
      allowedValues: ["forward", "backward"]
    }
  }
};
export const direction12 = {
  parameterPath: ["options", "direction"],
  mapper: {
    serializedName: "direction",
    type: {
      name: "Enum",
      allowedValues: ["forward", "backward"]
    }
  }
};
export const state = {
  parameterPath: ["options", "state"],
  mapper: {
    serializedName: "state",
    type: {
      name: "Enum",
      allowedValues: ["active", "inactive"]
    }
  }
};
export const id1 = {
  parameterPath: "id",
  mapper: {
    constraints: {
      Pattern: new RegExp("^ch_\\w{38,50}$")
    },
    serializedName: "id",
    required: true,
    type: {
      name: "String"
    }
  }
};
export const direction13 = {
  parameterPath: ["options", "direction"],
  mapper: {
    serializedName: "direction",
    type: {
      name: "Enum",
      allowedValues: ["forward", "backward"]
    }
  }
};
export const contractId1 = {
  parameterPath: ["options", "contractId"],
  mapper: {
    constraints: {
      Pattern: new RegExp("^ct_\\w{38,50}$")
    },
    serializedName: "contract_id",
    type: {
      name: "String"
    }
  }
};
export const event = {
  parameterPath: ["options", "event"],
  mapper: {
    serializedName: "event",
    type: {
      name: "String"
    }
  }
};
export const functionParam = {
  parameterPath: ["options", "function"],
  mapper: {
    serializedName: "function",
    type: {
      name: "String"
    }
  }
};
export const functionPrefix = {
  parameterPath: ["options", "functionPrefix"],
  mapper: {
    serializedName: "function_prefix",
    type: {
      name: "String"
    }
  }
};
export const data = {
  parameterPath: ["options", "data"],
  mapper: {
    serializedName: "data",
    type: {
      name: "String"
    }
  }
};
export const aexnArgs = {
  parameterPath: ["options", "aexnArgs"],
  mapper: {
    serializedName: "aexn-args",
    type: {
      name: "Boolean"
    }
  }
};
export const direction14 = {
  parameterPath: ["options", "direction"],
  mapper: {
    serializedName: "direction",
    type: {
      name: "Enum",
      allowedValues: ["forward", "backward"]
    }
  }
};
export const direction15 = {
  parameterPath: ["options", "direction"],
  mapper: {
    serializedName: "direction",
    type: {
      name: "Enum",
      allowedValues: ["forward", "backward"]
    }
  }
};
export const direction16 = {
  parameterPath: ["options", "direction"],
  mapper: {
    serializedName: "direction",
    type: {
      name: "Enum",
      allowedValues: ["forward", "backward"]
    }
  }
};
export const contractId2 = {
  parameterPath: "contractId",
  mapper: {
    constraints: {
      Pattern: new RegExp("^ct_\\w{38,50}$")
    },
    serializedName: "contract_id",
    required: true,
    type: {
      name: "String"
    }
  }
};
export const direction17 = {
  parameterPath: ["options", "direction"],
  mapper: {
    serializedName: "direction",
    type: {
      name: "Enum",
      allowedValues: ["forward", "backward"]
    }
  }
};
export const scope1 = {
  parameterPath: ["options", "scope"],
  mapper: {
    constraints: {
      Pattern: new RegExp("(epoch):\\d+(-\\d+)?")
    },
    serializedName: "scope",
    type: {
      name: "String"
    }
  }
};
export const direction18 = {
  parameterPath: ["options", "direction"],
  mapper: {
    serializedName: "direction",
    type: {
      name: "Enum",
      allowedValues: ["forward", "backward"]
    }
  }
};
export const height = {
  parameterPath: "height",
  mapper: {
    serializedName: "height",
    required: true,
    type: {
      name: "Number"
    }
  }
};
export const direction19 = {
  parameterPath: ["options", "direction"],
  mapper: {
    serializedName: "direction",
    type: {
      name: "Enum",
      allowedValues: ["forward", "backward"]
    }
  }
};
export const validator = {
  parameterPath: "validator",
  mapper: {
    constraints: {
      Pattern: new RegExp("^ak_\\w{38,50}$")
    },
    serializedName: "validator",
    required: true,
    type: {
      name: "String"
    }
  }
};
export const direction20 = {
  parameterPath: ["options", "direction"],
  mapper: {
    serializedName: "direction",
    type: {
      name: "Enum",
      allowedValues: ["forward", "backward"]
    }
  }
};
export const direction21 = {
  parameterPath: ["options", "direction"],
  mapper: {
    serializedName: "direction",
    type: {
      name: "Enum",
      allowedValues: ["forward", "backward"]
    }
  }
};
export const direction22 = {
  parameterPath: ["options", "direction"],
  mapper: {
    serializedName: "direction",
    type: {
      name: "Enum",
      allowedValues: ["forward", "backward"]
    }
  }
};
export const hashOrKbi = {
  parameterPath: "hashOrKbi",
  mapper: {
    serializedName: "hash_or_kbi",
    required: true,
    type: {
      name: "String"
    }
  }
};
export const direction23 = {
  parameterPath: ["options", "direction"],
  mapper: {
    serializedName: "direction",
    type: {
      name: "Enum",
      allowedValues: ["forward", "backward"]
    }
  }
};
export const hash1 = {
  parameterPath: "hash",
  mapper: {
    constraints: {
      Pattern: new RegExp("^mh_\\w{38,50}$")
    },
    serializedName: "hash",
    required: true,
    type: {
      name: "String"
    }
  }
};
export const ownedBy = {
  parameterPath: ["options", "ownedBy"],
  mapper: {
    constraints: {
      Pattern: new RegExp("^ak_\\w{38,50}$")
    },
    serializedName: "owned_by",
    type: {
      name: "String"
    }
  }
};
export const state1 = {
  parameterPath: ["options", "state"],
  mapper: {
    serializedName: "state",
    type: {
      name: "String"
    }
  }
};
export const direction24 = {
  parameterPath: ["options", "direction"],
  mapper: {
    serializedName: "direction",
    type: {
      name: "Enum",
      allowedValues: ["forward", "backward"]
    }
  }
};
export const direction25 = {
  parameterPath: ["options", "direction"],
  mapper: {
    serializedName: "direction",
    type: {
      name: "Enum",
      allowedValues: ["forward", "backward"]
    }
  }
};
export const id2 = {
  parameterPath: "id",
  mapper: {
    serializedName: "id",
    required: true,
    type: {
      name: "String"
    }
  }
};
export const direction26 = {
  parameterPath: ["options", "direction"],
  mapper: {
    serializedName: "direction",
    type: {
      name: "Enum",
      allowedValues: ["forward", "backward"]
    }
  }
};
export const direction27 = {
  parameterPath: ["options", "direction"],
  mapper: {
    serializedName: "direction",
    type: {
      name: "Enum",
      allowedValues: ["forward", "backward"]
    }
  }
};
export const direction28 = {
  parameterPath: ["options", "direction"],
  mapper: {
    serializedName: "direction",
    type: {
      name: "Enum",
      allowedValues: ["forward", "backward"]
    }
  }
};
export const direction29 = {
  parameterPath: ["options", "direction"],
  mapper: {
    serializedName: "direction",
    type: {
      name: "Enum",
      allowedValues: ["forward", "backward"]
    }
  }
};
export const direction30 = {
  parameterPath: ["options", "direction"],
  mapper: {
    serializedName: "direction",
    type: {
      name: "Enum",
      allowedValues: ["forward", "backward"]
    }
  }
};
export const direction31 = {
  parameterPath: ["options", "direction"],
  mapper: {
    serializedName: "direction",
    type: {
      name: "Enum",
      allowedValues: ["forward", "backward"]
    }
  }
};
export const id3 = {
  parameterPath: "id",
  mapper: {
    constraints: {
      Pattern: new RegExp("^ok_\\w{38,50}$")
    },
    serializedName: "id",
    required: true,
    type: {
      name: "String"
    }
  }
};
export const intervalBy = {
  parameterPath: ["options", "intervalBy"],
  mapper: {
    serializedName: "interval_by",
    type: {
      name: "Enum",
      allowedValues: ["day", "week", "month"]
    }
  }
};
export const direction32 = {
  parameterPath: ["options", "direction"],
  mapper: {
    serializedName: "direction",
    type: {
      name: "Enum",
      allowedValues: ["forward", "backward"]
    }
  }
};
export const intervalBy1 = {
  parameterPath: ["options", "intervalBy"],
  mapper: {
    serializedName: "interval_by",
    type: {
      name: "Enum",
      allowedValues: ["day", "week", "month"]
    }
  }
};
export const minStartDate = {
  parameterPath: ["options", "minStartDate"],
  mapper: {
    serializedName: "min_start_date",
    type: {
      name: "String"
    }
  }
};
export const maxStartDate = {
  parameterPath: ["options", "maxStartDate"],
  mapper: {
    serializedName: "max_start_date",
    type: {
      name: "String"
    }
  }
};
export const direction33 = {
  parameterPath: ["options", "direction"],
  mapper: {
    serializedName: "direction",
    type: {
      name: "Enum",
      allowedValues: ["forward", "backward"]
    }
  }
};
export const intervalBy2 = {
  parameterPath: ["options", "intervalBy"],
  mapper: {
    serializedName: "interval_by",
    type: {
      name: "Enum",
      allowedValues: ["day", "week", "month"]
    }
  }
};
export const typeParam1 = {
  parameterPath: ["options", "type"],
  mapper: {
    serializedName: "type",
    type: {
      name: "Enum",
      allowedValues: ["key", "micro"]
    }
  }
};
export const direction34 = {
  parameterPath: ["options", "direction"],
  mapper: {
    serializedName: "direction",
    type: {
      name: "Enum",
      allowedValues: ["forward", "backward"]
    }
  }
};
export const intervalBy3 = {
  parameterPath: ["options", "intervalBy"],
  mapper: {
    serializedName: "interval_by",
    type: {
      name: "Enum",
      allowedValues: ["day", "week", "month"]
    }
  }
};
export const direction35 = {
  parameterPath: ["options", "direction"],
  mapper: {
    serializedName: "direction",
    type: {
      name: "Enum",
      allowedValues: ["forward", "backward"]
    }
  }
};
export const direction36 = {
  parameterPath: ["options", "direction"],
  mapper: {
    serializedName: "direction",
    type: {
      name: "Enum",
      allowedValues: ["forward", "backward"]
    }
  }
};
export const intervalBy4 = {
  parameterPath: ["options", "intervalBy"],
  mapper: {
    serializedName: "interval_by",
    type: {
      name: "Enum",
      allowedValues: ["day", "week", "month"]
    }
  }
};
export const direction37 = {
  parameterPath: ["options", "direction"],
  mapper: {
    serializedName: "direction",
    type: {
      name: "Enum",
      allowedValues: ["forward", "backward"]
    }
  }
};
export const intervalBy5 = {
  parameterPath: ["options", "intervalBy"],
  mapper: {
    serializedName: "interval_by",
    type: {
      name: "Enum",
      allowedValues: ["day", "week", "month"]
    }
  }
};
export const direction38 = {
  parameterPath: ["options", "direction"],
  mapper: {
    serializedName: "direction",
    type: {
      name: "Enum",
      allowedValues: ["forward", "backward"]
    }
  }
};
export const direction39 = {
  parameterPath: ["options", "direction"],
  mapper: {
    serializedName: "direction",
    type: {
      name: "Enum",
      allowedValues: ["forward", "backward"]
    }
  }
};
export const intervalBy6 = {
  parameterPath: ["options", "intervalBy"],
  mapper: {
    serializedName: "interval_by",
    type: {
      name: "Enum",
      allowedValues: ["day", "week", "month"]
    }
  }
};
export const direction40 = {
  parameterPath: ["options", "direction"],
  mapper: {
    serializedName: "direction",
    type: {
      name: "Enum",
      allowedValues: ["forward", "backward"]
    }
  }
};
export const direction41 = {
  parameterPath: ["options", "direction"],
  mapper: {
    serializedName: "direction",
    type: {
      name: "Enum",
      allowedValues: ["forward", "backward"]
    }
  }
};
export const intervalBy7 = {
  parameterPath: ["options", "intervalBy"],
  mapper: {
    serializedName: "interval_by",
    type: {
      name: "Enum",
      allowedValues: ["day", "week", "month"]
    }
  }
};
export const direction42 = {
  parameterPath: ["options", "direction"],
  mapper: {
    serializedName: "direction",
    type: {
      name: "Enum",
      allowedValues: ["forward", "backward"]
    }
  }
};
export const intervalBy8 = {
  parameterPath: ["options", "intervalBy"],
  mapper: {
    serializedName: "interval_by",
    type: {
      name: "Enum",
      allowedValues: ["day", "week", "month"]
    }
  }
};
export const txType = {
  parameterPath: ["options", "txType"],
  mapper: {
    serializedName: "tx_type",
    type: {
      name: "String"
    }
  }
};
export const direction43 = {
  parameterPath: ["options", "direction"],
  mapper: {
    serializedName: "direction",
    type: {
      name: "Enum",
      allowedValues: ["forward", "backward"]
    }
  }
};
export const typeParam2 = {
  parameterPath: ["options", "type"],
  mapper: {
    serializedName: "type",
    type: {
      name: "Sequence",
      element: {
        type: {
          name: "Enum",
          allowedValues: ["channel_close_mutual", "channel_close_solo", "channel_create", "channel_deposit", "channel_force_progress", "channel_offchain", "channel_settle", "channel_slash", "channel_snapshot_solo", "channel_withdraw", "contract_call", "contract_create", "ga_attach", "ga_meta", "name_claim", "name_preclaim", "name_revoke", "name_transfer", "name_update", "oracle_extend", "oracle_query", "oracle_register", "oracle_response", "paying_for", "spend"]
        }
      }
    }
  },
  collectionFormat: "Multi"
};
export const typeGroup = {
  parameterPath: ["options", "typeGroup"],
  mapper: {
    serializedName: "type_group",
    type: {
      name: "Sequence",
      element: {
        type: {
          name: "Enum",
          allowedValues: ["channel", "contract", "ga", "name", "oracle", "paying_for", "spend"]
        }
      }
    }
  },
  collectionFormat: "Multi"
};
export const account = {
  parameterPath: ["options", "account"],
  mapper: {
    constraints: {
      Pattern: new RegExp("^ak_\\w{38,50}$")
    },
    serializedName: "account",
    type: {
      name: "String"
    }
  }
};
export const channel = {
  parameterPath: ["options", "channel"],
  mapper: {
    constraints: {
      Pattern: new RegExp("^ch_\\w{38,50}$")
    },
    serializedName: "channel",
    type: {
      name: "String"
    }
  }
};
export const oracle = {
  parameterPath: ["options", "oracle"],
  mapper: {
    constraints: {
      Pattern: new RegExp("^ok_\\w{38,50}$")
    },
    serializedName: "oracle",
    type: {
      name: "String"
    }
  }
};
export const senderId = {
  parameterPath: ["options", "senderId"],
  mapper: {
    constraints: {
      Pattern: new RegExp("^ak_\\w{38,50}$")
    },
    serializedName: "sender_id",
    type: {
      name: "String"
    }
  }
};
export const recipientId = {
  parameterPath: ["options", "recipientId"],
  mapper: {
    constraints: {
      Pattern: new RegExp("^ak_\\w{38,50}$")
    },
    serializedName: "recipient_id",
    type: {
      name: "String"
    }
  }
};
export const entrypoint = {
  parameterPath: ["options", "entrypoint"],
  mapper: {
    serializedName: "entrypoint",
    type: {
      name: "String"
    }
  }
};
export const scope2 = {
  parameterPath: ["options", "scope"],
  mapper: {
    constraints: {
      Pattern: new RegExp("(time|gen):\\d+(-\\d+)?")
    },
    serializedName: "scope",
    type: {
      name: "String"
    }
  }
};
export const direction44 = {
  parameterPath: ["options", "direction"],
  mapper: {
    serializedName: "direction",
    type: {
      name: "Enum",
      allowedValues: ["forward", "backward"]
    }
  }
};
export const id4 = {
  parameterPath: ["options", "id"],
  mapper: {
    constraints: {
      Pattern: new RegExp("^ak_\\w{38,50}$")
    },
    serializedName: "id",
    type: {
      name: "String"
    }
  }
};
export const direction45 = {
  parameterPath: ["options", "direction"],
  mapper: {
    serializedName: "direction",
    type: {
      name: "Enum",
      allowedValues: ["forward", "backward"]
    }
  }
};
export const hash2 = {
  parameterPath: "hash",
  mapper: {
    constraints: {
      Pattern: new RegExp("^th_\\w{38,50}$")
    },
    serializedName: "hash",
    required: true,
    type: {
      name: "String"
    }
  }
};
export const direction46 = {
  parameterPath: ["options", "direction"],
  mapper: {
    serializedName: "direction",
    type: {
      name: "Enum",
      allowedValues: ["forward", "backward"]
    }
  }
};
//# sourceMappingURL=parameters.js.map