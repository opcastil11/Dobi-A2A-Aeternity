import { Encoded, Encoding } from './encoder.js';
/**
 * Check if address is valid
 * @param maybeAddress - Address to check
 * @category utils
 * @deprecated Use {@link isEncoded} instead
 */
export declare function isAddressValid(maybeAddress: string): maybeAddress is Encoded.AccountAddress;
/**
 * Check if data is encoded in one of provided encodings
 * @param maybeEncoded - Data to check
 * @param encodings - Rest parameters with encodings to check against
 * @deprecated Use {@link isEncoded} instead
 */
export declare function isAddressValid<E extends Encoding>(maybeEncoded: string, ...encodings: E[]): maybeEncoded is Encoded.Generic<E>;
/**
 * Check if data is encoded in any encoding
 * @param maybeEncoded - Data to check
 * @category utils
 */
export declare function ensureEncoded(maybeEncoded: string): asserts maybeEncoded is Encoded.Any;
/**
 * Check if data is encoded in one of provided encodings
 * @param maybeEncoded - Data to check
 * @param encodings - Rest parameters with encodings to check against
 */
export declare function ensureEncoded<E extends Encoding>(maybeEncoded: string, ...encodings: E[]): asserts maybeEncoded is Encoded.Generic<E>;
/**
 * Check if data is encoded in any encoding
 * @param maybeEncoded - Data to check
 * @category utils
 */
export declare function isEncoded(maybeEncoded: string): maybeEncoded is Encoded.Any;
/**
 * Check if data is encoded in one of provided encodings
 * @param maybeEncoded - Data to check
 * @param encodings - Rest parameters with encodings to check against
 */
export declare function isEncoded<E extends Encoding>(maybeEncoded: string, ...encodings: E[]): maybeEncoded is Encoded.Generic<E>;
/**
 * Generate a random salt (positive integer)
 * @returns random salt
 * @category utils
 */
export declare function genSalt(): number;
/**
 * Converts a positive integer to the smallest possible
 * representation in a binary digit representation
 * @param value - Value to encode
 * @returns Encoded number
 * @category utils
 * @deprecated This function is out of the sdk scope. Copy implementation from sdk if necessary.
 */
export declare function encodeUnsigned(value: number): Buffer;
/**
 * Calculate 256bits Blake2b hash of `input`
 * @param input - Data to hash
 * @returns Hash
 * @category utils
 * @deprecated use "blakejs" package directly
 */
export declare function hash(input: string | Uint8Array): Buffer;
/**
 * Verify that data was signed by account
 * @param data - Data that was signed
 * @param signature - Signature of data
 * @param address - Address of account to verify against
 * @returns is data was signed by account
 * @category utils
 */
export declare function verifySignature(data: Uint8Array, signature: Uint8Array, address: Encoded.AccountAddress): boolean;
export declare function encodeVarUInt(value: number): Buffer;
export declare const messagePrefixLength: Buffer;
/**
 * Hash message
 * @param message - Message to hash
 * @returns Hash of message
 * @category utils
 */
export declare function hashMessage(message: string): Buffer;
/**
 * Verify that message was signed by address
 * @param message - Message that was signed
 * @param signature - Signature of message
 * @param address - Address to verify against
 * @returns is data was signed by address
 * @category utils
 */
export declare function verifyMessageSignature(message: string, signature: Uint8Array, address: Encoded.AccountAddress): boolean;
