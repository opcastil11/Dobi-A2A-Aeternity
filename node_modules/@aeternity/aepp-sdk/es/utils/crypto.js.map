{"version":3,"file":"crypto.js","names":["nacl","blake2b","concatBuffers","isItemOfArray","decode","Encoding","ArgumentError","isAddressValid","maybeEncoded","encodings","length","AccountAddress","encoding","split","join","error","ensureEncoded","isEncoded","genSalt","random","BigUint64Array","randomBytes","buffer","Number","BigInt","MAX_SAFE_INTEGER","encodeUnsigned","value","binary","_Buffer","allocUnsafe","writeUInt32BE","subarray","findIndex","i","hash","input","from","undefined","verifySignature","data","signature","address","sign","detached","verify","encodeVarUInt","Uint16Array","Uint32Array","messagePrefix","messagePrefixLength","hashMessage","message","msg","verifyMessageSignature"],"sources":["../../src/utils/crypto.ts"],"sourcesContent":["import nacl from 'tweetnacl';\n// js extension is required for mjs build, not importing the whole package to reduce bundle size\n// eslint-disable-next-line import/extensions\nimport { blake2b } from 'blakejs/blake2b.js';\n\nimport { concatBuffers, isItemOfArray } from './other.js';\nimport { decode, Encoded, Encoding } from './encoder.js';\nimport { ArgumentError } from './errors.js';\n\n/**\n * Check if address is valid\n * @param maybeAddress - Address to check\n * @category utils\n * @deprecated Use {@link isEncoded} instead\n */\nexport function isAddressValid(maybeAddress: string): maybeAddress is Encoded.AccountAddress;\n/**\n * Check if data is encoded in one of provided encodings\n * @param maybeEncoded - Data to check\n * @param encodings - Rest parameters with encodings to check against\n * @deprecated Use {@link isEncoded} instead\n */\nexport function isAddressValid<E extends Encoding>(\n  maybeEncoded: string,\n  ...encodings: E[]\n): maybeEncoded is Encoded.Generic<E>;\nexport function isAddressValid(maybeEncoded: string, ...encodings: Encoding[]): boolean {\n  if (encodings.length === 0) encodings = [Encoding.AccountAddress];\n  try {\n    decode(maybeEncoded as Encoded.Any);\n    const encoding = maybeEncoded.split('_')[0];\n    if (!isItemOfArray(encoding, encodings)) {\n      throw new ArgumentError(\n        'Encoded string type',\n        encodings.length > 1 ? `one of ${encodings.join(', ')}` : encodings[0],\n        encoding,\n      );\n    }\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * Check if data is encoded in any encoding\n * @param maybeEncoded - Data to check\n * @category utils\n */\nexport function ensureEncoded(maybeEncoded: string): asserts maybeEncoded is Encoded.Any;\n/**\n * Check if data is encoded in one of provided encodings\n * @param maybeEncoded - Data to check\n * @param encodings - Rest parameters with encodings to check against\n */\nexport function ensureEncoded<E extends Encoding>(\n  maybeEncoded: string,\n  ...encodings: E[]\n): asserts maybeEncoded is Encoded.Generic<E>;\nexport function ensureEncoded(maybeEncoded: string, ...encodings: Encoding[]): void {\n  decode(maybeEncoded as Encoded.Any);\n  if (encodings.length === 0) return;\n  const encoding = maybeEncoded.split('_')[0];\n  if (isItemOfArray(encoding, encodings)) return;\n  throw new ArgumentError(\n    'Encoded string type',\n    encodings.length > 1 ? `one of ${encodings.join(', ')}` : encodings[0],\n    encoding,\n  );\n}\n\n/**\n * Check if data is encoded in any encoding\n * @param maybeEncoded - Data to check\n * @category utils\n */\nexport function isEncoded(maybeEncoded: string): maybeEncoded is Encoded.Any;\n/**\n * Check if data is encoded in one of provided encodings\n * @param maybeEncoded - Data to check\n * @param encodings - Rest parameters with encodings to check against\n */\nexport function isEncoded<E extends Encoding>(\n  maybeEncoded: string,\n  ...encodings: E[]\n): maybeEncoded is Encoded.Generic<E>;\nexport function isEncoded(maybeEncoded: string, ...encodings: Encoding[]): boolean {\n  try {\n    ensureEncoded(maybeEncoded, ...encodings);\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * Generate a random salt (positive integer)\n * @returns random salt\n * @category utils\n */\nexport function genSalt(): number {\n  const [random] = new BigUint64Array(nacl.randomBytes(8).buffer);\n  return Number(random % BigInt(Number.MAX_SAFE_INTEGER));\n}\n\n/**\n * Converts a positive integer to the smallest possible\n * representation in a binary digit representation\n * @param value - Value to encode\n * @returns Encoded number\n * @category utils\n * @deprecated This function is out of the sdk scope. Copy implementation from sdk if necessary.\n */\nexport function encodeUnsigned(value: number): Buffer {\n  const binary = Buffer.allocUnsafe(4);\n  binary.writeUInt32BE(value);\n  return binary.subarray(binary.findIndex((i) => i !== 0));\n}\n\n/**\n * Calculate 256bits Blake2b hash of `input`\n * @param input - Data to hash\n * @returns Hash\n * @category utils\n * @deprecated use \"blakejs\" package directly\n */\nexport function hash(input: string | Uint8Array): Buffer {\n  return Buffer.from(blake2b(input, undefined, 32)); // 256 bits\n}\n\n/**\n * Verify that data was signed by account\n * @param data - Data that was signed\n * @param signature - Signature of data\n * @param address - Address of account to verify against\n * @returns is data was signed by account\n * @category utils\n */\nexport function verifySignature(\n  data: Uint8Array,\n  signature: Uint8Array,\n  address: Encoded.AccountAddress,\n): boolean {\n  return nacl.sign.detached.verify(data, signature, decode(address));\n}\n\nexport function encodeVarUInt(value: number): Buffer {\n  if (value < 0xfd) {\n    return Buffer.from([value]);\n  }\n  if (value <= 0xffff) {\n    return concatBuffers([Buffer.from([0xfd]), Buffer.from(new Uint16Array([value]).buffer)]);\n  }\n  if (value <= 0xffffffff) {\n    return concatBuffers([Buffer.from([0xfe]), Buffer.from(new Uint32Array([value]).buffer)]);\n  }\n  return concatBuffers([\n    Buffer.from([0xff]),\n    Buffer.from(new BigUint64Array([BigInt(value)]).buffer),\n  ]);\n}\n\nconst messagePrefix = Buffer.from('aeternity Signed Message:\\n', 'utf8');\nexport const messagePrefixLength = encodeVarUInt(messagePrefix.length);\n\n/**\n * Hash message\n * @param message - Message to hash\n * @returns Hash of message\n * @category utils\n */\nexport function hashMessage(message: string): Buffer {\n  const msg = Buffer.from(message, 'utf8');\n  return hash(concatBuffers([messagePrefixLength, messagePrefix, encodeVarUInt(msg.length), msg]));\n}\n\n/**\n * Verify that message was signed by address\n * @param message - Message that was signed\n * @param signature - Signature of message\n * @param address - Address to verify against\n * @returns is data was signed by address\n * @category utils\n */\nexport function verifyMessageSignature(\n  message: string,\n  signature: Uint8Array,\n  address: Encoded.AccountAddress,\n): boolean {\n  return verifySignature(hashMessage(message), signature, address);\n}\n"],"mappings":"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","ignoreList":[]}