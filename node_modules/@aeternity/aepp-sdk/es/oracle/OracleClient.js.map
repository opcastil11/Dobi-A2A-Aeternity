{"version":3,"file":"OracleClient.js","names":["pause","oracleQueryId","unpackTx","buildTxAsync","Tag","RequestTimedOutError","decode","_getPollInterval","getHeight","sendTransaction","OracleBase","OracleClient","constructor","address","options","postQuery","query","opt","senderId","onAccount","oracleQueryTx","_isInternalBuild","tag","OracleQueryTx","oracleId","nonce","queryId","pollForResponse","_opt$interval","interval","height","ttl","response","getQuery","responseBuffer","length","toString","cached"],"sources":["../../src/oracle/OracleClient.ts"],"sourcesContent":["import { pause, Optional } from '../utils/other.js';\nimport { oracleQueryId } from '../tx/builder/helpers.js';\nimport { unpackTx, buildTxAsync, BuildTxOptions } from '../tx/builder/index.js';\nimport { Tag } from '../tx/builder/constants.js';\nimport { RequestTimedOutError } from '../utils/errors.js';\nimport { decode, Encoded } from '../utils/encoder.js';\nimport { _getPollInterval, getHeight } from '../chain.js';\nimport { sendTransaction } from '../send-transaction.js';\nimport Node from '../Node.js';\nimport AccountBase from '../account/Base.js';\nimport OracleBase from './OracleBase.js';\n\n/**\n * @category oracle\n */\ninterface OracleClientPostQueryOptions\n  extends Optional<Parameters<typeof sendTransaction>[1], 'onNode' | 'onAccount'>,\n    BuildTxOptions<Tag.OracleQueryTx, 'oracleId' | 'senderId' | 'query'> {}\n\n/**\n * @category oracle\n */\nexport default class OracleClient extends OracleBase {\n  /**\n   * @param address - Oracle public key\n   * @param options - Options object\n   * @param options.onAccount - Account to use\n   * @param options.onNode - Node to use\n   */\n  constructor(\n    address: Encoded.OracleAddress,\n    public override options: { onAccount: AccountBase; onNode: Node } & Parameters<\n      OracleClient['query']\n    >[1],\n  ) {\n    super(address, options);\n  }\n\n  /**\n   * Post query to oracle\n   * @param query - Query to oracle\n   * @param options - Options object\n   * @returns Transaction details and query ID\n   */\n  async postQuery(\n    query: string,\n    options: OracleClientPostQueryOptions = {},\n  ): Promise<Awaited<ReturnType<typeof sendTransaction>> & { queryId: Encoded.OracleQueryId }> {\n    const opt = { ...this.options, ...options };\n    const senderId = opt.onAccount.address;\n\n    const oracleQueryTx = await buildTxAsync({\n      _isInternalBuild: true,\n      ...opt,\n      tag: Tag.OracleQueryTx,\n      oracleId: this.address,\n      senderId,\n      query,\n    });\n    const { nonce } = unpackTx(oracleQueryTx, Tag.OracleQueryTx);\n    return {\n      ...(await sendTransaction(oracleQueryTx, opt)),\n      queryId: oracleQueryId(senderId, nonce, this.address),\n    };\n  }\n\n  /**\n   * Poll for oracle response to query\n   * @param queryId - Oracle Query id\n   * @param options - Options object\n   * @param options.interval - Poll interval\n   * @returns Oracle response\n   */\n  async pollForResponse(\n    queryId: Encoded.OracleQueryId,\n    options: { interval?: number } & Partial<Parameters<typeof _getPollInterval>[1]> = {},\n  ): Promise<string> {\n    const opt = { ...this.options, ...options };\n    const interval = opt.interval ?? (await _getPollInterval('micro-block', opt));\n    let height;\n    let ttl;\n    let response;\n    do {\n      ({ response, ttl } = await this.getQuery(queryId, opt));\n      const responseBuffer = decode(response as Encoded.OracleResponse);\n      if (responseBuffer.length > 0) return responseBuffer.toString();\n      await pause(interval);\n      height = await getHeight({ ...opt, cached: true });\n    } while (ttl >= height);\n    throw new RequestTimedOutError(height);\n  }\n\n  /**\n   * Post query to oracle and wait for response\n   * @param query - Query to oracle\n   * @param options - Options object\n   * @returns Oracle response\n   */\n  async query(\n    query: string,\n    options: OracleClientPostQueryOptions & Parameters<OracleClient['pollForResponse']>[1] = {},\n  ): Promise<string> {\n    const { queryId } = await this.postQuery(query, options);\n    return this.pollForResponse(queryId, options);\n  }\n}\n"],"mappings":"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","ignoreList":[]}