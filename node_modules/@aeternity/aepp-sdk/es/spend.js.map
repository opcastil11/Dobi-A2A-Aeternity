{"version":3,"file":"spend.js","names":["BigNumber","getBalance","resolveName","sendTransaction","buildTxAsync","unpackTx","ArgumentError","Tag","spend","amount","recipientIdOrName","options","_isInternalBuild","tag","SpendTx","senderId","onAccount","address","recipientId","transferFunds","fraction","balance","bind","desiredAmount","times","integerValue","ROUND_HALF_UP","fee","plus","gt","minus","payForTransaction","transaction","PayingForTx","payerId","tx"],"sources":["../src/spend.ts"],"sourcesContent":["import BigNumber from 'bignumber.js';\nimport { getBalance, resolveName } from './chain.js';\nimport { sendTransaction, SendTransactionOptions } from './send-transaction.js';\nimport { buildTxAsync, BuildTxOptions, unpackTx } from './tx/builder/index.js';\nimport { ArgumentError } from './utils/errors.js';\nimport { Encoded } from './utils/encoder.js';\nimport { Tag, AensName } from './tx/builder/constants.js';\n\n// TODO: name verify should not overlap with transaction verify\ntype ResolveNameOptions = Omit<Parameters<typeof resolveName>[2], 'onNode' | 'verify'>;\n\n/**\n * Send coins to another account\n * @category chain\n * @param amount - Amount to spend\n * @param recipientIdOrName - Address or name of recipient account\n * @param options - Options\n * @returns Transaction\n */\nexport async function spend(\n  amount: number | string,\n  recipientIdOrName: Encoded.AccountAddress | Encoded.ContractAddress | AensName,\n  options: SpendOptions,\n): ReturnType<typeof sendTransaction> {\n  return sendTransaction(\n    await buildTxAsync({\n      _isInternalBuild: true,\n      ...options,\n      tag: Tag.SpendTx,\n      senderId: options.onAccount.address,\n      recipientId: await resolveName(recipientIdOrName, 'account_pubkey', options),\n      amount,\n    }),\n    options,\n  );\n}\n\ntype SpendOptionsType = BuildTxOptions<\n  Tag.SpendTx,\n  'senderId' | 'recipientId' | 'amount' | 'onNode'\n> &\n  ResolveNameOptions &\n  SendTransactionOptions;\ninterface SpendOptions extends SpendOptionsType {}\n\n// TODO: Rename to spendFraction\n/**\n * Spend a fraction of coin balance to another account. Useful if needed to drain account balance\n * completely, sending funds to another account (with fraction set to 1).\n * @category chain\n * @param fraction - Fraction of balance to spend (between 0 and 1)\n * @param recipientIdOrName - Address or name of recipient account\n * @param options - Options\n * @example\n * ```js\n * // `fraction` * 100 = % of AE to be transferred (e.g. `0.42` for 42% or `1` for 100%)\n * const { blockHeight } = await aeSdk.transferFunds(\n *   0.42,\n *   'ak_21A27UVVt3hDkBE5J7rhhqnH5YNb4Y1dqo4PnSybrH85pnWo7E',\n * );\n * console.log('Transaction mined at', blockHeight);\n * ```\n */\nexport async function transferFunds(\n  fraction: number | string, // TODO: accept only number\n  recipientIdOrName: AensName | Encoded.AccountAddress | Encoded.ContractAddress,\n  options: TransferFundsOptions,\n): ReturnType<typeof sendTransaction> {\n  if (+fraction < 0 || +fraction > 1) {\n    throw new ArgumentError('fraction', 'a number between 0 and 1', fraction);\n  }\n  const recipientId = await resolveName(recipientIdOrName, 'account_pubkey', options);\n  const senderId = options.onAccount.address;\n  const balance = new BigNumber(await getBalance.bind(options.onAccount)(senderId, options));\n  const desiredAmount = balance.times(fraction).integerValue(BigNumber.ROUND_HALF_UP);\n  const { fee } = unpackTx(\n    await buildTxAsync({\n      _isInternalBuild: true,\n      ...options,\n      tag: Tag.SpendTx,\n      senderId,\n      recipientId,\n      amount: desiredAmount,\n    }),\n    Tag.SpendTx,\n  );\n  // Reducing of the amount may reduce transaction fee, so this is not completely accurate\n  const amount = desiredAmount.plus(fee).gt(balance) ? balance.minus(fee) : desiredAmount;\n  return sendTransaction(\n    await buildTxAsync({\n      _isInternalBuild: true,\n      ...options,\n      tag: Tag.SpendTx,\n      senderId,\n      recipientId,\n      amount,\n    }),\n    options,\n  );\n}\n\ntype TransferFundsOptionsType = BuildTxOptions<\n  Tag.SpendTx,\n  'senderId' | 'recipientId' | 'amount' | 'onNode'\n> &\n  ResolveNameOptions &\n  SendTransactionOptions;\ninterface TransferFundsOptions extends TransferFundsOptionsType {}\n\n/**\n * Submit transaction of another account paying for it (fee and gas)\n * @category chain\n * @param transaction - tx_<base64>-encoded transaction\n * @param options - Options\n * @returns Object Transaction\n */\nexport async function payForTransaction(\n  transaction: Encoded.Transaction,\n  options: PayForTransactionOptions,\n): ReturnType<typeof sendTransaction> {\n  return sendTransaction(\n    await buildTxAsync({\n      _isInternalBuild: true,\n      ...options,\n      tag: Tag.PayingForTx,\n      payerId: options.onAccount.address,\n      tx: transaction,\n    }),\n    options,\n  );\n}\n\ninterface PayForTransactionOptions\n  extends BuildTxOptions<Tag.PayingForTx, 'payerId' | 'tx' | 'onNode'>,\n    SendTransactionOptions {}\n"],"mappings":"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","ignoreList":[]}