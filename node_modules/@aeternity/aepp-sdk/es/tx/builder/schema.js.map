{"version":3,"file":"schema.js","names":["Tag","abiVersion","address","idTagToEncoding","array","coinAmount","ctVersion","encoded","entry","enumeration","fee","gasLimit","gasPrice","name","nameFee","nameId","nonce","pointers","queryFee","raw","shortUInt","shortUIntConst","string","transaction","ttl","uInt","withDefault","withFormatting","Encoding","ArgumentError","EntryTag","ORACLE_TTL_TYPES","transactionAny","transactionSignedTx","SignedTx","entryTreesPoi","TreesPoi","clientTtl","nameTtl","value","NAME_TTL","txSchema","tag","version","signatures","encodedTx","SpendTx","senderId","AccountAddress","recipientId","ContractAddress","Name","amount","payload","Bytearray","NamePreclaimTx","accountId","commitmentId","Commitment","NameClaimTx","nameSalt","NameUpdateTx","NameTransferTx","NameRevokeTx","ContractCreateTx","ownerId","code","ContractBytearray","deposit","callData","ContractCallTx","callerId","contractId","OracleRegisterTx","queryFormat","responseFormat","oracleTtlType","delta","oracleTtlValue","OracleExtendTx","oracleId","OracleAddress","OracleQueryTx","query","queryTtlType","queryTtlValue","responseTtlType","responseTtlValue","OracleRespondTx","queryId","OracleQueryId","response","ChannelCreateTx","initiator","initiatorAmount","responder","responderAmount","channelReserve","lockPeriod","initiatorDelegateIds","responderDelegateIds","stateHash","State","ChannelCloseMutualTx","channelId","Channel","fromId","initiatorAmountFinal","responderAmountFinal","ChannelCloseSoloTx","Transaction","poi","ChannelSlashTx","ChannelDepositTx","round","ChannelWithdrawTx","toId","ChannelSettleTx","ChannelForceProgressTx","update","offChainTrees","StateTrees","ChannelOffChainTx","ChannelSnapshotSoloTx","GaAttachTx","authFun","GaMetaTx","gaId","authData","tx","PayingForTx","payerId"],"sources":["../../../src/tx/builder/schema.ts"],"sourcesContent":["/**\n * Transaction Schema for TxBuilder\n */\n// # RLP version number\n// # https://github.com/aeternity/protocol/blob/master/serializations.md#binary-serialization\n\nimport { Tag } from './constants.js';\nimport SchemaTypes from './SchemaTypes.js';\nimport abiVersion from './field-types/abi-version.js';\nimport address, { idTagToEncoding } from './field-types/address.js';\nimport array from './field-types/array.js';\nimport coinAmount from './field-types/coin-amount.js';\nimport ctVersion from './field-types/ct-version.js';\nimport encoded from './field-types/encoded.js';\nimport entry from './field-types/entry.js';\nimport enumeration from './field-types/enumeration.js';\nimport fee from './field-types/fee.js';\nimport gasLimit from './field-types/gas-limit.js';\nimport gasPrice from './field-types/gas-price.js';\nimport name from './field-types/name.js';\nimport nameFee from './field-types/name-fee.js';\nimport nameId from './field-types/name-id.js';\nimport nonce from './field-types/nonce.js';\nimport pointers from './field-types/pointers.js';\nimport queryFee from './field-types/query-fee.js';\nimport raw from './field-types/raw.js';\nimport shortUInt from './field-types/short-u-int.js';\nimport shortUIntConst from './field-types/short-u-int-const.js';\nimport string from './field-types/string.js';\nimport transaction from './field-types/transaction.js';\nimport ttl from './field-types/ttl.js';\nimport uInt from './field-types/u-int.js';\nimport withDefault from './field-types/with-default.js';\nimport withFormatting from './field-types/with-formatting.js';\nimport { Encoded, Encoding } from '../../utils/encoder.js';\nimport { ArgumentError } from '../../utils/errors.js';\nimport { EntryTag } from './entry/constants.js';\nimport { EntParams, EntUnpacked } from './entry/schema.generated.js';\n\n/**\n * @category oracle\n */\nexport enum ORACLE_TTL_TYPES {\n  delta = 0,\n  block = 1,\n}\n\n// TODO: figure out how to omit overriding types of recursive fields\ninterface TransactionAny {\n  serialize: (value: TxParams | Uint8Array | Encoded.Transaction) => Buffer;\n  deserialize: (value: Buffer) => TxUnpacked;\n  recursiveType: true;\n}\n\nconst transactionAny = transaction() as unknown as TransactionAny;\n\ninterface TransactionSignedTx {\n  serialize: (\n    value: (TxParams & { tag: Tag.SignedTx }) | Uint8Array | Encoded.Transaction,\n  ) => Buffer;\n  deserialize: (value: Buffer) => TxUnpacked & { tag: Tag.SignedTx };\n  recursiveType: true;\n}\n\nconst transactionSignedTx = transaction(Tag.SignedTx) as unknown as TransactionSignedTx;\n\ninterface EntryTreesPoi {\n  serialize: (\n    value: (EntParams & { tag: EntryTag.TreesPoi }) | Uint8Array | Encoded.Transaction,\n  ) => Buffer;\n  deserialize: (value: Buffer) => EntUnpacked & { tag: EntryTag.TreesPoi };\n  recursiveType: true;\n}\n\nconst entryTreesPoi = entry(EntryTag.TreesPoi) as unknown as EntryTreesPoi;\n\nconst clientTtl = withDefault(60 * 60, shortUInt);\n// https://github.com/aeternity/protocol/blob/fd17982/AENS.md#update\n/**\n * Name ttl represented in number of blocks (Max value is 50000 blocks)\n */\nconst nameTtl = withFormatting((value) => {\n  const NAME_TTL = 180000;\n  value ??= NAME_TTL;\n  if (value >= 1 && value <= NAME_TTL) return value;\n  throw new ArgumentError('nameTtl', `a number between 1 and ${NAME_TTL} blocks`, value);\n}, shortUInt);\n\n/**\n * @see {@link https://github.com/aeternity/protocol/blob/c007deeac4a01e401238412801ac7084ac72d60e/serializations.md#accounts-version-1-basic-accounts}\n */\nexport const txSchema = [\n  {\n    tag: shortUIntConst(Tag.SignedTx),\n    version: shortUIntConst(1, true),\n    signatures: array(raw), // TODO: use sg_ (Encoding.Signature) instead\n    encodedTx: transactionAny,\n  },\n  {\n    tag: shortUIntConst(Tag.SpendTx),\n    version: shortUIntConst(1, true),\n    senderId: address(Encoding.AccountAddress),\n    // TODO: accept also an AENS name\n    recipientId: address(Encoding.AccountAddress, Encoding.ContractAddress, Encoding.Name),\n    amount: coinAmount,\n    fee,\n    ttl,\n    nonce: nonce('senderId'),\n    payload: encoded(Encoding.Bytearray, true),\n  },\n  {\n    tag: shortUIntConst(Tag.NamePreclaimTx),\n    version: shortUIntConst(1, true),\n    accountId: address(Encoding.AccountAddress),\n    nonce: nonce('accountId'),\n    commitmentId: address(Encoding.Commitment),\n    fee,\n    ttl,\n  },\n  {\n    tag: shortUIntConst(Tag.NameClaimTx),\n    version: shortUIntConst(2, true),\n    accountId: address(Encoding.AccountAddress),\n    nonce: nonce('accountId'),\n    name,\n    nameSalt: withDefault(0, uInt),\n    nameFee,\n    fee,\n    ttl,\n  },\n  {\n    tag: shortUIntConst(Tag.NameUpdateTx),\n    version: shortUIntConst(1, true),\n    accountId: address(Encoding.AccountAddress),\n    nonce: nonce('accountId'),\n    nameId,\n    nameTtl,\n    pointers: pointers(false),\n    clientTtl,\n    fee,\n    ttl,\n  },\n  {\n    tag: shortUIntConst(Tag.NameUpdateTx),\n    version: shortUIntConst(2),\n    accountId: address(Encoding.AccountAddress),\n    nonce: nonce('accountId'),\n    nameId,\n    nameTtl,\n    pointers: pointers(true),\n    clientTtl,\n    fee,\n    ttl,\n  },\n  {\n    tag: shortUIntConst(Tag.NameTransferTx),\n    version: shortUIntConst(1, true),\n    accountId: address(Encoding.AccountAddress),\n    nonce: nonce('accountId'),\n    nameId,\n    // TODO: accept also an AENS name\n    recipientId: address(Encoding.AccountAddress, Encoding.Name),\n    fee,\n    ttl,\n  },\n  {\n    tag: shortUIntConst(Tag.NameRevokeTx),\n    version: shortUIntConst(1, true),\n    accountId: address(Encoding.AccountAddress),\n    nonce: nonce('accountId'),\n    nameId,\n    fee,\n    ttl,\n  },\n  {\n    tag: shortUIntConst(Tag.ContractCreateTx),\n    version: shortUIntConst(1, true),\n    ownerId: address(Encoding.AccountAddress),\n    nonce: nonce('ownerId'),\n    code: encoded(Encoding.ContractBytearray),\n    ctVersion,\n    fee,\n    ttl,\n    deposit: withFormatting((value = 0) => {\n      if (+value === 0) return value;\n      throw new ArgumentError('deposit', 'equal 0 (because is not refundable)', value);\n    }, coinAmount),\n    amount: coinAmount,\n    gasLimit,\n    gasPrice,\n    callData: encoded(Encoding.ContractBytearray),\n  },\n  {\n    tag: shortUIntConst(Tag.ContractCallTx),\n    version: shortUIntConst(1, true),\n    callerId: address(Encoding.AccountAddress),\n    nonce: nonce('callerId'),\n    // TODO: accept also an AENS name\n    contractId: address(Encoding.ContractAddress, Encoding.Name),\n    abiVersion,\n    fee,\n    ttl,\n    amount: coinAmount,\n    gasLimit,\n    gasPrice,\n    callData: encoded(Encoding.ContractBytearray),\n  },\n  {\n    tag: shortUIntConst(Tag.OracleRegisterTx),\n    version: shortUIntConst(1, true),\n    accountId: address(Encoding.AccountAddress),\n    nonce: nonce('accountId'),\n    queryFormat: string,\n    responseFormat: string,\n    queryFee: coinAmount,\n    oracleTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n    oracleTtlValue: withDefault(500, shortUInt),\n    fee,\n    ttl,\n    abiVersion,\n  },\n  {\n    tag: shortUIntConst(Tag.OracleExtendTx),\n    version: shortUIntConst(1, true),\n    // TODO: accept also an AENS name\n    oracleId: address(Encoding.OracleAddress, Encoding.Name),\n    nonce: nonce('oracleId'),\n    oracleTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n    oracleTtlValue: withDefault(500, shortUInt),\n    fee,\n    ttl,\n  },\n  {\n    tag: shortUIntConst(Tag.OracleQueryTx),\n    version: shortUIntConst(1, true),\n    senderId: address(Encoding.AccountAddress),\n    nonce: nonce('senderId'),\n    // TODO: accept also an AENS name\n    oracleId: address(Encoding.OracleAddress, Encoding.Name),\n    query: string,\n    queryFee,\n    queryTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n    queryTtlValue: withDefault(10, shortUInt),\n    responseTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n    responseTtlValue: withDefault(10, shortUInt),\n    fee,\n    ttl,\n  },\n  {\n    tag: shortUIntConst(Tag.OracleRespondTx),\n    version: shortUIntConst(1, true),\n    oracleId: address(Encoding.OracleAddress),\n    nonce: nonce('oracleId'),\n    queryId: encoded(Encoding.OracleQueryId),\n    response: string,\n    responseTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n    responseTtlValue: withDefault(10, shortUInt),\n    fee,\n    ttl,\n  },\n  {\n    tag: shortUIntConst(Tag.ChannelCreateTx),\n    version: shortUIntConst(2, true),\n    initiator: address(Encoding.AccountAddress),\n    initiatorAmount: uInt,\n    responder: address(Encoding.AccountAddress),\n    responderAmount: uInt,\n    channelReserve: uInt,\n    lockPeriod: uInt,\n    ttl,\n    fee,\n    initiatorDelegateIds: array(address(...idTagToEncoding)),\n    responderDelegateIds: array(address(...idTagToEncoding)),\n    stateHash: encoded(Encoding.State),\n    nonce: nonce('initiator'),\n  },\n  {\n    tag: shortUIntConst(Tag.ChannelCloseMutualTx),\n    version: shortUIntConst(1, true),\n    channelId: address(Encoding.Channel),\n    fromId: address(Encoding.AccountAddress),\n    initiatorAmountFinal: uInt,\n    responderAmountFinal: uInt,\n    ttl,\n    fee,\n    nonce: nonce('fromId'),\n  },\n  {\n    tag: shortUIntConst(Tag.ChannelCloseSoloTx),\n    version: shortUIntConst(1, true),\n    channelId: address(Encoding.Channel),\n    fromId: address(Encoding.AccountAddress),\n    payload: encoded(Encoding.Transaction),\n    poi: entryTreesPoi,\n    ttl,\n    fee,\n    nonce: nonce('fromId'),\n  },\n  {\n    tag: shortUIntConst(Tag.ChannelSlashTx),\n    version: shortUIntConst(1, true),\n    channelId: address(Encoding.Channel),\n    fromId: address(Encoding.AccountAddress),\n    payload: encoded(Encoding.Transaction),\n    poi: entryTreesPoi,\n    ttl,\n    fee,\n    nonce: nonce('fromId'),\n  },\n  {\n    tag: shortUIntConst(Tag.ChannelDepositTx),\n    version: shortUIntConst(1, true),\n    channelId: address(Encoding.Channel),\n    fromId: address(Encoding.AccountAddress),\n    amount: uInt,\n    ttl,\n    fee,\n    stateHash: encoded(Encoding.State),\n    round: shortUInt,\n    nonce: nonce('fromId'),\n  },\n  {\n    tag: shortUIntConst(Tag.ChannelWithdrawTx),\n    version: shortUIntConst(1, true),\n    channelId: address(Encoding.Channel),\n    toId: address(Encoding.AccountAddress),\n    amount: uInt,\n    ttl,\n    fee,\n    stateHash: encoded(Encoding.State),\n    round: shortUInt,\n    nonce: nonce('fromId'),\n  },\n  {\n    tag: shortUIntConst(Tag.ChannelSettleTx),\n    version: shortUIntConst(1, true),\n    channelId: address(Encoding.Channel),\n    fromId: address(Encoding.AccountAddress),\n    initiatorAmountFinal: uInt,\n    responderAmountFinal: uInt,\n    ttl,\n    fee,\n    nonce: nonce('fromId'),\n  },\n  {\n    tag: shortUIntConst(Tag.ChannelForceProgressTx),\n    version: shortUIntConst(1, true),\n    channelId: address(Encoding.Channel),\n    fromId: address(Encoding.AccountAddress),\n    payload: encoded(Encoding.Transaction),\n    round: shortUInt,\n    update: encoded(Encoding.ContractBytearray),\n    stateHash: encoded(Encoding.State),\n    offChainTrees: encoded(Encoding.StateTrees),\n    ttl,\n    fee,\n    nonce: nonce('fromId'),\n  },\n  {\n    tag: shortUIntConst(Tag.ChannelOffChainTx),\n    version: shortUIntConst(2, true),\n    channelId: address(Encoding.Channel),\n    round: shortUInt,\n    stateHash: encoded(Encoding.State),\n  },\n  {\n    tag: shortUIntConst(Tag.ChannelSnapshotSoloTx),\n    version: shortUIntConst(1, true),\n    channelId: address(Encoding.Channel),\n    fromId: address(Encoding.AccountAddress),\n    payload: encoded(Encoding.Transaction),\n    ttl,\n    fee,\n    nonce: nonce('fromId'),\n  },\n  {\n    tag: shortUIntConst(Tag.GaAttachTx),\n    version: shortUIntConst(1, true),\n    ownerId: address(Encoding.AccountAddress),\n    nonce: nonce('ownerId'),\n    code: encoded(Encoding.ContractBytearray),\n    authFun: raw,\n    ctVersion,\n    fee,\n    ttl,\n    gasLimit,\n    gasPrice,\n    callData: encoded(Encoding.ContractBytearray),\n  },\n  {\n    tag: shortUIntConst(Tag.GaMetaTx),\n    version: shortUIntConst(2, true),\n    gaId: address(Encoding.AccountAddress),\n    authData: encoded(Encoding.ContractBytearray),\n    abiVersion,\n    fee,\n    gasLimit,\n    gasPrice,\n    tx: transactionSignedTx,\n  },\n  {\n    tag: shortUIntConst(Tag.PayingForTx),\n    version: shortUIntConst(1, true),\n    payerId: address(Encoding.AccountAddress),\n    nonce: nonce('payerId'),\n    fee,\n    tx: transactionSignedTx,\n  },\n] as const;\n\ntype TxSchema = SchemaTypes<typeof txSchema>;\nexport type TxParams = TxSchema['TxParams'];\nexport type TxParamsAsync = TxSchema['TxParamsAsync'];\nexport type TxUnpacked = TxSchema['TxUnpacked'];\n"],"mappings":"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","ignoreList":[]}