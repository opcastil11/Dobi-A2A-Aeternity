{"version":3,"file":"query-fee.js","names":["coinAmount","ArgumentError","prepare","value","params","options","onNode","oracleId","requirement","getOracleByPubkey","queryFee","toString"],"sources":["../../../../src/tx/builder/field-types/query-fee.ts"],"sourcesContent":["import coinAmount from './coin-amount.js';\nimport { Int } from '../constants.js';\nimport Node from '../../../Node.js';\nimport { Encoded } from '../../../utils/encoder.js';\nimport { ArgumentError } from '../../../utils/errors.js';\n\n/**\n * Oracle query fee\n */\nexport default {\n  ...coinAmount,\n\n  async prepare(\n    value: Int | undefined,\n    params: {},\n    options: { oracleId?: Encoded.OracleAddress; onNode?: Node },\n  ) {\n    if (value != null) return value;\n    const { onNode, oracleId } = options;\n    const requirement = 'provided (or provide `queryFee` instead)';\n    if (onNode == null) throw new ArgumentError('onNode', requirement, onNode);\n    if (oracleId == null) throw new ArgumentError('oracleId', requirement, oracleId);\n    return (await onNode.getOracleByPubkey(oracleId)).queryFee.toString();\n  },\n};\n"],"mappings":"AAAA,OAAOA,UAAU,MAAM,kBAAkB;AAIzC,SAASC,aAAa,QAAQ,0BAA0B;;AAExD;AACA;AACA;AACA,eAAe;EACb,GAAGD,UAAU;EAEb,MAAME,OAAOA,CACXC,KAAsB,EACtBC,MAAU,EACVC,OAA4D,EAC5D;IACA,IAAIF,KAAK,IAAI,IAAI,EAAE,OAAOA,KAAK;IAC/B,MAAM;MAAEG,MAAM;MAAEC;IAAS,CAAC,GAAGF,OAAO;IACpC,MAAMG,WAAW,GAAG,0CAA0C;IAC9D,IAAIF,MAAM,IAAI,IAAI,EAAE,MAAM,IAAIL,aAAa,CAAC,QAAQ,EAAEO,WAAW,EAAEF,MAAM,CAAC;IAC1E,IAAIC,QAAQ,IAAI,IAAI,EAAE,MAAM,IAAIN,aAAa,CAAC,UAAU,EAAEO,WAAW,EAAED,QAAQ,CAAC;IAChF,OAAO,CAAC,MAAMD,MAAM,CAACG,iBAAiB,CAACF,QAAQ,CAAC,EAAEG,QAAQ,CAACC,QAAQ,CAAC,CAAC;EACvE;AACF,CAAC","ignoreList":[]}