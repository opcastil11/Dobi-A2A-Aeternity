{"version":3,"file":"mptree.js","names":["encode","rlpEncode","hash","MerkleTreeHashMismatchError","MissingNodeInTreeError","UnknownPathNibbleError","UnexpectedTsError","UnknownNodeLengthError","InternalError","decode","Encoding","NodeType","_rootHash","WeakMap","_isComplete","_nodes","_encoding","_tag","_unpackEntry","_MPTree_brand","WeakSet","MPTree","isComplete","_classPrivateFieldGet","constructor","binary","encoding","tag","unpEnt","_classPrivateMethodInitSpec","_classPrivateFieldInitSpec","_classPrivateFieldSet","toString","Object","fromEntries","map","node","keys","length","entries","forEach","key","_nodeHash","call","type","_parseNode","Branch","slice","filter","n","Extension","Leaf","isEqual","tree","serialize","_Buffer","from","mptHash","value","get","d","_assertClassBrand","_getRaw","Bytearray","toObject","_entriesRaw","k","ContractAddress","v","_MPTree","nibble","includes","path","_key","searchFrom","undefined","substring","rec","t","idx","push","genMPTreeField","deserialize","unpackEntry"],"sources":["../../../../src/tx/builder/field-types/mptree.ts"],"sourcesContent":["import { encode as rlpEncode, Input } from 'rlp';\nimport { EntryTag } from '../entry/constants.js';\nimport { hash } from '../../../utils/crypto.js';\nimport {\n  MerkleTreeHashMismatchError,\n  MissingNodeInTreeError,\n  UnknownPathNibbleError,\n  UnexpectedTsError,\n  UnknownNodeLengthError,\n  InternalError,\n} from '../../../utils/errors.js';\nimport { decode, encode, Encoded, Encoding } from '../../../utils/encoder.js';\nimport type { unpackEntry } from '../entry/index.js';\nimport type { EntUnpacked } from '../entry/schema.generated.js';\n\nenum NodeType {\n  Branch,\n  Extension,\n  Leaf,\n}\n\ntype MPTreeBinary = [Buffer, Array<[Buffer, Buffer[]]>];\n\nclass MPTree<E extends Encoding, T extends EntryTag> {\n  readonly #rootHash: string;\n\n  #isComplete = true;\n\n  get isComplete(): boolean {\n    return this.#isComplete;\n  }\n\n  readonly #nodes: { [key: string]: Buffer[] };\n\n  readonly #encoding: E;\n\n  readonly #tag: T;\n\n  readonly #unpackEntry: typeof unpackEntry;\n\n  static #nodeHash(node: Input): string {\n    return Buffer.from(hash(rlpEncode(node))).toString('hex');\n  }\n\n  /**\n   * Deserialize Merkle Patricia Tree\n   * @param binary - Binary\n   * @param tag - Tag to use to decode value\n   * @param unpEnt - Implementation of unpackEntry use to decode values\n   * @returns Merkle Patricia Tree\n   */\n  constructor(binary: MPTreeBinary, encoding: E, tag: T, unpEnt: typeof unpackEntry) {\n    this.#encoding = encoding;\n    this.#tag = tag;\n    this.#unpackEntry = unpEnt;\n    this.#rootHash = binary[0].toString('hex');\n    this.#nodes = Object.fromEntries(binary[1].map((node) => [node[0].toString('hex'), node[1]]));\n\n    if (this.#nodes[this.#rootHash] == null) {\n      if (Object.keys(this.#nodes).length !== 0) {\n        throw new MissingNodeInTreeError(\"Can't find a node by root hash\");\n      }\n      this.#isComplete = false;\n      return;\n    }\n    Object.entries(this.#nodes).forEach(([key, node]) => {\n      if (MPTree.#nodeHash(node) !== key) throw new MerkleTreeHashMismatchError();\n      const { type } = MPTree.#parseNode(node);\n      switch (type) {\n        case NodeType.Branch:\n          node\n            .slice(0, 16)\n            .filter((n) => n.length)\n            .forEach((n) => {\n              // TODO: enable after resolving https://github.com/aeternity/aeternity/issues/4066\n              // if (n.length !== 32) {\n              //   throw new ArgumentError('MPTree branch item length', 32, n.length);\n              // }\n              if (this.#nodes[n.toString('hex')] == null) this.#isComplete = false;\n            });\n          break;\n        case NodeType.Extension:\n          if (this.#nodes[node[1].toString('hex')] == null) {\n            throw new MissingNodeInTreeError(\"Can't find a node by hash in extension node\");\n          }\n          break;\n        case NodeType.Leaf:\n          break;\n        default:\n          throw new InternalError(`Unknown MPTree node type: ${type}`);\n      }\n    });\n  }\n\n  isEqual(tree: MPTree<E, T>): boolean {\n    return this.#rootHash === tree.#rootHash;\n  }\n\n  static #parseNode(node: Buffer[]): { type: NodeType; value?: Buffer; path?: string } {\n    switch (node.length) {\n      case 17:\n        return {\n          type: NodeType.Branch,\n          ...(node[16].length !== 0 && { value: node[16] }),\n        };\n      case 2: {\n        const nibble = node[0][0] >> 4; // eslint-disable-line no-bitwise\n        if (nibble > 3) throw new UnknownPathNibbleError(nibble);\n        const type = nibble <= 1 ? NodeType.Extension : NodeType.Leaf;\n        const slice = [0, 2].includes(nibble) ? 2 : 1;\n        return {\n          type,\n          ...(type === NodeType.Leaf && { value: node[1] }),\n          path: node[0].toString('hex').slice(slice),\n        };\n      }\n      default:\n        throw new UnknownNodeLengthError(node.length);\n    }\n  }\n\n  /**\n   * Serialize Merkle Patricia Tree\n   * @returns Binary\n   */\n  serialize(): MPTreeBinary {\n    return [\n      Buffer.from(this.#rootHash, 'hex'),\n      Object.entries(this.#nodes).map(([mptHash, value]) => [Buffer.from(mptHash, 'hex'), value]),\n    ];\n  }\n\n  /**\n   * Retrieve value from Merkle Patricia Tree\n   * @param _key - The key of the element to retrieve\n   * @returns Value associated to the specified key\n   */\n  #getRaw(_key: string): Buffer | undefined {\n    let searchFrom = this.#rootHash;\n    let key = _key;\n    while (true) {\n      // eslint-disable-line no-constant-condition\n      const node = this.#nodes[searchFrom];\n      if (node == null) {\n        if (!this.isComplete) return undefined;\n        throw new InternalError(\"Can't find node in complete tree\");\n      }\n      const { type, value, path } = MPTree.#parseNode(node);\n      switch (type) {\n        case NodeType.Branch:\n          if (key.length === 0) return value;\n          searchFrom = node[+`0x${key[0]}`].toString('hex');\n          key = key.substring(1);\n          break;\n        case NodeType.Extension:\n          if (key.substring(0, path?.length) !== path) return undefined;\n          searchFrom = node[1].toString('hex');\n          key = key.substring(path.length);\n          break;\n        case NodeType.Leaf:\n          if (path !== key) return undefined;\n          return value;\n        default:\n          throw new InternalError(`Unknown MPTree node type: ${type}`);\n      }\n    }\n  }\n\n  /**\n   * Retrieve value from Merkle Patricia Tree\n   * @param key - The key of the element to retrieve\n   * @returns Value associated to the specified key\n   */\n  get(key: Encoded.Generic<E>): (EntUnpacked & { tag: T }) | undefined {\n    const d = this.#getRaw(decode(key).toString('hex'));\n    if (d == null) return d;\n    return this.#unpackEntry(encode(d, Encoding.Bytearray), this.#tag);\n  }\n\n  #entriesRaw(): Array<[string, Buffer]> {\n    const entries: Array<[string, Buffer]> = [];\n    const rec = (searchFrom: string, key: string): void => {\n      const node = this.#nodes[searchFrom];\n      if (node == null) {\n        if (!this.isComplete) return;\n        throw new InternalError(\"Can't find node in complete tree\");\n      }\n      const { type, value, path } = MPTree.#parseNode(node);\n      switch (type) {\n        case NodeType.Branch:\n          node\n            .slice(0, 16)\n            .map((t, idx): [typeof t, number] => [t, idx])\n            .filter(([t]) => t.length)\n            .forEach(([t, idx]) => rec(t.toString('hex'), key + idx.toString(16)));\n          if (value != null) entries.push([key, value]);\n          break;\n        case NodeType.Extension:\n          rec(node[1].toString('hex'), key + path);\n          break;\n        case NodeType.Leaf:\n          if (value == null) throw new UnexpectedTsError();\n          entries.push([key + path, value]);\n          break;\n        default:\n          throw new InternalError(`Unknown MPTree node type: ${type}`);\n      }\n    };\n    rec(this.#rootHash, '');\n    return entries;\n  }\n\n  toObject(): Record<Encoded.Generic<E>, EntUnpacked & { tag: T }> {\n    return Object.fromEntries(\n      this.#entriesRaw()\n        // TODO: remove after resolving https://github.com/aeternity/aeternity/issues/4066\n        .filter(([k]) => this.#encoding !== Encoding.ContractAddress || k.length !== 66)\n        .map(([k, v]) => [\n          encode(Buffer.from(k, 'hex'), this.#encoding),\n          this.#unpackEntry(encode(v, Encoding.Bytearray), this.#tag),\n        ]),\n    ) as Record<Encoded.Generic<E>, EntUnpacked & { tag: T }>;\n  }\n}\n\nexport default function genMPTreeField<E extends Encoding, T extends EntryTag>(\n  encoding: E,\n  tag: T,\n): {\n  serialize: (value: MPTree<E, T>) => MPTreeBinary;\n  deserialize: (value: MPTreeBinary, o: { unpackEntry: typeof unpackEntry }) => MPTree<E, T>;\n} {\n  return {\n    serialize(value) {\n      return value.serialize();\n    },\n\n    deserialize(value, { unpackEntry }) {\n      return new MPTree(value, encoding, tag, unpackEntry);\n    },\n  };\n}\n"],"mappings":"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","ignoreList":[]}