{"version":3,"file":"nonce.js","names":["isAccountNotFoundError","shortUInt","ArgumentError","Tag","genNonceField","senderKey","serialize","value","tag","GaAttachTx","prepare","params","options","onNode","strategy","senderId","requirement","getAccountNextNonce","replace","catch","error","nextNonce"],"sources":["../../../../src/tx/builder/field-types/nonce.ts"],"sourcesContent":["import { isAccountNotFoundError } from '../../../utils/other.js';\nimport shortUInt from './short-u-int.js';\nimport Node from '../../../Node.js';\nimport { ArgumentError } from '../../../utils/errors.js';\nimport { Enum1 as NextNonceStrategy } from '../../../apis/node/index.js';\nimport { Tag } from '../constants.js';\n\nexport default function genNonceField<SenderKey extends string>(\n  senderKey: SenderKey,\n): {\n  serialize: (value: number, params: { tag: Tag }) => Buffer;\n  // TODO: (value: number) => Promise<number> | (value: undefined, ...) => Promise<number>\n  prepare: (\n    value: number | undefined,\n    params: {},\n    // TODO: replace `string` with AddressEncodings\n    options: { [key in SenderKey]: string } & {\n      strategy?: NextNonceStrategy;\n      onNode?: Node;\n      _isInternalBuild?: boolean;\n    },\n  ) => Promise<number>;\n  deserialize: (value: Buffer) => number;\n  senderKey: string;\n} {\n  return {\n    ...shortUInt,\n\n    serialize(value: number, { tag }): Buffer {\n      if (Tag.GaAttachTx === tag && value !== 1) {\n        throw new ArgumentError('nonce', 'equal 1 if GaAttachTx', value);\n      }\n      return shortUInt.serialize(value);\n    },\n\n    async prepare(value, params, options) {\n      if (value != null) return value;\n      // TODO: uncomment the below line\n      // if (options._isInternalBuild === true) return 0;\n      const { onNode, strategy } = options;\n      const senderId = options[senderKey];\n      const requirement = 'provided (or provide `nonce` instead)';\n      if (onNode == null) throw new ArgumentError('onNode', requirement, onNode);\n      if (senderId == null) throw new ArgumentError('senderId', requirement, senderId);\n      return (\n        await onNode\n          .getAccountNextNonce(senderId.replace(/^ok_/, 'ak_'), { strategy })\n          .catch((error) => {\n            if (!isAccountNotFoundError(error)) throw error;\n            return { nextNonce: 1 };\n          })\n      ).nextNonce;\n    },\n\n    senderKey,\n  };\n}\n"],"mappings":"AAAA,SAASA,sBAAsB,QAAQ,yBAAyB;AAChE,OAAOC,SAAS,MAAM,kBAAkB;AAExC,SAASC,aAAa,QAAQ,0BAA0B;AAExD,SAASC,GAAG,QAAQ,iBAAiB;AAErC,eAAe,SAASC,aAAaA,CACnCC,SAAoB,EAgBpB;EACA,OAAO;IACL,GAAGJ,SAAS;IAEZK,SAASA,CAACC,KAAa,EAAE;MAAEC;IAAI,CAAC,EAAU;MACxC,IAAIL,GAAG,CAACM,UAAU,KAAKD,GAAG,IAAID,KAAK,KAAK,CAAC,EAAE;QACzC,MAAM,IAAIL,aAAa,CAAC,OAAO,EAAE,uBAAuB,EAAEK,KAAK,CAAC;MAClE;MACA,OAAON,SAAS,CAACK,SAAS,CAACC,KAAK,CAAC;IACnC,CAAC;IAED,MAAMG,OAAOA,CAACH,KAAK,EAAEI,MAAM,EAAEC,OAAO,EAAE;MACpC,IAAIL,KAAK,IAAI,IAAI,EAAE,OAAOA,KAAK;MAC/B;MACA;MACA,MAAM;QAAEM,MAAM;QAAEC;MAAS,CAAC,GAAGF,OAAO;MACpC,MAAMG,QAAQ,GAAGH,OAAO,CAACP,SAAS,CAAC;MACnC,MAAMW,WAAW,GAAG,uCAAuC;MAC3D,IAAIH,MAAM,IAAI,IAAI,EAAE,MAAM,IAAIX,aAAa,CAAC,QAAQ,EAAEc,WAAW,EAAEH,MAAM,CAAC;MAC1E,IAAIE,QAAQ,IAAI,IAAI,EAAE,MAAM,IAAIb,aAAa,CAAC,UAAU,EAAEc,WAAW,EAAED,QAAQ,CAAC;MAChF,OAAO,CACL,MAAMF,MAAM,CACTI,mBAAmB,CAACF,QAAQ,CAACG,OAAO,CAAC,MAAM,EAAE,KAAK,CAAC,EAAE;QAAEJ;MAAS,CAAC,CAAC,CAClEK,KAAK,CAAEC,KAAK,IAAK;QAChB,IAAI,CAACpB,sBAAsB,CAACoB,KAAK,CAAC,EAAE,MAAMA,KAAK;QAC/C,OAAO;UAAEC,SAAS,EAAE;QAAE,CAAC;MACzB,CAAC,CAAC,EACJA,SAAS;IACb,CAAC;IAEDhB;EACF,CAAC;AACH","ignoreList":[]}