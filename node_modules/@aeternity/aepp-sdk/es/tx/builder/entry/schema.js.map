{"version":3,"file":"schema.js","names":["abiVersion","address","idTagToEncoding","array","boolean","coinAmount","ctVersion","encoded","entry","enumeration","gasLimit","gasPrice","map","mptree","pointers","raw","shortUInt","shortUIntConst","string","uInt","wrapped","Encoding","EntryTag","CallReturnType","entryMtreeValueArray","MtreeValue","mapContracts","ContractAddress","Contract","mapAccounts","AccountAddress","Account","mapCalls","Bytearray","ContractCall","mapChannels","Channel","mapNames","Name","mapOracles","OracleAddress","Oracle","schemas","tag","version","nonce","balance","flags","gaContract","gaAuthFun","ContractBytearray","accountId","nameTtl","status","clientTtl","owner","code","log","active","referers","deposit","callerId","callerNonce","height","contractId","gasUsed","returnValue","returnType","queryFormat","responseFormat","queryFee","oracleTtlValue","initiator","responder","channelAmount","initiatorAmount","responderAmount","channelReserve","initiatorDelegateIds","responderDelegateIds","stateHash","State","round","soloRound","lockPeriod","lockedUntil","initiatorAuth","responderAuth","ChannelOffChainUpdateTransfer","from","to","amount","ChannelOffChainUpdateDeposit","ChannelOffChainUpdateWithdraw","ChannelOffChainUpdateCreateContract","callData","ChannelOffChainUpdateCallContract","caller","contract","callStack","TreesPoi","accounts","calls","channels","contracts","ns","oracles","StateTrees","ContractsMtree","CallsMtree","ChannelsMtree","NameserviceMtree","OraclesMtree","AccountsMtree","Mtree","values","key","value","payload","GaMetaTxAuthData","fee","txHash","TxHash"],"sources":["../../../../src/tx/builder/entry/schema.ts"],"sourcesContent":["import SchemaTypes from '../SchemaTypes.js';\nimport abiVersion from '../field-types/abi-version.js';\nimport address, { idTagToEncoding } from '../field-types/address.js';\nimport array from '../field-types/array.js';\nimport boolean from '../field-types/boolean.js';\nimport coinAmount from '../field-types/coin-amount.js';\nimport ctVersion from '../field-types/ct-version.js';\nimport encoded from '../field-types/encoded.js';\nimport entry from '../field-types/entry.js';\nimport enumeration from '../field-types/enumeration.js';\nimport gasLimit from '../field-types/gas-limit.js';\nimport gasPrice from '../field-types/gas-price.js';\nimport map from '../field-types/map.js';\nimport mptree from '../field-types/mptree.js';\nimport pointers from '../field-types/pointers.js';\nimport raw from '../field-types/raw.js';\nimport shortUInt from '../field-types/short-u-int.js';\nimport shortUIntConst from '../field-types/short-u-int-const.js';\nimport string from '../field-types/string.js';\nimport uInt from '../field-types/u-int.js';\nimport wrapped from '../field-types/wrapped.js';\nimport { Encoded, Encoding } from '../../../utils/encoder.js';\nimport { EntryTag, CallReturnType } from './constants.js';\n\ninterface EntryMtreeValueArray {\n  serialize: (\n    value: Array<(EntParams & { tag: EntryTag.MtreeValue }) | Uint8Array | Encoded.Transaction>,\n  ) => Buffer[];\n  deserialize: (value: Buffer[]) => Array<EntUnpacked & { tag: EntryTag.MtreeValue }>;\n  recursiveType: true;\n}\n\nconst entryMtreeValueArray = array(entry(EntryTag.MtreeValue)) as unknown as EntryMtreeValueArray;\n\ninterface MapContracts {\n  serialize: (\n    value: Record<Encoded.ContractAddress, EntParams & { tag: EntryTag.Contract }>,\n  ) => Buffer;\n  deserialize: (\n    value: Buffer,\n  ) => Record<Encoded.ContractAddress, EntUnpacked & { tag: EntryTag.Contract }>;\n  recursiveType: true;\n}\n\nconst mapContracts = map(Encoding.ContractAddress, EntryTag.Contract) as unknown as MapContracts;\n\ninterface MapAccounts {\n  serialize: (\n    value: Record<Encoded.AccountAddress, EntParams & { tag: EntryTag.Account }>,\n  ) => Buffer;\n  deserialize: (\n    value: Buffer,\n  ) => Record<Encoded.AccountAddress, EntUnpacked & { tag: EntryTag.Account }>;\n  recursiveType: true;\n}\n\nconst mapAccounts = map(Encoding.AccountAddress, EntryTag.Account) as unknown as MapAccounts;\n\ninterface MapCalls {\n  serialize: (\n    value: Record<Encoded.Bytearray, EntParams & { tag: EntryTag.ContractCall }>,\n  ) => Buffer;\n  deserialize: (\n    value: Buffer,\n  ) => Record<Encoded.Bytearray, EntUnpacked & { tag: EntryTag.ContractCall }>;\n  recursiveType: true;\n}\n\nconst mapCalls = map(Encoding.Bytearray, EntryTag.ContractCall) as unknown as MapCalls;\n\ninterface MapChannels {\n  serialize: (value: Record<Encoded.Channel, EntParams & { tag: EntryTag.Channel }>) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.Channel, EntUnpacked & { tag: EntryTag.Channel }>;\n  recursiveType: true;\n}\n\nconst mapChannels = map(Encoding.Channel, EntryTag.Channel) as unknown as MapChannels;\n\ninterface MapNames {\n  serialize: (value: Record<Encoded.Name, EntParams & { tag: EntryTag.Name }>) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.Name, EntUnpacked & { tag: EntryTag.Name }>;\n  recursiveType: true;\n}\n\nconst mapNames = map(Encoding.Name, EntryTag.Name) as unknown as MapNames;\n\ninterface MapOracles {\n  serialize: (value: Record<Encoded.OracleAddress, EntParams & { tag: EntryTag.Oracle }>) => Buffer;\n  deserialize: (\n    value: Buffer,\n  ) => Record<Encoded.OracleAddress, EntUnpacked & { tag: EntryTag.Oracle }>;\n  recursiveType: true;\n}\n\nconst mapOracles = map(Encoding.OracleAddress, EntryTag.Oracle) as unknown as MapOracles;\n\n/**\n * @see {@link https://github.com/aeternity/protocol/blob/8a9d1d1206174627f6aaef86159dc9c643080653/contracts/fate.md#from-ceres-serialized-signature-data}\n */\nexport const schemas = [\n  {\n    tag: shortUIntConst(EntryTag.Account),\n    version: shortUIntConst(1),\n    nonce: shortUInt,\n    balance: uInt,\n  },\n  {\n    tag: shortUIntConst(EntryTag.Account),\n    version: shortUIntConst(2, true),\n    flags: uInt,\n    nonce: shortUInt,\n    balance: uInt,\n    gaContract: address(Encoding.ContractAddress, Encoding.Name),\n    gaAuthFun: encoded(Encoding.ContractBytearray),\n  },\n  {\n    tag: shortUIntConst(EntryTag.Name),\n    version: shortUIntConst(1, true),\n    accountId: address(Encoding.AccountAddress),\n    nameTtl: shortUInt,\n    status: raw,\n    /**\n     * a suggestion as to how long any clients should cache this information\n     */\n    clientTtl: shortUInt,\n    pointers,\n  },\n  {\n    tag: shortUIntConst(EntryTag.Contract),\n    version: shortUIntConst(1, true),\n    owner: address(Encoding.AccountAddress),\n    ctVersion,\n    code: encoded(Encoding.ContractBytearray),\n    log: encoded(Encoding.ContractBytearray),\n    active: boolean,\n    referers: array(address(Encoding.AccountAddress)),\n    deposit: coinAmount,\n  },\n  {\n    tag: shortUIntConst(EntryTag.ContractCall),\n    version: shortUIntConst(2, true),\n    callerId: address(Encoding.AccountAddress),\n    callerNonce: shortUInt,\n    height: shortUInt,\n    contractId: address(Encoding.ContractAddress),\n    // TODO: rename after resolving https://github.com/aeternity/protocol/issues/506\n    gasPrice: uInt,\n    gasUsed: shortUInt,\n    returnValue: encoded(Encoding.ContractBytearray),\n    returnType: enumeration(CallReturnType),\n    // TODO: add serialization for\n    //  <log> :: [ { <address> :: id, [ <topics> :: binary() }, <data> :: binary() } ]\n    log: array(raw),\n  },\n  {\n    tag: shortUIntConst(EntryTag.Oracle),\n    version: shortUIntConst(1, true),\n    accountId: address(Encoding.AccountAddress),\n    queryFormat: string,\n    responseFormat: string,\n    queryFee: coinAmount,\n    oracleTtlValue: shortUInt,\n    abiVersion,\n  },\n  {\n    tag: shortUIntConst(EntryTag.Channel),\n    version: shortUIntConst(3, true),\n    initiator: address(Encoding.AccountAddress),\n    responder: address(Encoding.AccountAddress),\n    channelAmount: uInt,\n    initiatorAmount: uInt,\n    responderAmount: uInt,\n    channelReserve: uInt,\n    initiatorDelegateIds: array(address(...idTagToEncoding)),\n    responderDelegateIds: array(address(...idTagToEncoding)),\n    stateHash: encoded(Encoding.State),\n    round: shortUInt,\n    soloRound: uInt,\n    lockPeriod: uInt,\n    lockedUntil: uInt,\n    initiatorAuth: encoded(Encoding.ContractBytearray),\n    responderAuth: encoded(Encoding.ContractBytearray),\n  },\n  {\n    tag: shortUIntConst(EntryTag.ChannelOffChainUpdateTransfer),\n    version: shortUIntConst(1, true),\n    from: address(Encoding.AccountAddress),\n    to: address(Encoding.AccountAddress),\n    amount: uInt,\n  },\n  {\n    tag: shortUIntConst(EntryTag.ChannelOffChainUpdateDeposit),\n    version: shortUIntConst(1, true),\n    from: address(Encoding.AccountAddress),\n    amount: uInt,\n  },\n  {\n    tag: shortUIntConst(EntryTag.ChannelOffChainUpdateWithdraw),\n    version: shortUIntConst(1, true),\n    from: address(Encoding.AccountAddress),\n    amount: uInt,\n  },\n  {\n    tag: shortUIntConst(EntryTag.ChannelOffChainUpdateCreateContract),\n    version: shortUIntConst(1, true),\n    owner: address(Encoding.AccountAddress),\n    ctVersion,\n    code: encoded(Encoding.ContractBytearray),\n    deposit: uInt,\n    callData: encoded(Encoding.ContractBytearray),\n  },\n  {\n    tag: shortUIntConst(EntryTag.ChannelOffChainUpdateCallContract),\n    version: shortUIntConst(1, true),\n    caller: address(Encoding.AccountAddress),\n    contract: address(Encoding.ContractAddress),\n    abiVersion,\n    amount: uInt,\n    callData: encoded(Encoding.ContractBytearray),\n    callStack: raw,\n    gasPrice,\n    gasLimit,\n  },\n  {\n    tag: shortUIntConst(EntryTag.TreesPoi),\n    version: shortUIntConst(1, true),\n    // TODO: inline an extra wrapping array after resolving https://github.com/aeternity/protocol/issues/505\n    accounts: array(mptree(Encoding.AccountAddress, EntryTag.Account)),\n    calls: array(mptree(Encoding.Bytearray, EntryTag.ContractCall)),\n    channels: array(mptree(Encoding.Channel, EntryTag.Channel)),\n    contracts: array(mptree(Encoding.ContractAddress, EntryTag.Contract)),\n    ns: array(mptree(Encoding.Name, EntryTag.Name)),\n    oracles: array(mptree(Encoding.OracleAddress, EntryTag.Oracle)),\n  },\n  {\n    tag: shortUIntConst(EntryTag.StateTrees),\n    version: shortUIntConst(0, true),\n    contracts: wrapped(EntryTag.ContractsMtree) as unknown as MapContracts,\n    calls: wrapped(EntryTag.CallsMtree) as unknown as MapCalls,\n    channels: wrapped(EntryTag.ChannelsMtree) as unknown as MapChannels,\n    ns: wrapped(EntryTag.NameserviceMtree) as unknown as MapNames,\n    oracles: wrapped(EntryTag.OraclesMtree) as unknown as MapOracles,\n    accounts: wrapped(EntryTag.AccountsMtree) as unknown as MapAccounts,\n  },\n  {\n    tag: shortUIntConst(EntryTag.Mtree),\n    version: shortUIntConst(1, true),\n    values: entryMtreeValueArray,\n  },\n  {\n    tag: shortUIntConst(EntryTag.MtreeValue),\n    version: shortUIntConst(1, true),\n    key: raw,\n    value: raw,\n  },\n  {\n    tag: shortUIntConst(EntryTag.ContractsMtree),\n    version: shortUIntConst(1, true),\n    payload: mapContracts,\n  },\n  {\n    tag: shortUIntConst(EntryTag.CallsMtree),\n    version: shortUIntConst(1, true),\n    payload: mapCalls,\n  },\n  {\n    tag: shortUIntConst(EntryTag.ChannelsMtree),\n    version: shortUIntConst(1, true),\n    payload: mapChannels,\n  },\n  {\n    tag: shortUIntConst(EntryTag.NameserviceMtree),\n    version: shortUIntConst(1, true),\n    payload: mapNames,\n  },\n  {\n    tag: shortUIntConst(EntryTag.OraclesMtree),\n    version: shortUIntConst(1, true),\n    payload: mapOracles,\n  },\n  {\n    tag: shortUIntConst(EntryTag.AccountsMtree),\n    version: shortUIntConst(1, true),\n    payload: mapAccounts,\n  },\n  {\n    tag: shortUIntConst(EntryTag.GaMetaTxAuthData),\n    version: shortUIntConst(1, true),\n    fee: coinAmount,\n    gasPrice,\n    txHash: encoded(Encoding.TxHash),\n  },\n] as const;\n\ntype Schemas = SchemaTypes<typeof schemas>;\nexport type EntParams = Schemas['TxParams'];\nexport type EntUnpacked = Schemas['TxUnpacked'];\n"],"mappings":"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","ignoreList":[]}