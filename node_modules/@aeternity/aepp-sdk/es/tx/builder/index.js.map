{"version":3,"file":"index.js","names":["decode","encode","Encoding","hash","txSchema","Tag","buildContractId","getSchema","getSchemaCommon","packRecord","unpackRecord","ArgumentError","packEntry","unpackEntry","tag","version","buildTx","params","unpackTx","rebuildTx","overrideParams","Transaction","buildTxAsync","Promise","all","map","key","field","prepare","encodedTx","txType","buildTxHash","rawTx","data","startsWith","TxHash","buildContractIdByContractTx","contractTx","SignedTx","ContractCreateTx","GaAttachTx","ownerId","nonce"],"sources":["../../../src/tx/builder/index.ts"],"sourcesContent":["import { decode, encode, Encoded, Encoding } from '../../utils/encoder.js';\nimport { hash } from '../../utils/crypto.js';\nimport { Field } from './field-types/interface.js';\nimport { txSchema } from './schema.js';\nimport { TxUnpacked, TxParams, TxParamsAsync } from './schema.generated.js';\nimport { Tag } from './constants.js';\nimport { buildContractId } from './helpers.js';\nimport { getSchema as getSchemaCommon, packRecord, unpackRecord } from './common.js';\nimport { ArgumentError } from '../../utils/errors.js';\nimport { packEntry, unpackEntry } from './entry/index.js';\n\n/**\n * JavaScript-based Transaction builder\n */\n\nexport function getSchema(tag: Tag, version?: number): Array<[string, Field]> {\n  return getSchemaCommon(txSchema, Tag, tag, version);\n}\n\ntype TxEncoding =\n  | Encoding.Transaction\n  | Encoding.Poi\n  | Encoding.StateTrees\n  | Encoding.CallStateTree;\n\n/**\n * Build transaction\n * @category transaction builder\n * @param params - Transaction params\n */\nexport function buildTx(params: TxParams): Encoded.Transaction {\n  return packRecord(\n    txSchema,\n    Tag,\n    params,\n    {\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      unpackTx,\n      buildTx,\n      rebuildTx: (overrideParams: any) => buildTx({ ...params, ...overrideParams }),\n      packEntry,\n    },\n    Encoding.Transaction,\n  );\n}\n\nexport type BuildTxOptions<TxType extends Tag, OmitFields extends string> = Omit<\n  TxParamsAsync & { tag: TxType },\n  'tag' | OmitFields\n>;\n\n// TODO: require onNode because it is the only reason this builder is async [breaking change]\n/**\n * Build transaction async (may request node for additional data)\n * @category transaction builder\n * @param params - Transaction params\n * @returns tx_-encoded transaction\n */\nexport async function buildTxAsync(params: TxParamsAsync): Promise<Encoded.Transaction> {\n  await Promise.all(\n    getSchema(params.tag, params.version).map(async ([key, field]) => {\n      if (field.prepare == null) return;\n      // @ts-expect-error the type of `params[key]` can't be determined accurately\n      params[key] = await field.prepare(params[key], params, params);\n    }),\n  );\n\n  // @ts-expect-error after preparation properties should be compatible with sync tx builder\n  return buildTx(params);\n}\n\n/**\n * Unpack transaction encoded as string\n * @category transaction builder\n * @param encodedTx - Encoded transaction\n * @param txType - Expected transaction type\n * @returns Transaction params\n */\nexport function unpackTx<TxType extends Tag>(\n  encodedTx: Encoded.Generic<TxEncoding>,\n  txType?: TxType,\n): TxUnpacked & { tag: TxType } {\n  return unpackRecord(txSchema, Tag, encodedTx, txType, { unpackTx, unpackEntry }) as any;\n}\n\n/**\n * Build a transaction hash\n * @category transaction builder\n * @param rawTx - base64 or rlp encoded transaction\n * @returns Transaction hash\n */\nexport function buildTxHash(rawTx: Encoded.Transaction | Uint8Array): Encoded.TxHash {\n  const data = typeof rawTx === 'string' && rawTx.startsWith('tx_') ? decode(rawTx) : rawTx;\n  return encode(hash(data), Encoding.TxHash);\n}\n\n/**\n * Build a contract public key by contractCreateTx, gaAttach or signedTx\n * @category contract\n * @param contractTx - Transaction\n * @returns Contract public key\n */\nexport function buildContractIdByContractTx(\n  contractTx: Encoded.Transaction,\n): Encoded.ContractAddress {\n  let params = unpackTx(contractTx);\n  if (Tag.SignedTx === params.tag) params = params.encodedTx;\n  if (Tag.ContractCreateTx !== params.tag && Tag.GaAttachTx !== params.tag) {\n    throw new ArgumentError('contractTx', 'a contractCreateTx or gaAttach', params.tag);\n  }\n  return buildContractId(params.ownerId, params.nonce);\n}\n"],"mappings":"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","ignoreList":[]}