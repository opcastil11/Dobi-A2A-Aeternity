{"version":3,"file":"execution-cost.js","names":["buildTx","buildTxHash","unpackTx","Tag","verifySignature","getBufferToSign","IllegalArgumentError","InternalError","TransactionError","getTransactionSignerAddress","getExecutionCost","transaction","innerTx","gasUsed","queryFee","isInitiator","params","tag","SignedTx","res","BigInt","fee","NameClaimTx","nameFee","OracleQueryTx","OracleRespondTx","ChannelSettleTx","initiatorAmountFinal","responderAmountFinal","SpendTx","ContractCreateTx","ContractCallTx","ChannelDepositTx","amount","deposit","GaAttachTx","GaMetaTx","gasPrice","gasLimit","PayingForTx","tx","encodedTx","getExecutionCostBySignedTx","networkId","options","address","isInnerTx","isNotInnerTx","map","f","signatures","getExecutionCostUsingNode","node","isMined","isSignedTx","txHash","includes","callInfo","gaInfo","getTransactionInfoByHash","combinedInfo","getOracleByPubkey","oracleId","toString","initiatorId","getChannelByPubkey","channelId","fromId","getNetworkId"],"sources":["../../src/tx/execution-cost.ts"],"sourcesContent":["import { Encoded } from '../utils/encoder.js';\nimport { buildTx, buildTxHash, unpackTx } from './builder/index.js';\nimport { Tag } from './builder/constants.js';\nimport { verifySignature } from '../utils/crypto.js';\nimport { getBufferToSign } from '../account/Memory.js';\nimport { IllegalArgumentError, InternalError, TransactionError } from '../utils/errors.js';\nimport Node from '../Node.js';\nimport getTransactionSignerAddress from './transaction-signer.js';\n\n/**\n * Calculates the cost of transaction execution\n * Provides an upper cost of contract-call-related transactions because of `gasLimit`.\n * Also assumes that oracle query fee is 0 unless it is provided in options.\n *\n * The idea is that if you need to show transaction details with some accuracy you can define\n * expense fields that you want to show separately. And to show `getExecutionCost` result as a fee,\n * subtracting all fields shown separately.\n *\n * @example\n * ```vue\n * <template>\n * Amount: {{ txUnpacked.amount }}\n * Name fee: {{ txUnpacked.nameFee }}\n * Other fees: {{ getExecutionCost(txEncoded) - txUnpacked.amount - txUnpacked.nameFee }}\n * </template>\n * ```\n *\n * Doing this way you won't worry to show wrong fee for a transaction you may not support. Because\n * the SDK calculates the overall price of any transaction on its side.\n *\n * @param transaction - Transaction to calculate the cost of\n * @param options - Options\n * @param options.innerTx - Should be provided if transaction wrapped with Tag.PayingForTx\n * @param options.gasUsed - Amount of gas actually used to make calculation more accurate\n * @param options.queryFee - Oracle query fee\n * @param options.isInitiator - Is transaction signer an initiator of state channel\n * @category utils\n */\nexport function getExecutionCost(\n  transaction: Encoded.Transaction,\n  {\n    innerTx,\n    gasUsed,\n    queryFee,\n    isInitiator,\n  }: {\n    innerTx?: 'fee-payer' | 'freeloader';\n    gasUsed?: number;\n    queryFee?: string;\n    isInitiator?: boolean;\n  } = {},\n): bigint {\n  const params = unpackTx(transaction);\n  if (params.tag === Tag.SignedTx) {\n    throw new IllegalArgumentError(\n      \"Transaction shouldn't be a SignedTx, use `getExecutionCostBySignedTx` instead\",\n    );\n  }\n\n  let res = 0n;\n  if ('fee' in params && innerTx !== 'freeloader') {\n    res += BigInt(params.fee);\n  }\n  if (params.tag === Tag.NameClaimTx) {\n    res += BigInt(params.nameFee);\n  }\n  if (params.tag === Tag.OracleQueryTx) {\n    res += BigInt(params.queryFee);\n  }\n  if (params.tag === Tag.OracleRespondTx) {\n    res -= BigInt(queryFee ?? 0);\n  }\n  if (params.tag === Tag.ChannelSettleTx) {\n    if (isInitiator === true) res -= BigInt(params.initiatorAmountFinal);\n    if (isInitiator === false) res -= BigInt(params.responderAmountFinal);\n  }\n  if (\n    (params.tag === Tag.SpendTx ||\n      params.tag === Tag.ContractCreateTx ||\n      params.tag === Tag.ContractCallTx ||\n      params.tag === Tag.ChannelDepositTx) &&\n    innerTx !== 'fee-payer'\n  ) {\n    res += BigInt(params.amount);\n  }\n  if (params.tag === Tag.ContractCreateTx) res += BigInt(params.deposit);\n  if (\n    (params.tag === Tag.ContractCreateTx ||\n      params.tag === Tag.ContractCallTx ||\n      params.tag === Tag.GaAttachTx ||\n      params.tag === Tag.GaMetaTx) &&\n    innerTx !== 'freeloader'\n  ) {\n    res += BigInt(params.gasPrice) * BigInt(gasUsed ?? params.gasLimit);\n  }\n  if (params.tag === Tag.GaMetaTx || params.tag === Tag.PayingForTx) {\n    res += getExecutionCost(\n      buildTx(params.tx.encodedTx),\n      params.tag === Tag.PayingForTx ? { innerTx: 'fee-payer' } : {},\n    );\n  }\n  return res;\n}\n\n/**\n * Calculates the cost of signed transaction execution\n * @param transaction - Transaction to calculate the cost of\n * @param networkId - Network id used to sign the transaction\n * @param options - Options\n * @category utils\n */\nexport function getExecutionCostBySignedTx(\n  transaction: Encoded.Transaction,\n  networkId: string,\n  options?: Omit<Parameters<typeof getExecutionCost>[1], 'innerTx'>,\n): bigint {\n  const params = unpackTx(transaction, Tag.SignedTx);\n  if (params.encodedTx.tag === Tag.GaMetaTx) {\n    return getExecutionCost(buildTx(params.encodedTx), options);\n  }\n\n  const tx = buildTx(params.encodedTx);\n  const address = getTransactionSignerAddress(tx);\n  const [isInnerTx, isNotInnerTx] = [true, false].map((f) =>\n    verifySignature(getBufferToSign(tx, networkId, f), params.signatures[0], address),\n  );\n  if (!isInnerTx && !isNotInnerTx) throw new TransactionError(\"Can't verify signature\");\n  return getExecutionCost(buildTx(params.encodedTx), {\n    ...(isInnerTx && { innerTx: 'freeloader' }),\n    ...options,\n  });\n}\n\n/**\n * Calculates the cost of signed and not signed transaction execution using node\n * @param transaction - Transaction to calculate the cost of\n * @param node - Node to use\n * @param options - Options\n * @param options.isMined - Is transaction already mined or not\n * @category utils\n */\nexport async function getExecutionCostUsingNode(\n  transaction: Encoded.Transaction,\n  node: Node,\n  { isMined, ...options }: { isMined?: boolean } & Parameters<typeof getExecutionCost>[1] = {},\n): Promise<bigint> {\n  let params = unpackTx(transaction);\n  const isSignedTx = params.tag === Tag.SignedTx;\n  const txHash = isSignedTx && isMined === true && buildTxHash(transaction);\n  if (params.tag === Tag.SignedTx) params = params.encodedTx;\n\n  // TODO: set gasUsed for PayingForTx after solving https://github.com/aeternity/aeternity/issues/4087\n  if (\n    options.gasUsed == null &&\n    txHash !== false &&\n    [Tag.ContractCreateTx, Tag.ContractCallTx, Tag.GaAttachTx, Tag.GaMetaTx].includes(params.tag)\n  ) {\n    const { callInfo, gaInfo } = await node.getTransactionInfoByHash(txHash);\n    const combinedInfo = callInfo ?? gaInfo;\n    if (combinedInfo == null) {\n      throw new InternalError(`callInfo and gaInfo is not available for transaction ${txHash}`);\n    }\n    options.gasUsed = combinedInfo.gasUsed;\n  }\n\n  if (options.queryFee == null && Tag.OracleRespondTx === params.tag) {\n    options.queryFee = (await node.getOracleByPubkey(params.oracleId)).queryFee.toString();\n  }\n\n  if (options.isInitiator == null && Tag.ChannelSettleTx === params.tag && isMined !== true) {\n    const { initiatorId } = await node.getChannelByPubkey(params.channelId);\n    options.isInitiator = params.fromId === initiatorId;\n  }\n\n  return isSignedTx\n    ? getExecutionCostBySignedTx(transaction, await node.getNetworkId(), options)\n    : getExecutionCost(transaction, options);\n}\n"],"mappings":"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","ignoreList":[]}