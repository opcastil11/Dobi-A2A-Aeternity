{"version":3,"file":"BaseFactory.js","names":["AccountBaseFactory","discover","node","index","result","account","push","initialize","getAccountByPubkey","address","then"],"sources":["../../src/account/BaseFactory.ts"],"sourcesContent":["import Node from '../Node.js';\nimport AccountBase from './Base.js';\n\n/**\n * A factory class that generates instances of AccountBase by index.\n * @category account\n */\nexport default abstract class AccountBaseFactory {\n  /**\n   * Get an instance of AccountBase for a given account index.\n   * @param accountIndex - Index of account\n   */\n  abstract initialize(accountIndex: number): Promise<AccountBase>;\n\n  /**\n   * Discovers accounts in set that already have been used (has any on-chain transactions).\n   * It returns an empty array if none of accounts been used.\n   * If a used account is preceded by an unused account then it would be ignored.\n   * @param node - Instance of Node to get account information from\n   */\n  async discover(node: Node): Promise<AccountBase[]> {\n    let index = 0;\n    const result = [];\n    let account;\n    do {\n      if (account != null) result.push(account);\n      account = await this.initialize(index);\n      index += 1;\n    } while (\n      await node.getAccountByPubkey(account.address).then(\n        () => true,\n        () => false,\n      )\n    );\n    return result;\n  }\n}\n"],"mappings":"AAGA;AACA;AACA;AACA;AACA,eAAe,MAAeA,kBAAkB,CAAC;EAC/C;AACF;AACA;AACA;;EAGE;AACF;AACA;AACA;AACA;AACA;EACE,MAAMC,QAAQA,CAACC,IAAU,EAA0B;IACjD,IAAIC,KAAK,GAAG,CAAC;IACb,MAAMC,MAAM,GAAG,EAAE;IACjB,IAAIC,OAAO;IACX,GAAG;MACD,IAAIA,OAAO,IAAI,IAAI,EAAED,MAAM,CAACE,IAAI,CAACD,OAAO,CAAC;MACzCA,OAAO,GAAG,MAAM,IAAI,CAACE,UAAU,CAACJ,KAAK,CAAC;MACtCA,KAAK,IAAI,CAAC;IACZ,CAAC,QACC,MAAMD,IAAI,CAACM,kBAAkB,CAACH,OAAO,CAACI,OAAO,CAAC,CAACC,IAAI,CACjD,MAAM,IAAI,EACV,MAAM,KACR,CAAC;IAEH,OAAON,MAAM;EACf;AACF","ignoreList":[]}