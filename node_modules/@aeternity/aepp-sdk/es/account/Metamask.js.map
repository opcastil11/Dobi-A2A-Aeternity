{"version":3,"file":"Metamask.js","names":["AccountBase","ArgumentError","InternalError","NotImplementedError","snapId","invokeSnap","provider","method","params","key","response","request","JSON","stringify","AccountMetamask","constructor","index","address","sign","unsafeSign","signTypedData","signDelegation","signTransaction","tx","innerTx","networkId","derivationPath","signMessage","message","signature","_Buffer","from","toString"],"sources":["../../src/account/Metamask.ts"],"sourcesContent":["import type { BaseProvider } from '@metamask/providers';\nimport AccountBase from './Base.js';\nimport { Encoded } from '../utils/encoder.js';\nimport { ArgumentError, InternalError, NotImplementedError } from '../utils/errors.js';\n\nexport const snapId = 'npm:@aeternity-snap/plugin';\n\nexport async function invokeSnap<R>(\n  provider: BaseProvider,\n  method: string,\n  params: unknown,\n  key: string,\n): Promise<R> {\n  const response = await provider.request<{ [k in string]: unknown }>({\n    method: 'wallet_invokeSnap',\n    params: { snapId, request: { method, params } },\n  });\n  if (response == null) throw new InternalError('Empty MetaMask response');\n  if (!(key in response)) {\n    throw new InternalError(`Key ${key} missed in response ${JSON.stringify(response)}`);\n  }\n  return response[key] as R;\n}\n\n/**\n * Account connected to Aeternity Snap for MetaMask\n * https://www.npmjs.com/package/\\@aeternity-snap/plugin\n * @category account\n */\nexport default class AccountMetamask extends AccountBase {\n  /**\n   * @deprecated this class is not intended to provide raw access to the provider\n   */\n  readonly provider: BaseProvider;\n\n  readonly index: number;\n\n  override readonly address: Encoded.AccountAddress;\n\n  /**\n   * @param address - Address of account\n   */\n  constructor(provider: BaseProvider, index: number, address: Encoded.AccountAddress) {\n    super();\n    this.provider = provider;\n    this.index = index;\n    this.address = address;\n  }\n\n  /**\n   * @deprecated Use `unsafeSign` method instead\n   */\n  // eslint-disable-next-line class-methods-use-this\n  override async sign(): Promise<Uint8Array> {\n    return this.unsafeSign();\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  override async unsafeSign(): Promise<Uint8Array> {\n    throw new NotImplementedError('RAW signing using MetaMask');\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  override async signTypedData(): Promise<Encoded.Signature> {\n    throw new NotImplementedError('Typed data signing using MetaMask');\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  override async signDelegation(): Promise<Encoded.Signature> {\n    throw new NotImplementedError('signing delegation using MetaMask');\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  override async signTransaction(\n    tx: Encoded.Transaction,\n    { innerTx, networkId }: { innerTx?: boolean; networkId?: string } = {},\n  ): Promise<Encoded.Transaction> {\n    if (innerTx != null) throw new NotImplementedError('innerTx option in AccountMetamask');\n    if (networkId == null) throw new ArgumentError('networkId', 'provided', networkId);\n\n    return invokeSnap<Encoded.Transaction>(\n      this.provider,\n      'signTransaction',\n      { derivationPath: [`${this.index}'`, \"0'\", \"0'\"], tx, networkId },\n      'signedTx',\n    );\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  override async signMessage(message: string): Promise<Uint8Array> {\n    const signature = await invokeSnap<string>(\n      this.provider,\n      'signMessage',\n      {\n        derivationPath: [`${this.index}'`, \"0'\", \"0'\"],\n        message: Buffer.from(message).toString('base64'),\n      },\n      'signature',\n    );\n    return Buffer.from(signature, 'base64');\n  }\n}\n"],"mappings":";AACA,OAAOA,WAAW,MAAM,WAAW;AAEnC,SAASC,aAAa,EAAEC,aAAa,EAAEC,mBAAmB,QAAQ,oBAAoB;AAEtF,OAAO,MAAMC,MAAM,GAAG,4BAA4B;AAElD,OAAO,eAAeC,UAAUA,CAC9BC,QAAsB,EACtBC,MAAc,EACdC,MAAe,EACfC,GAAW,EACC;EACZ,MAAMC,QAAQ,GAAG,MAAMJ,QAAQ,CAACK,OAAO,CAA6B;IAClEJ,MAAM,EAAE,mBAAmB;IAC3BC,MAAM,EAAE;MAAEJ,MAAM;MAAEO,OAAO,EAAE;QAAEJ,MAAM;QAAEC;MAAO;IAAE;EAChD,CAAC,CAAC;EACF,IAAIE,QAAQ,IAAI,IAAI,EAAE,MAAM,IAAIR,aAAa,CAAC,yBAAyB,CAAC;EACxE,IAAI,EAAEO,GAAG,IAAIC,QAAQ,CAAC,EAAE;IACtB,MAAM,IAAIR,aAAa,CAAC,OAAOO,GAAG,uBAAuBG,IAAI,CAACC,SAAS,CAACH,QAAQ,CAAC,EAAE,CAAC;EACtF;EACA,OAAOA,QAAQ,CAACD,GAAG,CAAC;AACtB;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAMK,eAAe,SAASd,WAAW,CAAC;EACvD;AACF;AACA;;EAOE;AACF;AACA;EACEe,WAAWA,CAACT,QAAsB,EAAEU,KAAa,EAAEC,OAA+B,EAAE;IAClF,KAAK,CAAC,CAAC;IACP,IAAI,CAACX,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACU,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,OAAO,GAAGA,OAAO;EACxB;;EAEA;AACF;AACA;EACE;EACA,MAAeC,IAAIA,CAAA,EAAwB;IACzC,OAAO,IAAI,CAACC,UAAU,CAAC,CAAC;EAC1B;;EAEA;EACA,MAAeA,UAAUA,CAAA,EAAwB;IAC/C,MAAM,IAAIhB,mBAAmB,CAAC,4BAA4B,CAAC;EAC7D;;EAEA;EACA,MAAeiB,aAAaA,CAAA,EAA+B;IACzD,MAAM,IAAIjB,mBAAmB,CAAC,mCAAmC,CAAC;EACpE;;EAEA;EACA,MAAekB,cAAcA,CAAA,EAA+B;IAC1D,MAAM,IAAIlB,mBAAmB,CAAC,mCAAmC,CAAC;EACpE;;EAEA;EACA,MAAemB,eAAeA,CAC5BC,EAAuB,EACvB;IAAEC,OAAO;IAAEC;EAAqD,CAAC,GAAG,CAAC,CAAC,EACxC;IAC9B,IAAID,OAAO,IAAI,IAAI,EAAE,MAAM,IAAIrB,mBAAmB,CAAC,mCAAmC,CAAC;IACvF,IAAIsB,SAAS,IAAI,IAAI,EAAE,MAAM,IAAIxB,aAAa,CAAC,WAAW,EAAE,UAAU,EAAEwB,SAAS,CAAC;IAElF,OAAOpB,UAAU,CACf,IAAI,CAACC,QAAQ,EACb,iBAAiB,EACjB;MAAEoB,cAAc,EAAE,CAAC,GAAG,IAAI,CAACV,KAAK,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC;MAAEO,EAAE;MAAEE;IAAU,CAAC,EACjE,UACF,CAAC;EACH;;EAEA;EACA,MAAeE,WAAWA,CAACC,OAAe,EAAuB;IAC/D,MAAMC,SAAS,GAAG,MAAMxB,UAAU,CAChC,IAAI,CAACC,QAAQ,EACb,aAAa,EACb;MACEoB,cAAc,EAAE,CAAC,GAAG,IAAI,CAACV,KAAK,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC;MAC9CY,OAAO,EAAEE,OAAA,CAAOC,IAAI,CAACH,OAAO,CAAC,CAACI,QAAQ,CAAC,QAAQ;IACjD,CAAC,EACD,WACF,CAAC;IACD,OAAOF,OAAA,CAAOC,IAAI,CAACF,SAAS,EAAE,QAAQ,CAAC;EACzC;AACF","ignoreList":[]}