{"version":3,"file":"AeSdkAepp.js","names":["AeSdkBase","AccountRpc","decode","RPC_VERSION","RpcClient","METHODS","AlreadyConnectedError","NoWalletConnectedError","UnsubscribedAccountError","UnAuthorizedAccountError","RpcConnectionError","Node","AeSdkAepp","constructor","name","onAddressChange","onDisconnect","onNetworkChange","other","_resolveAccount","account","addresses","address","includes","_ensureConnected","rpcClient","_ensureAccountAccess","_accounts","current","Object","keys","connected","connectToWallet","connection","connectNode","disconnectParams","updateNetwork","params","node","url","pool","delete","addNode","client","updateAddress","closeConnection","disconnect","readyToConnect","walletInfo","request","connect","version","disconnectWallet","notify","reason","askAddresses","undefined","subscribeAddress","type","value","result","askToSelectNetwork","network","length"],"sources":["../src/AeSdkAepp.ts"],"sourcesContent":["import AeSdkBase from './AeSdkBase.js';\nimport { OnAccount } from './AeSdkMethods.js';\nimport AccountBase from './account/Base.js';\nimport AccountRpc from './account/Rpc.js';\nimport { decode, Encoded } from './utils/encoder.js';\nimport {\n  Accounts,\n  RPC_VERSION,\n  WalletInfo,\n  Network,\n  WalletApi,\n  AeppApi,\n  Node as NodeRpc,\n  NetworkToSelect,\n} from './aepp-wallet-communication/rpc/types.js';\nimport RpcClient from './aepp-wallet-communication/rpc/RpcClient.js';\nimport { METHODS, SUBSCRIPTION_TYPES } from './aepp-wallet-communication/schema.js';\nimport {\n  AlreadyConnectedError,\n  NoWalletConnectedError,\n  UnsubscribedAccountError,\n  UnAuthorizedAccountError,\n  RpcConnectionError,\n} from './utils/errors.js';\nimport Node from './Node.js';\nimport BrowserConnection from './aepp-wallet-communication/connection/Browser.js';\n\n/**\n * RPC handler for AEPP side\n * Contain functionality for wallet interaction and connect it to sdk\n * @deprecated use WalletConnectorFrame instead\n * @category aepp wallet communication\n */\nexport default class AeSdkAepp extends AeSdkBase {\n  name: string;\n\n  onAddressChange: (a: Accounts) => void;\n\n  onDisconnect: (p: any) => void;\n\n  onNetworkChange: (a: Network) => void;\n\n  rpcClient?: RpcClient<WalletApi, AeppApi>;\n\n  _accounts?: Accounts;\n\n  /**\n   * @param options - Options\n   * @param options.name - Aepp name\n   * @param options.onAddressChange - Call-back function for update address event\n   * @param options.onDisconnect - Call-back function for disconnect event\n   * @param options.onNetworkChange - Call-back function for update network event\n   */\n  constructor({\n    name,\n    onAddressChange = () => {},\n    onDisconnect = () => {},\n    onNetworkChange = () => {},\n    ...other\n  }: {\n    name: string;\n    onAddressChange?: (a: Accounts) => void;\n    onDisconnect?: (p: any) => void;\n    onNetworkChange?: (a: Network) => void;\n  } & ConstructorParameters<typeof AeSdkBase>[0]) {\n    super(other);\n    this.onAddressChange = onAddressChange;\n    this.onDisconnect = onDisconnect;\n    this.onNetworkChange = onNetworkChange;\n    this.name = name;\n  }\n\n  override _resolveAccount(account: OnAccount = this.addresses()[0]): AccountBase {\n    if (typeof account === 'string') {\n      const address = account as Encoded.AccountAddress;\n      decode(address);\n      if (!this.addresses().includes(address)) throw new UnAuthorizedAccountError(address);\n      this._ensureConnected();\n      account = new AccountRpc(this.rpcClient, address);\n    }\n    if (account == null) this._ensureAccountAccess();\n    return super._resolveAccount(account);\n  }\n\n  override addresses(): Encoded.AccountAddress[] {\n    if (this._accounts == null) return [];\n    const current = Object.keys(this._accounts.current)[0];\n    return [\n      ...(current != null ? [current] : []),\n      ...Object.keys(this._accounts.connected),\n    ] as Encoded.AccountAddress[];\n  }\n\n  /**\n   * Connect to wallet\n   * @param connection - Wallet connection object\n   * @param options - Options\n   * @param options.connectNode - Request wallet to bind node\n   * @param options.name - Node name\n   */\n  async connectToWallet(\n    connection: BrowserConnection,\n    { connectNode = false, name = 'wallet-node' }: { connectNode?: boolean; name?: string } = {},\n  ): Promise<WalletInfo & { node?: NodeRpc }> {\n    if (this.rpcClient != null)\n      throw new AlreadyConnectedError('You are already connected to wallet');\n    let disconnectParams: any;\n\n    const updateNetwork = (params: Network): void => {\n      if (connectNode) {\n        if (params.node?.url == null) throw new RpcConnectionError('Missing URLs of the Node');\n        this.pool.delete(name);\n        this.addNode(name, new Node(params.node.url), true);\n      }\n      this.onNetworkChange(params);\n    };\n\n    const client = new RpcClient<WalletApi, AeppApi>(\n      connection,\n      () => {\n        delete this.rpcClient;\n        delete this._accounts;\n        this.onDisconnect(disconnectParams);\n      },\n      {\n        [METHODS.updateAddress]: (params) => {\n          this._accounts = params;\n          this.onAddressChange(params);\n        },\n        [METHODS.updateNetwork]: updateNetwork,\n        [METHODS.closeConnection]: (params) => {\n          disconnectParams = params;\n          client.connection.disconnect();\n        },\n        [METHODS.readyToConnect]: () => {},\n      },\n    );\n    const walletInfo = await client.request(METHODS.connect, {\n      name: this.name,\n      version: RPC_VERSION,\n      connectNode,\n    });\n    updateNetwork(walletInfo);\n    this.rpcClient = client;\n    return walletInfo;\n  }\n\n  /**\n   * Disconnect from wallet\n   */\n  disconnectWallet(): void {\n    this._ensureConnected();\n    this.rpcClient.notify(METHODS.closeConnection, { reason: 'bye' });\n    this.rpcClient.connection.disconnect();\n  }\n\n  /**\n   * Ask addresses from wallet\n   * @returns Addresses from wallet\n   */\n  async askAddresses(): Promise<Encoded.AccountAddress[]> {\n    this._ensureConnected();\n    return this.rpcClient.request(METHODS.address, undefined);\n  }\n\n  /**\n   * Subscribe for addresses from wallet\n   * @param type - Subscription type\n   * @param value - Should be one of 'current' (the selected account), 'connected' (all)\n   * @returns Accounts from wallet\n   */\n  async subscribeAddress(\n    type: SUBSCRIPTION_TYPES,\n    value: 'current' | 'connected',\n  ): Promise<ReturnType<WalletApi[METHODS.subscribeAddress]>> {\n    this._ensureConnected();\n    const result = await this.rpcClient.request(METHODS.subscribeAddress, { type, value });\n    this._accounts = result.address;\n    return result;\n  }\n\n  /**\n   * Ask wallet to select a network\n   */\n  async askToSelectNetwork(network: NetworkToSelect): Promise<void> {\n    this._ensureConnected();\n    await this.rpcClient.request(METHODS.updateNetwork, network);\n  }\n\n  _ensureConnected(): asserts this is AeSdkAepp & {\n    rpcClient: NonNullable<AeSdkAepp['rpcClient']>;\n  } {\n    if (this.rpcClient != null) return;\n    throw new NoWalletConnectedError('You are not connected to Wallet');\n  }\n\n  _ensureAccountAccess(): asserts this is AeSdkAepp & {\n    rpcClient: NonNullable<AeSdkAepp['rpcClient']>;\n  } {\n    this._ensureConnected();\n    if (this.addresses().length !== 0) return;\n    throw new UnsubscribedAccountError();\n  }\n}\n"],"mappings":"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","ignoreList":[]}