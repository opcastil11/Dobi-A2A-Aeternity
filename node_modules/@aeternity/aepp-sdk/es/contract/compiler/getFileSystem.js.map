{"version":3,"file":"getFileSystem.js","names":["readFile","dirname","resolve","basename","InternalError","defaultIncludes","includeRegExp","includesRegExp","RegExp","source","_flagsInstanceProperty","getFileSystemRec","root","relative","_sourceCode$match","sourceCode","filesystem","Promise","all","match","map","include","m","length","filter","includes","includePath","Object","assign","getFileSystem","path"],"sources":["../../../src/contract/compiler/getFileSystem.ts"],"sourcesContent":["import { readFile } from 'fs/promises';\nimport { dirname, resolve, basename } from 'path';\nimport { InternalError } from '../../utils/errors.js';\n\nconst defaultIncludes = [\n  'List.aes',\n  'Option.aes',\n  'String.aes',\n  'Func.aes',\n  'Pair.aes',\n  'Triple.aes',\n  'BLS12_381.aes',\n  'Frac.aes',\n  'Set.aes',\n  'Bitwise.aes',\n];\nconst includeRegExp = /^include\\s*\"([\\w/.-]+)\"/im;\nconst includesRegExp = new RegExp(includeRegExp.source, `${includeRegExp.flags}g`);\n\nasync function getFileSystemRec(root: string, relative: string): Promise<Record<string, string>> {\n  const sourceCode = await readFile(resolve(root, relative), 'utf8');\n  const filesystem: Record<string, string> = {};\n  await Promise.all(\n    (sourceCode.match(includesRegExp) ?? [])\n      .map((include) => {\n        const m = include.match(includeRegExp);\n        if (m?.length !== 2) throw new InternalError('Unexpected match length');\n        return m[1];\n      })\n      .filter((include) => !defaultIncludes.includes(include))\n      .map(async (include) => {\n        const includePath = resolve(root, include);\n        filesystem[include] = await readFile(includePath, 'utf8');\n        Object.assign(filesystem, await getFileSystemRec(root, include));\n      }),\n  );\n  return filesystem;\n}\n\n/**\n * Reads all files included in the provided contract\n * Available only in Node.js\n * @param path - a path to the main contract source code\n * @category contract\n */\nexport default async function getFileSystem(path: string): Promise<Record<string, string>> {\n  return getFileSystemRec(dirname(path), basename(path));\n}\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,aAAa;AACtC,SAASC,OAAO,EAAEC,OAAO,EAAEC,QAAQ,QAAQ,MAAM;AACjD,SAASC,aAAa,QAAQ,uBAAuB;AAErD,MAAMC,eAAe,GAAG,CACtB,UAAU,EACV,YAAY,EACZ,YAAY,EACZ,UAAU,EACV,UAAU,EACV,YAAY,EACZ,eAAe,EACf,UAAU,EACV,SAAS,EACT,aAAa,CACd;AACD,MAAMC,aAAa,GAAG,2BAA2B;AACjD,MAAMC,cAAc,GAAG,IAAIC,MAAM,CAACF,aAAa,CAACG,MAAM,EAAE,GAAAC,sBAAA,CAAGJ,aAAa,IAAS,CAAC;AAElF,eAAeK,gBAAgBA,CAACC,IAAY,EAAEC,QAAgB,EAAmC;EAAA,IAAAC,iBAAA;EAC/F,MAAMC,UAAU,GAAG,MAAMf,QAAQ,CAACE,OAAO,CAACU,IAAI,EAAEC,QAAQ,CAAC,EAAE,MAAM,CAAC;EAClE,MAAMG,UAAkC,GAAG,CAAC,CAAC;EAC7C,MAAMC,OAAO,CAACC,GAAG,CACf,EAAAJ,iBAAA,GAACC,UAAU,CAACI,KAAK,CAACZ,cAAc,CAAC,cAAAO,iBAAA,cAAAA,iBAAA,GAAI,EAAE,EACpCM,GAAG,CAAEC,OAAO,IAAK;IAChB,MAAMC,CAAC,GAAGD,OAAO,CAACF,KAAK,CAACb,aAAa,CAAC;IACtC,IAAIgB,CAAC,EAAEC,MAAM,KAAK,CAAC,EAAE,MAAM,IAAInB,aAAa,CAAC,yBAAyB,CAAC;IACvE,OAAOkB,CAAC,CAAC,CAAC,CAAC;EACb,CAAC,CAAC,CACDE,MAAM,CAAEH,OAAO,IAAK,CAAChB,eAAe,CAACoB,QAAQ,CAACJ,OAAO,CAAC,CAAC,CACvDD,GAAG,CAAC,MAAOC,OAAO,IAAK;IACtB,MAAMK,WAAW,GAAGxB,OAAO,CAACU,IAAI,EAAES,OAAO,CAAC;IAC1CL,UAAU,CAACK,OAAO,CAAC,GAAG,MAAMrB,QAAQ,CAAC0B,WAAW,EAAE,MAAM,CAAC;IACzDC,MAAM,CAACC,MAAM,CAACZ,UAAU,EAAE,MAAML,gBAAgB,CAACC,IAAI,EAAES,OAAO,CAAC,CAAC;EAClE,CAAC,CACL,CAAC;EACD,OAAOL,UAAU;AACnB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,eAAea,aAAaA,CAACC,IAAY,EAAmC;EACzF,OAAOnB,gBAAgB,CAACV,OAAO,CAAC6B,IAAI,CAAC,EAAE3B,QAAQ,CAAC2B,IAAI,CAAC,CAAC;AACxD","ignoreList":[]}