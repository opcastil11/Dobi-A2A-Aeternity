{"version":3,"file":"Contract.js","names":["snakeToPascal","MIN_GAS_PRICE","Tag","signAndNotify","awaitingCompletion","channelClosed","channelOpen","handleUnexpectedMessage","notify","call","changeState","emit","Channel","ChannelSpend","ChannelError","UnexpectedChannelMessageError","unpackTx","buildContractId","snakeToPascalObjKeys","obj","Object","entries","reduce","result","key","val","ChannelContract","initialize","options","_initialize","createContract","code","callData","deposit","vmVersion","abiVersion","sign","enqueueAction","call_data","vm_version","abi_version","handler","_","message","state","method","params","data","tx","_2","message2","state2","SignedTx","encodedTx","tag","ChannelOffChainTx","addressKey","_options","role","owner","address","round","resolve","accepted","signedTx","callContract","amount","contract","contract_id","updates","forceProgress","gasLimit","gasPrice","onOnChainTx","gas_price","gas","info","type","callContractStatic","getContractCall","caller","caller_id","getContractState","pubkey","cleanContractCalls","reject"],"sources":["../../src/channel/Contract.ts"],"sourcesContent":["import BigNumber from 'bignumber.js';\nimport { snakeToPascal } from '../utils/string.js';\nimport { MIN_GAS_PRICE, Tag, AbiVersion, VmVersion } from '../tx/builder/constants.js';\nimport {\n  signAndNotify,\n  awaitingCompletion,\n  channelClosed,\n  channelOpen,\n  handleUnexpectedMessage,\n} from './handlers.js';\nimport {\n  notify,\n  call,\n  SignTx,\n  ChannelState,\n  ChannelOptions,\n  ChannelMessage,\n  ChannelFsm,\n  changeState,\n  emit,\n} from './internal.js';\nimport { Encoded } from '../utils/encoder.js';\nimport { ContractCallObjectReturnType } from '../apis/node/index.js';\nimport { ContractCallObject } from '../contract/Contract.js';\nimport Channel from './Base.js';\nimport ChannelSpend from './Spend.js';\nimport { ChannelError, UnexpectedChannelMessageError } from '../utils/errors.js';\nimport { unpackTx } from '../tx/builder/index.js';\nimport { buildContractId } from '../tx/builder/helpers.js';\n\nfunction snakeToPascalObjKeys<Type>(obj: object): Type {\n  return Object.entries(obj).reduce(\n    (result, [key, val]) => ({\n      ...result,\n      [snakeToPascal(key)]: val,\n    }),\n    {},\n  ) as Type;\n}\n\ninterface CallContractOptions {\n  /**\n   * Amount the caller of the contract commits to it\n   */\n  amount?: number | BigNumber;\n  /**\n   * ABI encoded compiled AEVM call data for the code\n   */\n  callData?: Encoded.ContractBytearray;\n  /**\n   * Version of the ABI\n   */\n  abiVersion?: AbiVersion;\n  /**\n   * Address of the contract to call\n   */\n  contract?: Encoded.ContractAddress;\n}\n\ninterface CallContractResult extends CallContractOptions {\n  returnValue?: any;\n  gasUsed?: number | BigNumber;\n  gasPrice?: number | BigNumber;\n  height?: number;\n  callerNonce?: number;\n  log?: any;\n  returnType?: ContractCallObjectReturnType;\n}\n\ninterface Contract {\n  abiVersion: AbiVersion;\n  active: boolean;\n  deposit: number | BigNumber;\n  id: string;\n  ownerId: string;\n  referrerIds: string[];\n  vmVersion: VmVersion;\n}\n\n/**\n * @category state channel\n */\nexport default class ChannelContract extends ChannelSpend {\n  static override async initialize(options: ChannelOptions): Promise<ChannelContract> {\n    return Channel._initialize(new ChannelContract(), options);\n  }\n\n  /**\n   * Trigger create contract update\n   *\n   * The create contract update is creating a contract inside the channel's internal state tree.\n   * The update is a change to be applied on top of the latest state.\n   *\n   * That would create a contract with the poster being the owner of it. Poster commits initially\n   * a deposit amount of coins to the new contract.\n   *\n   * @param options - Options\n   * @param options.code - Api encoded compiled AEVM byte code\n   * @param options.callData - Api encoded compiled AEVM call data for the code\n   * @param options.deposit - Initial amount the owner of the contract commits to it\n   * @param options.vmVersion - Version of the Virtual Machine\n   * @param options.abiVersion - Version of the Application Binary Interface\n   * @param sign - Function which verifies and signs create contract transaction\n   * @example\n   * ```js\n   * channel.createContract({\n   *   code: 'cb_HKtpipK4aCgYb17wZ...',\n   *   callData: 'cb_1111111111111111...',\n   *   deposit: 10,\n   *   vmVersion: 3,\n   *   abiVersion: 1\n   * }).then(({ accepted, signedTx, address }) => {\n   *   if (accepted) {\n   *     console.log('New contract has been created')\n   *     console.log('Contract address:', address)\n   *   } else {\n   *     console.log('New contract has been rejected')\n   *   }\n   * })\n   * ```\n   */\n  async createContract(\n    {\n      code,\n      callData,\n      deposit,\n      vmVersion,\n      abiVersion,\n    }: {\n      code: Encoded.ContractBytearray;\n      callData: Encoded.ContractBytearray;\n      deposit: number | BigNumber;\n      vmVersion: VmVersion;\n      abiVersion: AbiVersion;\n    },\n    sign: SignTx,\n  ): Promise<{\n    accepted: boolean;\n    signedTx: Encoded.Transaction;\n    address: Encoded.ContractAddress;\n  }> {\n    return this.enqueueAction(() => {\n      notify(this, 'channels.update.new_contract', {\n        code,\n        call_data: callData,\n        deposit,\n        vm_version: vmVersion,\n        abi_version: abiVersion,\n      });\n      return {\n        handler: async (\n          _: Channel,\n          message: ChannelMessage,\n          state: ChannelState,\n        ): Promise<ChannelFsm> => {\n          if (message.method !== 'channels.sign.update') {\n            return handleUnexpectedMessage(this, message, state);\n          }\n          await signAndNotify(this, 'channels.update', message.params.data, async (tx) =>\n            state.sign(tx),\n          );\n          return {\n            handler: (_2: Channel, message2: ChannelMessage, state2: ChannelState): ChannelFsm =>\n              awaitingCompletion(this, message2, state2, () => {\n                const params = unpackTx(message2.params.data.state, Tag.SignedTx).encodedTx;\n                if (params.tag !== Tag.ChannelOffChainTx) {\n                  throw new ChannelError(\n                    `Tag should be ${Tag[Tag.ChannelOffChainTx]}, got ${Tag[params.tag]} instead`,\n                  );\n                }\n                const addressKey =\n                  this._options.role === 'initiator' ? 'initiatorId' : 'responderId';\n                const owner = this._options[addressKey];\n                changeState(this, message2.params.data.state);\n                const address = buildContractId(owner, params.round);\n                emit(this, 'newContract', address);\n                state2.resolve({ accepted: true, address, signedTx: message2.params.data.state });\n                return { handler: channelOpen };\n              }),\n            state,\n          };\n        },\n        state: { sign },\n      };\n    });\n  }\n\n  /**\n   * Trigger call a contract update\n   *\n   * The call contract update is calling a preexisting contract inside the channel's\n   * internal state tree. The update is a change to be applied on top of the latest state.\n   *\n   * That would call a contract with the poster being the caller of it. Poster commits\n   * an amount of coins to the contract.\n   *\n   * The call would also create a call object inside the channel state tree. It contains\n   * the result of the contract call.\n   *\n   * It is worth mentioning that the gas is not consumed, because this is an off-chain\n   * contract call. It would be consumed if it were an on-chain one. This could happen\n   * if a call with a similar computation amount is to be forced on-chain.\n   *\n   * @param options - Options\n   * @param sign - Function which verifies and signs contract call transaction\n   * @example\n   * ```js\n   * channel.callContract({\n   *   contract: 'ct_9sRA9AVE4BYTAkh5RNfJYmwQe1NZ4MErasQLXZkFWG43TPBqa',\n   *   callData: 'cb_1111111111111111...',\n   *   amount: 0,\n   *   abiVersion: 1\n   * }).then(({ accepted, signedTx }) => {\n   *   if (accepted) {\n   *     console.log('Contract called succesfully')\n   *   } else {\n   *     console.log('Contract call has been rejected')\n   *   }\n   * })\n   * ```\n   */\n  async callContract(\n    { amount, callData, contract, abiVersion }: CallContractOptions,\n    sign: SignTx,\n  ): Promise<{ accepted: boolean; signedTx: Encoded.Transaction }> {\n    return this.enqueueAction(() => {\n      notify(this, 'channels.update.call_contract', {\n        amount,\n        call_data: callData,\n        contract_id: contract,\n        abi_version: abiVersion,\n      });\n      return {\n        handler: async (\n          _: Channel,\n          message: ChannelMessage,\n          state: ChannelState,\n        ): Promise<ChannelFsm> => {\n          if (message.method !== 'channels.sign.update') {\n            return handleUnexpectedMessage(this, message, state);\n          }\n          await signAndNotify(this, 'channels.update', message.params.data, async (tx) =>\n            state.sign(tx, { updates: message.params.data.updates }),\n          );\n          return {\n            handler: (_2: Channel, message2: ChannelMessage, state2: ChannelState): ChannelFsm =>\n              awaitingCompletion(this, message2, state2, () => {\n                changeState(this, message2.params.data.state);\n                state2.resolve({ accepted: true, signedTx: message2.params.data.state });\n                return { handler: channelOpen };\n              }),\n            state,\n          };\n        },\n        state: { sign },\n      };\n    });\n  }\n\n  /**\n   * Trigger a force progress contract call\n   * This call is going on-chain\n   * @param options - Options\n   * @param sign - Function which verifies and signs contract force progress transaction\n   * @param callbacks - Callbacks\n   * @example\n   * ```js\n   * channel.forceProgress({\n   *   contract: 'ct_9sRA9AVE4BYTAkh5RNfJYmwQe1NZ4MErasQLXZkFWG43TPBqa',\n   *   callData: 'cb_1111111111111111...',\n   *   amount: 0,\n   *   abiVersion: 1,\n   *   gasPrice: 1000005554\n   * }).then(({ accepted, signedTx }) => {\n   *   if (accepted) {\n   *     console.log('Contract force progress call successful')\n   *   } else {\n   *     console.log('Contract force progress call has been rejected')\n   *   }\n   * })\n   * ```\n   */\n  async forceProgress(\n    {\n      amount,\n      callData,\n      contract,\n      abiVersion,\n      gasLimit = 1000000,\n      gasPrice = MIN_GAS_PRICE,\n    }: CallContractOptions & {\n      gasLimit?: number;\n      gasPrice?: number;\n    },\n    sign: SignTx,\n    { onOnChainTx }: Pick<ChannelState, 'onOnChainTx'> = {},\n  ): Promise<{\n    accepted: boolean;\n    signedTx: Encoded.Transaction;\n    tx: Encoded.Transaction | Uint8Array;\n  }> {\n    return this.enqueueAction(() => {\n      notify(this, 'channels.force_progress', {\n        amount,\n        call_data: callData,\n        contract_id: contract,\n        abi_version: abiVersion,\n        gas_price: gasPrice,\n        gas: gasLimit,\n      });\n      return {\n        handler: async (\n          _: Channel,\n          message: ChannelMessage,\n          state: ChannelState,\n        ): Promise<ChannelFsm> => {\n          if (message.method !== 'channels.sign.force_progress_tx') {\n            return handleUnexpectedMessage(this, message, state);\n          }\n          await signAndNotify(\n            this,\n            'channels.force_progress_sign',\n            message.params.data,\n            async (tx) => state.sign(tx, { updates: message.params.data.updates }),\n          );\n          return {\n            handler: (_2: Channel, message2: ChannelMessage, state2: ChannelState): ChannelFsm => {\n              if (message2.method === 'channels.on_chain_tx') {\n                state2.onOnChainTx?.(message2.params.data.tx);\n                emit(this, 'onChainTx', message2.params.data.tx, {\n                  info: message2.params.data.info,\n                  type: message2.params.data.type,\n                });\n                state2.resolve({ accepted: true, tx: message2.params.data.tx });\n                // TODO: shouldn't be unexpected message in this case\n              }\n              return handleUnexpectedMessage(this, message2, state2);\n            },\n            state,\n          };\n        },\n        state: { sign, onOnChainTx },\n      };\n    });\n  }\n\n  /**\n   * Call contract using dry-run\n   *\n   * In order to get the result of a potential contract call, one might need to\n   * dry-run a contract call. It takes the exact same arguments as a call would\n   * and returns the call object.\n   *\n   * The call is executed in the channel's state, but it does not impact the state\n   * whatsoever. It uses as an environment the latest channel's state and the current\n   * top of the blockchain as seen by the node.\n   *\n   * @param options - Options\n   * @example\n   * ```js\n   * channel.callContractStatic({\n   *   contract: 'ct_9sRA9AVE4BYTAkh5RNfJYmwQe1NZ4MErasQLXZkFWG43TPBqa',\n   *   callData: 'cb_1111111111111111...',\n   *   amount: 0,\n   *   abiVersion: 1\n   * }).then(({ returnValue, gasUsed }) => {\n   *   console.log('Returned value:', returnValue)\n   *   console.log('Gas used:', gasUsed)\n   * })\n   * ```\n   */\n  async callContractStatic({\n    amount,\n    callData,\n    contract,\n    abiVersion,\n  }: CallContractOptions): Promise<CallContractResult> {\n    return snakeToPascalObjKeys(\n      await call(this, 'channels.dry_run.call_contract', {\n        amount,\n        call_data: callData,\n        contract_id: contract,\n        abi_version: abiVersion,\n      }),\n    );\n  }\n\n  /**\n   * Get contract call result\n   *\n   * The combination of a caller, contract and a round of execution determines the\n   * contract call. Providing an incorrect set of those results in an error response.\n   *\n   * @param options - Options\n   * @param options.caller - Address of contract caller\n   * @param options.contract - Address of the contract\n   * @param options.round - Round when contract was called\n   * @example\n   * ```js\n   * channel.getContractCall({\n   *   caller: 'ak_Y1NRjHuoc3CGMYMvCmdHSBpJsMDR6Ra2t5zjhRcbtMeXXLpLH',\n   *   contract: 'ct_9sRA9AVE4BYTAkh5RNfJYmwQe1NZ4MErasQLXZkFWG43TPBqa',\n   *   round: 3\n   * }).then(({ returnType, returnValue }) => {\n   *   if (returnType === 'ok') console.log(returnValue)\n   * })\n   * ```\n   */\n  async getContractCall({\n    caller,\n    contract,\n    round,\n  }: {\n    caller: Encoded.AccountAddress;\n    contract: Encoded.ContractAddress;\n    round: number;\n  }): Promise<ContractCallObject> {\n    return snakeToPascalObjKeys(\n      await call(this, 'channels.get.contract_call', {\n        caller_id: caller,\n        contract_id: contract,\n        round,\n      }),\n    );\n  }\n\n  /**\n   * Get the latest contract state\n   *\n   * @param contract - Address of the contract\n   * @example\n   * ```js\n   * channel.getContractState(\n   *   'ct_9sRA9AVE4BYTAkh5RNfJYmwQe1NZ4MErasQLXZkFWG43TPBqa'\n   * ).then(({ contract }) => {\n   *   console.log('deposit:', contract.deposit)\n   * })\n   * ```\n   */\n  async getContractState(\n    contract: Encoded.ContractAddress,\n  ): Promise<{ contract: Contract; contractState: object }> {\n    const result = await call(this, 'channels.get.contract', { pubkey: contract });\n    return snakeToPascalObjKeys({\n      ...result,\n      contract: snakeToPascalObjKeys(result.contract),\n    });\n  }\n\n  /**\n   * Clean up all locally stored contract calls\n   *\n   * Contract calls are kept locally in order for the participant to be able to look them up.\n   * They consume memory and in order for the participant to free it - one can prune all messages.\n   * This cleans up all locally stored contract calls and those will no longer be available for\n   * fetching and inspection.\n   */\n  async cleanContractCalls(): Promise<void> {\n    return this.enqueueAction(() => {\n      notify(this, 'channels.clean_contract_calls');\n      return {\n        handler(_: Channel, message: ChannelMessage, state: ChannelState): ChannelFsm {\n          if (message.method === 'channels.calls_pruned.reply') {\n            state.resolve();\n            return { handler: channelOpen };\n          }\n          state.reject(new UnexpectedChannelMessageError('Unexpected message received'));\n          return { handler: channelClosed };\n        },\n      };\n    });\n  }\n}\n"],"mappings":"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","ignoreList":[]}