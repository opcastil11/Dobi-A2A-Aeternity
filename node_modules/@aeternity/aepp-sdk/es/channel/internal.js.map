{"version":3,"file":"internal.js","names":["default","websocket","JsonBig","pascalToSnake","ChannelCallError","ChannelPingTimedOutError","UnexpectedTsError","UnknownChannelStateError","ChannelIncomingMessageError","ChannelError","buildContractId","ensureError","w3cwebsocket","W3CWebSocket","PING_TIMEOUT_MS","PONG_TIMEOUT_MS","emit","channel","args","eventName","rest","_eventEmitter","enterState","nextState","_debug","handler","name","_fsm","enter","dequeueAction","changeStatus","newStatus","debug","_status","changeState","newState","_state","send","message","method","params","_websocket","stringify","jsonrpc","notify","_isActionQueueLocked","queue","_actionQueue","length","index","findIndex","action","guard","filter","_","i","enqueueAction","promise","Promise","resolve","reject","push","res","state","handleMessage","st","data","updates","op","round","owner","dequeueMessage","_isMessageQueueLocked","_messageQueue","shift","error","disconnect","close","clearTimeout","_pingTimeoutId","ping","setTimeout","onMessage","parse","id","callback","_rpcCallbacks","get","delete","channel_id","_channelId","call","_nextRpcMessageId","set","_message$error$data$","details","result","initialize","connectionHandler","openHandler","url","channelOptions","_options","wsUrl","URL","Object","entries","key","includes","forEach","value","searchParams","toString","assign","onerror","onopen","event","onclose","onmessage"],"sources":["../../src/channel/internal.ts"],"sourcesContent":["import { default as websocket, ICloseEvent } from 'websocket';\nimport BigNumber from 'bignumber.js';\nimport type Channel from './Base.js';\nimport JsonBig from '../utils/json-big.js';\nimport { pascalToSnake } from '../utils/string.js';\nimport { Encoded } from '../utils/encoder.js';\nimport {\n  BaseError,\n  ChannelCallError,\n  ChannelPingTimedOutError,\n  UnexpectedTsError,\n  UnknownChannelStateError,\n  ChannelIncomingMessageError,\n  ChannelError,\n} from '../utils/errors.js';\nimport { buildContractId } from '../tx/builder/helpers.js';\nimport { ensureError } from '../utils/other.js';\n\nconst { w3cwebsocket: W3CWebSocket } = websocket;\n\nexport interface ChannelEvents {\n  statusChanged: (status: ChannelStatus) => void;\n  stateChanged: (tx: Encoded.Transaction | '') => void;\n  depositLocked: () => void;\n  ownDepositLocked: () => void;\n  withdrawLocked: () => void;\n  ownWithdrawLocked: () => void;\n  peerDisconnected: () => void;\n  channelReestablished: () => void;\n  error: (error: Error) => void;\n  onChainTx: (tx: Encoded.Transaction, details: { info: string; type: string }) => void;\n  message: (message: string | Object) => void;\n  newContract: (contractAddress: Encoded.ContractAddress) => void;\n}\n\nexport interface ChannelAction {\n  guard: (channel: Channel, state?: ChannelFsm) => boolean;\n  action: (channel: Channel, state?: ChannelFsm) => ChannelFsm;\n}\n\ninterface SignOptions {\n  updates?: any[];\n  [k: string]: any;\n}\nexport type SignTxWithTag = (\n  tag: string,\n  tx: Encoded.Transaction,\n  options?: SignOptions,\n) => Promise<Encoded.Transaction>;\n// TODO: SignTx shouldn't return number or null\nexport type SignTx = (\n  tx: Encoded.Transaction,\n  options?: SignOptions,\n) => Promise<Encoded.Transaction | number | null>;\n\n/**\n * @see {@link https://github.com/aeternity/protocol/blob/6734de2e4c7cce7e5e626caa8305fb535785131d/node/api/channels_api_usage.md#channel-establishing-parameters}\n */\ninterface CommonChannelOptions {\n  /**\n   * Channel url (for example: \"ws://localhost:3001\")\n   */\n  url: string;\n\n  /**\n   * Initiator's public key\n   */\n  initiatorId: Encoded.AccountAddress;\n  /**\n   * Responder's public key\n   */\n  responderId: Encoded.AccountAddress;\n  /**\n   * Amount of blocks for disputing a solo close\n   */\n  lockPeriod: number;\n  /**\n   * Initial deposit in favour of the responder by the initiator\n   */\n  pushAmount: BigNumber | number;\n  /**\n   * Amount of coins the initiator has committed to the channel\n   */\n  initiatorAmount: BigNumber | number;\n  /**\n   * Amount of coins the responder has committed to the channel\n   */\n  responderAmount: BigNumber | number;\n  /**\n   * The minimum amount both peers need to maintain\n   */\n  channelReserve?: BigNumber | number;\n  /**\n   * Minimum block height to include the channel_create_tx\n   */\n  ttl?: number;\n  /**\n   * The port of the responder's node\n   */\n  port: number;\n  /**\n   * How to calculate minimum depth (default: txfee)\n   */\n  minimumDepthStrategy?: 'txfee' | 'plain';\n  /**\n   * The minimum amount of blocks to be mined\n   */\n  minimumDepth?: number;\n  /**\n   * The fee to be used for the channel open transaction\n   */\n  fee?: BigNumber | number;\n  /**\n   * Used for the fee computation of the channel open transaction\n   */\n  gasPrice?: BigNumber | number;\n\n  signedTx?: Encoded.Transaction;\n  /**\n   * Existing channel id (required if reestablishing a channel)\n   */\n  existingChannelId?: Encoded.Channel;\n  /**\n   * Existing FSM id (required if reestablishing a channel)\n   */\n  existingFsmId?: Encoded.Bytearray;\n  /**\n   * Needs to be provided if reconnecting with calling `leave` before\n   */\n  // TODO: remove after solving https://github.com/aeternity/aeternity/issues/4399\n  reestablish?: boolean;\n  /**\n   * The time waiting for a new event to be initiated (default: 600000)\n   */\n  timeoutIdle?: number;\n  /**\n   * The time waiting for the initiator to produce the create channel transaction after the noise\n   * session had been established (default: 120000)\n   */\n  timeoutFundingCreate?: number;\n  /**\n   * The time frame the other client has to sign an off-chain update after our client had initiated\n   * and signed it. This applies only for double signed on-chain intended updates: channel create\n   * transaction, deposit, withdrawal and etc. (default: 120000)\n   */\n  timeoutFundingSign?: number;\n  /**\n   * The time frame the other client has to confirm an on-chain transaction reaching maturity\n   * (passing minimum depth) after the local node has detected this. This applies only for double\n   * signed on-chain intended updates: channel create transaction, deposit, withdrawal and etc.\n   * (default: 360000)\n   */\n  timeoutFundingLock?: number;\n  /**\n   * The time frame the client has to return a signed off-chain update or to decline it.\n   * This applies for all off-chain updates (default: 500000)\n   */\n  timeoutSign?: number;\n  /**\n   * The time frame the other client has to react to an event. This applies for all off-chain\n   * updates that are not meant to land on-chain, as well as some special cases: opening a noise\n   * connection, mutual closing acknowledgement and reestablishing an existing channel\n   * (default: 120000)\n   */\n  timeoutAccept?: number;\n  /**\n   * the time frame the responder has to accept an incoming noise session.\n   * Applicable only for initiator (default: timeout_accept's value)\n   */\n  timeoutInitialized?: number;\n  /**\n   * The time frame the initiator has to start an outgoing noise session to the responder's node.\n   * Applicable only for responder (default: timeout_idle's value)\n   */\n  timeoutAwaitingOpen?: number;\n  /**\n   * Log websocket communication and state changes\n   */\n  debug?: boolean;\n  /**\n   * Function which verifies and signs transactions\n   */\n  sign: SignTxWithTag;\n}\n\nexport type ChannelOptions = CommonChannelOptions &\n  (\n    | {\n        /**\n         * Participant role\n         */\n        role: 'initiator';\n        /**\n         * Host of the responder's node\n         */\n        host: string;\n      }\n    | {\n        /**\n         * Participant role\n         */\n        role: 'responder';\n      }\n  );\n\nexport interface ChannelHandler extends Function {\n  enter?: Function;\n}\n\nexport interface ChannelState {\n  signedTx: Encoded.Transaction;\n  resolve: (r?: any) => void;\n  reject: (e: BaseError) => void;\n  sign: SignTx;\n  handler?: ChannelHandler;\n  /**\n   * Called when transaction has been posted on chain\n   */\n  onOnChainTx?: (tx: Encoded.Transaction) => void;\n  onOwnWithdrawLocked?: () => void;\n  onWithdrawLocked?: () => void;\n  onOwnDepositLocked?: () => void;\n  onDepositLocked?: () => void;\n  closeTx?: string;\n}\n\nexport interface ChannelFsm {\n  handler: ChannelHandler;\n  state?:\n    | ChannelState\n    | {\n        resolve: Function;\n        reject: Function;\n      };\n}\n\nexport interface ChannelMessage {\n  id?: number;\n  method: string;\n  params: any;\n  payload?: any;\n  data?: any;\n  error?: ChannelMessageError;\n}\n\ninterface ChannelMessageError {\n  code: number;\n  message: string;\n  data: [\n    {\n      message: string;\n      code: number;\n    },\n  ];\n  request: ChannelMessage;\n}\n\n// Send ping message every 10 seconds\nconst PING_TIMEOUT_MS = 10000;\n// Close connection if pong message is not received within 15 seconds\nconst PONG_TIMEOUT_MS = 15000;\n\nexport function emit<E extends keyof ChannelEvents>(\n  channel: Channel,\n  ...args: [E, ...Parameters<ChannelEvents[E]>]\n): void {\n  const [eventName, ...rest] = args;\n  channel._eventEmitter.emit(eventName, ...rest);\n}\n\nfunction enterState(channel: Channel, nextState: ChannelFsm): void {\n  if (nextState == null) {\n    throw new UnknownChannelStateError();\n  }\n  channel._debug('enter state', nextState.handler.name);\n  channel._fsm = nextState;\n  if (nextState?.handler?.enter != null) {\n    nextState.handler.enter(channel);\n  }\n  // eslint-disable-next-line @typescript-eslint/no-use-before-define\n  void dequeueAction(channel);\n}\n\n// TODO: rewrite to enum\nexport type ChannelStatus =\n  | 'connecting'\n  | 'connected'\n  | 'accepted'\n  | 'halfSigned'\n  | 'signed'\n  | 'open'\n  | 'closing'\n  | 'closed'\n  | 'died'\n  | 'disconnected';\n\nexport function changeStatus(channel: Channel, newStatus: ChannelStatus, debug?: unknown): void {\n  channel._debug(newStatus, `(prev. ${channel._status})`, debug ?? '');\n  if (newStatus === channel._status) return;\n  channel._status = newStatus;\n  emit(channel, 'statusChanged', newStatus);\n}\n\nexport function changeState(channel: Channel, newState: Encoded.Transaction | ''): void {\n  channel._state = newState;\n  emit(channel, 'stateChanged', newState);\n}\n\nfunction send(channel: Channel, message: ChannelMessage): void {\n  channel._debug('send message', message.method, message.params);\n  channel._websocket.send(JsonBig.stringify({ jsonrpc: '2.0', ...message }));\n}\n\nexport function notify(channel: Channel, method: string, params: object = {}): void {\n  send(channel, { method, params });\n}\n\nasync function dequeueAction(channel: Channel): Promise<void> {\n  if (channel._isActionQueueLocked) return;\n  const queue = channel._actionQueue;\n  if (queue.length === 0) return;\n  const index = queue.findIndex((action) => action.guard(channel, channel._fsm));\n  if (index === -1) return;\n  channel._actionQueue = queue.filter((_, i) => index !== i);\n  channel._isActionQueueLocked = true;\n  const nextState: ChannelFsm = await queue[index].action(channel, channel._fsm);\n  channel._isActionQueueLocked = false;\n  enterState(channel, nextState);\n}\n\nexport async function enqueueAction(\n  channel: Channel,\n  guard: ChannelAction['guard'],\n  action: () => { handler: ChannelHandler; state?: Partial<ChannelState> },\n): Promise<any> {\n  const promise = new Promise((resolve, reject) => {\n    channel._actionQueue.push({\n      guard,\n      action() {\n        const res = action();\n        return { ...res, state: { ...res.state, resolve, reject } };\n      },\n    });\n  });\n  void dequeueAction(channel);\n  return promise;\n}\n\nasync function handleMessage(channel: Channel, message: ChannelMessage): Promise<void> {\n  const { handler, state: st } = channel._fsm;\n  const nextState = await Promise.resolve(handler(channel, message, st));\n  enterState(channel, nextState);\n  // TODO: emit message and handler name (?) to move this code to Contract constructor\n  if (\n    message?.params?.data?.updates?.[0]?.op === 'OffChainNewContract' &&\n    // if name is channelOpen, the contract was created by other participant\n    nextState?.handler.name === 'channelOpen'\n  ) {\n    const round = channel.round();\n    if (round == null) throw new UnexpectedTsError('Round is null');\n    const owner = message?.params?.data?.updates?.[0]?.owner;\n    emit(channel, 'newContract', buildContractId(owner, round + 1));\n  }\n}\n\nasync function dequeueMessage(channel: Channel): Promise<void> {\n  if (channel._isMessageQueueLocked) return;\n  channel._isMessageQueueLocked = true;\n  while (channel._messageQueue.length > 0) {\n    const message = channel._messageQueue.shift();\n    if (message == null) throw new UnexpectedTsError();\n    try {\n      await handleMessage(channel, message);\n    } catch (error) {\n      ensureError(error);\n      emit(channel, 'error', new ChannelIncomingMessageError(error, message));\n    }\n  }\n  channel._isMessageQueueLocked = false;\n}\n\nexport function disconnect(channel: Channel): void {\n  channel._websocket.close();\n  clearTimeout(channel._pingTimeoutId);\n}\n\nfunction ping(channel: Channel): void {\n  clearTimeout(channel._pingTimeoutId);\n  channel._pingTimeoutId = setTimeout(() => {\n    notify(channel, 'channels.system', { action: 'ping' });\n    channel._pingTimeoutId = setTimeout(() => {\n      disconnect(channel);\n      emit(channel, 'error', new ChannelPingTimedOutError());\n    }, PONG_TIMEOUT_MS);\n  }, PING_TIMEOUT_MS);\n}\n\nfunction onMessage(channel: Channel, data: string): void {\n  const message = JsonBig.parse(data);\n  channel._debug('received message', message.method, message.params);\n  if (message.id != null) {\n    const callback = channel._rpcCallbacks.get(message.id);\n    if (callback == null) {\n      emit(channel, 'error', new ChannelError(`Can't find callback by id: ${message.id}`));\n      return;\n    }\n    try {\n      callback(message);\n    } finally {\n      channel._rpcCallbacks.delete(message.id);\n    }\n    return;\n  }\n  if (message.method === 'channels.message') {\n    emit(channel, 'message', message.params.data.message);\n    return;\n  }\n  if (message.method === 'channels.system.pong') {\n    if (message.params.channel_id === channel._channelId || channel._channelId == null) {\n      ping(channel);\n    }\n    return;\n  }\n  channel._messageQueue.push(message);\n  void dequeueMessage(channel);\n}\n\nexport async function call(channel: Channel, method: string, params: any): Promise<any> {\n  return new Promise((resolve, reject) => {\n    const id = channel._nextRpcMessageId;\n    channel._nextRpcMessageId += 1;\n    channel._rpcCallbacks.set(\n      id,\n      (message: { result: PromiseLike<any>; error?: ChannelMessageError }) => {\n        if (message.error != null) {\n          const details = message.error.data[0].message ?? '';\n          reject(new ChannelCallError(message.error.message + details));\n        } else resolve(message.result);\n      },\n    );\n    send(channel, { method, id, params });\n  });\n}\n\nexport async function initialize(\n  channel: Channel,\n  connectionHandler: Function,\n  openHandler: Function,\n  { url, ...channelOptions }: ChannelOptions,\n): Promise<void> {\n  channel._options = { url, ...channelOptions };\n\n  const wsUrl = new URL(url);\n  Object.entries(channelOptions)\n    .filter(([key]) => !['sign', 'debug'].includes(key))\n    .forEach(([key, value]) => wsUrl.searchParams.set(pascalToSnake(key), value.toString()));\n  wsUrl.searchParams.set('protocol', 'json-rpc');\n  changeStatus(channel, 'connecting');\n  channel._websocket = new W3CWebSocket(wsUrl.toString());\n  await new Promise<void>((resolve, reject) => {\n    Object.assign(channel._websocket, {\n      onerror: reject,\n      onopen: async (event: Event) => {\n        resolve();\n        changeStatus(channel, 'connected', event);\n        enterState(channel, { handler: connectionHandler });\n        ping(channel);\n      },\n      onclose: (event: ICloseEvent) => {\n        changeStatus(channel, 'disconnected', event);\n        clearTimeout(channel._pingTimeoutId);\n      },\n      onmessage: ({ data }: { data: string }) => onMessage(channel, data),\n    });\n  });\n}\n"],"mappings":"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","ignoreList":[]}