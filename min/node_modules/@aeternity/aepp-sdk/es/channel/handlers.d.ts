import { ChannelState, ChannelMessage, ChannelFsm, SignTx } from './internal.js';
import { Encoded } from '../utils/encoder.js';
import type Channel from './Base.js';
export declare function appendSignature(tx: Encoded.Transaction, signFn: SignTx): Promise<Encoded.Transaction | number | null>;
export declare function signAndNotify(channel: Channel, method: string, data: {
    tx?: Encoded.Transaction;
    signed_tx?: Encoded.Transaction;
}, signFn: SignTx): Promise<boolean>;
export declare function handleUnexpectedMessage(_channel: Channel, message: ChannelMessage, state: ChannelState): ChannelFsm;
export declare function awaitingCompletion(channel: Channel, message: ChannelMessage, state: ChannelState, onSuccess?: typeof handleUnexpectedMessage): ChannelFsm;
export declare function awaitingConnection(channel: Channel, message: ChannelMessage): ChannelFsm | undefined;
export declare function awaitingReestablish(channel: Channel, message: ChannelMessage, state: ChannelState): Promise<ChannelFsm>;
export declare function awaitingReconnection(channel: Channel, message: ChannelMessage, state: ChannelState): Promise<ChannelFsm>;
export declare function awaitingChannelCreateTx(channel: Channel, message: ChannelMessage): Promise<ChannelFsm | undefined>;
export declare function awaitingOnChainTx(channel: Channel, message: ChannelMessage): ChannelFsm | undefined;
export declare function channelOpen(channel: Channel, message: ChannelMessage, state: ChannelState): Promise<ChannelFsm | undefined>;
export declare namespace channelOpen {
    var enter: (channel: Channel) => void;
}
export declare function awaitingShutdownTx(channel: Channel, message: ChannelMessage, state: ChannelState): Promise<ChannelFsm>;
export declare function awaitingLeave(channel: Channel, message: ChannelMessage, state: ChannelState): ChannelFsm;
export declare function channelClosed(_channel: Channel, message: ChannelMessage, state: ChannelState): ChannelFsm;
