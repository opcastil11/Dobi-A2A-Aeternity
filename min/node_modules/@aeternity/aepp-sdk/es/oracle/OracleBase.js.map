{"version":3,"file":"OracleBase.js","names":["decode","decodeQuery","queryEntry","id","decodedQuery","query","toString","decodedResponse","response","OracleBase","constructor","address","options","getState","opt","onNode","getOracleByPubkey","getQueries","getOracleQueriesByPubkey","oracleQueries","map","getQuery","queryId","getOracleQueryByPubkeyAndQueryId"],"sources":["../../src/oracle/OracleBase.ts"],"sourcesContent":["import { decode, Encoded } from '../utils/encoder.js';\nimport Node from '../Node.js';\n\n/**\n * @category oracle\n */\ntype OracleQueryNode = Awaited<ReturnType<Node['getOracleQueryByPubkeyAndQueryId']>>;\n\n/**\n * @category oracle\n */\nexport interface OracleQuery extends OracleQueryNode {\n  // TODO: type should be corrected in node api\n  id: Encoded.OracleQueryId;\n  decodedQuery: string;\n  decodedResponse: string;\n}\n\nfunction decodeQuery(queryEntry: OracleQueryNode): OracleQuery {\n  return {\n    ...queryEntry,\n    id: queryEntry.id as Encoded.OracleQueryId,\n    decodedQuery: decode(queryEntry.query as Encoded.OracleQuery).toString(),\n    decodedResponse: decode(queryEntry.response as Encoded.OracleResponse).toString(),\n  };\n}\n\n/**\n * This class is needed because `getOracleQuery` would return different values depending on the\n * oracle type.\n * @category oracle\n */\nexport default class OracleBase {\n  /**\n   * @param address - Oracle public key\n   */\n  constructor(\n    public readonly address: Encoded.OracleAddress,\n    public options: { onNode: Node },\n  ) {}\n\n  /**\n   * Get oracle entry from the node\n   * @param options - Options object\n   */\n  async getState(options: { onNode?: Node } = {}): ReturnType<Node['getOracleByPubkey']> {\n    const opt = { ...this.options, ...options };\n    return opt.onNode.getOracleByPubkey(this.address);\n  }\n\n  /**\n   * Get oracle queries from the node\n   * @param options - Options object\n   */\n  async getQueries(options: { onNode?: Node } = {}): Promise<OracleQuery[]> {\n    const opt = { ...this.options, ...options };\n    return (await opt.onNode.getOracleQueriesByPubkey(this.address)).oracleQueries.map(decodeQuery);\n  }\n\n  /**\n   * Get oracle query entry from the node\n   * @param queryId - Oracle query ID\n   * @param options - Options object\n   */\n  async getQuery(\n    queryId: Encoded.OracleQueryId,\n    options: { onNode?: Node } = {},\n  ): Promise<OracleQuery> {\n    const { onNode } = { ...this.options, ...options };\n    const queryEntry = await onNode.getOracleQueryByPubkeyAndQueryId(this.address, queryId);\n    return decodeQuery(queryEntry);\n  }\n}\n"],"mappings":"AAAA,SAASA,MAAM,QAAiB,qBAAqB;;AAGrD;AACA;AACA;;AAGA;AACA;AACA;;AAQA,SAASC,WAAWA,CAACC,UAA2B,EAAe;EAC7D,OAAO;IACL,GAAGA,UAAU;IACbC,EAAE,EAAED,UAAU,CAACC,EAA2B;IAC1CC,YAAY,EAAEJ,MAAM,CAACE,UAAU,CAACG,KAA4B,CAAC,CAACC,QAAQ,CAAC,CAAC;IACxEC,eAAe,EAAEP,MAAM,CAACE,UAAU,CAACM,QAAkC,CAAC,CAACF,QAAQ,CAAC;EAClF,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAMG,UAAU,CAAC;EAC9B;AACF;AACA;EACEC,WAAWA,CACOC,OAA8B,EACvCC,OAAyB,EAChC;IAAA,KAFgBD,OAA8B,GAA9BA,OAA8B;IAAA,KACvCC,OAAyB,GAAzBA,OAAyB;EAC/B;;EAEH;AACF;AACA;AACA;EACE,MAAMC,QAAQA,CAACD,OAA0B,GAAG,CAAC,CAAC,EAAyC;IACrF,MAAME,GAAG,GAAG;MAAE,GAAG,IAAI,CAACF,OAAO;MAAE,GAAGA;IAAQ,CAAC;IAC3C,OAAOE,GAAG,CAACC,MAAM,CAACC,iBAAiB,CAAC,IAAI,CAACL,OAAO,CAAC;EACnD;;EAEA;AACF;AACA;AACA;EACE,MAAMM,UAAUA,CAACL,OAA0B,GAAG,CAAC,CAAC,EAA0B;IACxE,MAAME,GAAG,GAAG;MAAE,GAAG,IAAI,CAACF,OAAO;MAAE,GAAGA;IAAQ,CAAC;IAC3C,OAAO,CAAC,MAAME,GAAG,CAACC,MAAM,CAACG,wBAAwB,CAAC,IAAI,CAACP,OAAO,CAAC,EAAEQ,aAAa,CAACC,GAAG,CAACnB,WAAW,CAAC;EACjG;;EAEA;AACF;AACA;AACA;AACA;EACE,MAAMoB,QAAQA,CACZC,OAA8B,EAC9BV,OAA0B,GAAG,CAAC,CAAC,EACT;IACtB,MAAM;MAAEG;IAAO,CAAC,GAAG;MAAE,GAAG,IAAI,CAACH,OAAO;MAAE,GAAGA;IAAQ,CAAC;IAClD,MAAMV,UAAU,GAAG,MAAMa,MAAM,CAACQ,gCAAgC,CAAC,IAAI,CAACZ,OAAO,EAAEW,OAAO,CAAC;IACvF,OAAOrB,WAAW,CAACC,UAAU,CAAC;EAChC;AACF","ignoreList":[]}