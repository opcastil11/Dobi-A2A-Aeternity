{"version":3,"file":"common.js","names":["decode","rlpDecode","encode","rlpEncode","ArgumentError","DecodeError","SchemaNotFoundError","InternalError","getSchema","schemas","Tag","tag","version","subSchemas","filter","s","constValue","length","defaultSchema","find","schema","constValueOptional","Object","entries","packRecord","params","extraParams","encoding","binary","map","key","field","serialize","unpackRecord","encodedRecord","expectedTag","ArrayBuffer","isView","_Buffer","from","readUintBE","fromEntries","name","index","deserialize"],"sources":["../../../src/tx/builder/common.ts"],"sourcesContent":["import { decode as rlpDecode, encode as rlpEncode } from 'rlp';\nimport { Field, BinaryData } from './field-types/interface.js';\nimport {\n  ArgumentError,\n  DecodeError,\n  SchemaNotFoundError,\n  InternalError,\n} from '../../utils/errors.js';\nimport { Encoding, Encoded, encode, decode } from '../../utils/encoder.js';\n\ntype Schemas = ReadonlyArray<{\n  tag: { constValue: number } & Field;\n  version: { constValue: number; constValueOptional: boolean } & Field;\n}>;\n\nexport function getSchema(\n  schemas: Schemas,\n  Tag: { [key: number]: string },\n  tag: number,\n  version: number | undefined,\n): Array<[string, Field]> {\n  const subSchemas = schemas.filter((s) => s.tag.constValue === tag);\n  if (subSchemas.length === 0) throw new SchemaNotFoundError(`${Tag[tag]} (${tag})`, 0);\n  if (version == null) {\n    const defaultSchema = subSchemas.find((schema) => schema.version.constValueOptional);\n    if (defaultSchema == null)\n      throw new InternalError(`Can't find default schema of ${Tag[tag]} (${tag})`);\n    version = defaultSchema.version.constValue;\n  }\n  const schema = subSchemas.find((s) => s.version.constValue === version);\n  if (schema == null) throw new SchemaNotFoundError(`${Tag[tag]} (${tag})`, version);\n  return Object.entries(schema);\n}\n\nexport function packRecord<E extends Encoding>(\n  schemas: Schemas,\n  Tag: { [key: number]: string },\n  params: {\n    tag: number;\n    version?: number;\n    [k: string]: unknown;\n  },\n  extraParams: { [k: string]: unknown },\n  encoding: E,\n): Encoded.Generic<E> {\n  const schema = getSchema(schemas, Tag, params.tag, params.version);\n  const binary = schema.map(([key, field]) =>\n    field.serialize(params[key], { ...params, ...extraParams }, params),\n  );\n  return encode(rlpEncode(binary), encoding);\n}\n\nexport function unpackRecord(\n  schemas: Schemas,\n  Tag: { [key: number]: string },\n  encodedRecord: Encoded.Any,\n  expectedTag: number | undefined,\n  extraParams: { [k: string]: unknown },\n): unknown {\n  const binary = rlpDecode(decode(encodedRecord));\n  if (!ArrayBuffer.isView(binary[0]) || !ArrayBuffer.isView(binary[1])) {\n    throw new DecodeError(\"Can't parse tag or version in provided RLP\");\n  }\n  const tag = Buffer.from(binary[0]).readUintBE(0, binary[0].length);\n  const version = Buffer.from(binary[1]).readUintBE(0, binary[1].length);\n  const schema = getSchema(schemas, Tag, tag, version);\n  if (expectedTag != null && expectedTag !== tag) {\n    throw new DecodeError(`Expected ${Tag[expectedTag]} tag, got ${Tag[tag]} instead`);\n  }\n  if (binary.length !== schema.length) {\n    throw new ArgumentError('RLP length', schema.length, binary.length);\n  }\n  return Object.fromEntries(\n    schema.map(([name, field], index) => [\n      name,\n      field.deserialize(binary[index] as BinaryData, extraParams),\n    ]),\n  );\n}\n"],"mappings":"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","ignoreList":[]}