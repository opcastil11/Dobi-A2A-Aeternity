{"version":3,"file":"SchemaTypes.js","names":[],"sources":["../../../src/tx/builder/SchemaTypes.ts"],"sourcesContent":["import { Field as OriginalField } from './field-types/interface.js';\nimport { UnionToIntersection } from '../../utils/other.js';\n\n// TODO: figure out why this override is necessary\nexport interface Field extends OriginalField {\n  serialize: (...args: any[]) => any;\n}\n\ntype NullablePartial<\n  T,\n  NK extends keyof T = { [K in keyof T]: undefined extends T[K] ? K : never }[keyof T],\n> = Partial<Pick<T, NK>> & Omit<T, NK>;\n\ntype Or<A, B> = A extends undefined ? B : A;\n\ntype TxParamsBySchemaInternal<SchemaItem> = {\n  -readonly [key in keyof SchemaItem]: SchemaItem[key] extends Field\n    ? Parameters<SchemaItem[key]['serialize']>[0]\n    : never;\n};\n\ntype TxParamsBySchemaInternalParams<\n  SchemaItem,\n  SchemaItemValues = SchemaItem[keyof SchemaItem],\n> = UnionToIntersection<\n  SchemaItemValues extends Field ? Or<Parameters<SchemaItemValues['serialize']>[2], {}> : never\n>;\n\ntype PickIsRec<SchemaItem, Recursive extends boolean> = {\n  [Key in keyof SchemaItem as SchemaItem[Key] extends Field & { recursiveType: true }\n    ? Recursive extends true\n      ? Key\n      : never\n    : Recursive extends true\n      ? never\n      : Key]: SchemaItem[Key];\n};\n\ntype TxParamsBySchema<SchemaItem> = SchemaItem extends Object\n  ? TxParamsBySchemaInternal<PickIsRec<SchemaItem, true>> &\n      NullablePartial<TxParamsBySchemaInternal<PickIsRec<SchemaItem, false>>> &\n      TxParamsBySchemaInternalParams<PickIsRec<SchemaItem, false>>\n  : never;\n\ntype TxParamsAsyncBySchemaInternal<SchemaItem> = {\n  -readonly [key in keyof SchemaItem]: SchemaItem[key] extends Field & { prepare: Function }\n    ? Parameters<SchemaItem[key]['prepare']>[0]\n    : SchemaItem[key] extends Field\n      ? Parameters<SchemaItem[key]['serialize']>[0]\n      : never;\n};\n\ntype TxParamsAsyncBySchemaInternalParams<\n  SchemaItem,\n  SchemaItemValues = SchemaItem[keyof SchemaItem],\n> = UnionToIntersection<\n  SchemaItemValues extends Field & { prepare: Function }\n    ? Or<Parameters<SchemaItemValues['prepare']>[2], {}>\n    : {}\n>;\n\ntype TxParamsAsyncBySchema<SchemaItem> = SchemaItem extends Object\n  ? TxParamsAsyncBySchemaInternal<PickIsRec<SchemaItem, true>> &\n      NullablePartial<TxParamsAsyncBySchemaInternal<PickIsRec<SchemaItem, false>>> &\n      TxParamsAsyncBySchemaInternalParams<PickIsRec<SchemaItem, false>> &\n      TxParamsBySchemaInternalParams<PickIsRec<SchemaItem, false>>\n  : never;\n\ntype TxUnpackedBySchema<SchemaItem> = {\n  -readonly [key in keyof SchemaItem]: SchemaItem[key] extends Field\n    ? ReturnType<SchemaItem[key]['deserialize']>\n    : never;\n};\n\nexport default interface SchemaTypes<Schema extends readonly any[], SchemaItems = Schema[number]> {\n  TxParams: TxParamsBySchema<SchemaItems>;\n  TxParamsAsync: TxParamsAsyncBySchema<SchemaItems>;\n  TxUnpacked: TxUnpackedBySchema<SchemaItems>;\n}\n"],"mappings":"","ignoreList":[]}