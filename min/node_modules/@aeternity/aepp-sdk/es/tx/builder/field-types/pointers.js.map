{"version":3,"file":"pointers.js","names":["toBytes","Encoding","decode","encode","isEncoded","IllegalArgumentError","DecodeError","ArgumentError","address","idTagToEncoding","ID_TAG","_Buffer","from","DATA_TAG","DATA_LENGTH_MAX","addressAny","allowRaw","serialize","pointers","length","map","key","id","payload","Bytearray","data","concat","deserialize","bKey","bId","toString","tag","subarray","equals"],"sources":["../../../../src/tx/builder/field-types/pointers.ts"],"sourcesContent":["import { NamePointer as NamePointerString } from '../../../apis/node/index.js';\nimport { toBytes } from '../../../utils/bytes.js';\nimport { Encoded, Encoding, decode, encode } from '../../../utils/encoder.js';\nimport { isEncoded } from '../../../utils/crypto.js';\nimport { IllegalArgumentError, DecodeError, ArgumentError } from '../../../utils/errors.js';\nimport address, { AddressEncodings, idTagToEncoding } from './address.js';\n\nconst ID_TAG = Buffer.from([1]);\nconst DATA_TAG = Buffer.from([2]);\nconst DATA_LENGTH_MAX = 1024;\nconst addressAny = address(...idTagToEncoding);\n\n// TODO: remove after fixing node types\ntype NamePointer = NamePointerString & {\n  id: Encoded.Generic<AddressEncodings>;\n};\ntype NamePointerRaw = NamePointerString & {\n  id: Encoded.Generic<AddressEncodings | Encoding.Bytearray>;\n};\n\nexport default <AllowRaw extends boolean>(\n  allowRaw: AllowRaw,\n): {\n  serialize: (pointers: Array<AllowRaw extends true ? NamePointerRaw : NamePointer>) => Buffer[][];\n  deserialize: (\n    pointers: Array<[key: Buffer, id: Buffer]>,\n  ) => Array<AllowRaw extends true ? NamePointerRaw : NamePointer>;\n} => ({\n  /**\n   * Helper function to build pointers for name update TX\n   * @param pointers - Array of pointers\n   * `([ { key: 'account_pubkey', id: 'ak_32klj5j23k23j5423l434l2j3423'} ])`\n   * @returns Serialized pointers array\n   */\n  serialize(pointers) {\n    if (pointers.length > 32) {\n      throw new IllegalArgumentError(\n        `Expected 32 pointers or less, got ${pointers.length} instead`,\n      );\n    }\n    return pointers.map(({ key, id }) => {\n      let payload;\n      if (isEncoded(id, ...idTagToEncoding)) {\n        payload = [...(allowRaw ? [ID_TAG] : []), addressAny.serialize(id)];\n      }\n      if (isEncoded(id, Encoding.Bytearray)) {\n        const data = decode(id);\n        if (data.length > DATA_LENGTH_MAX) {\n          throw new ArgumentError(\n            'Raw pointer',\n            `shorter than ${DATA_LENGTH_MAX + 1} bytes`,\n            `${data.length} bytes`,\n          );\n        }\n        payload = [DATA_TAG, data];\n      }\n      if (payload == null) throw new DecodeError(`Unknown AENS pointer value: ${id}`);\n      return [toBytes(key), Buffer.concat(payload)];\n    });\n  },\n\n  /**\n   * Helper function to read pointers from name update TX\n   * @param pointers - Array of pointers\n   * @returns Deserialize pointer array\n   */\n  deserialize(pointers) {\n    return pointers.map(([bKey, bId]) => {\n      if (!allowRaw) return { key: bKey.toString(), id: addressAny.deserialize(bId) };\n      const tag = bId.subarray(0, 1);\n      const payload = bId.subarray(1);\n      let id;\n      if (tag.equals(ID_TAG)) id = addressAny.deserialize(payload);\n      // TS can't figure out the real type depending on allowRaw\n      if (tag.equals(DATA_TAG)) id = encode(payload, Encoding.Bytearray) as Encoded.AccountAddress;\n      if (id == null) throw new DecodeError(`Unknown AENS pointer tag: ${tag}`);\n      return { key: bKey.toString(), id };\n    });\n  },\n});\n"],"mappings":"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","ignoreList":[]}