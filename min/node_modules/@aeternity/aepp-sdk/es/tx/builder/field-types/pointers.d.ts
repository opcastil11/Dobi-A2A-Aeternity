import { NamePointer as NamePointerString } from '../../../apis/node/index.js';
import { Encoded, Encoding } from '../../../utils/encoder.js';
import { AddressEncodings } from './address.js';
type NamePointer = NamePointerString & {
    id: Encoded.Generic<AddressEncodings>;
};
type NamePointerRaw = NamePointerString & {
    id: Encoded.Generic<AddressEncodings | Encoding.Bytearray>;
};
declare const _default: <AllowRaw extends boolean>(allowRaw: AllowRaw) => {
    serialize: (pointers: Array<AllowRaw extends true ? NamePointerRaw : NamePointer>) => Buffer[][];
    deserialize: (pointers: Array<[key: Buffer, id: Buffer]>) => Array<AllowRaw extends true ? NamePointerRaw : NamePointer>;
};
export default _default;
