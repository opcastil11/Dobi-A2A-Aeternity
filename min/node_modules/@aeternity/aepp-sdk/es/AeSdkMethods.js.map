{"version":3,"file":"AeSdkMethods.js","names":["chainMethods","sendTransaction","spendMethods","contractGaMethods","buildTxAsync","mapObject","wrapWithProxy","methods","_wrappedOptions","WeakMap","AeSdkMethods","constructor","options","_defineProperty","_classPrivateFieldInitSpec","Object","assign","_options","_classPrivateFieldSet","onAccount","onNode","onCompiler","getContext","mergeWith","_classPrivateFieldGet","buildTx","prototype","name","handler","methodWrapper","args","length","AeSdkMethodsTyped"],"sources":["../src/AeSdkMethods.ts"],"sourcesContent":["import * as chainMethods from './chain.js';\nimport { sendTransaction } from './send-transaction.js';\nimport * as spendMethods from './spend.js';\nimport * as contractGaMethods from './contract/ga.js';\nimport { buildTxAsync } from './tx/builder/index.js';\nimport { mapObject, UnionToIntersection } from './utils/other.js';\nimport { wrapWithProxy } from './utils/wrap-proxy.js';\nimport Node from './Node.js';\nimport { TxParamsAsync } from './tx/builder/schema.generated.js';\nimport AccountBase from './account/Base.js';\nimport { Encoded } from './utils/encoder.js';\nimport CompilerBase from './contract/compiler/Base.js';\n\nexport type OnAccount = Encoded.AccountAddress | AccountBase | undefined;\n\nconst methods = {\n  ...chainMethods,\n  sendTransaction,\n  ...spendMethods,\n  ...contractGaMethods,\n} as const;\n\ntype Decrement<Number extends number> = [-1, 0, 1, 2, 3, 4, 5][Number];\ntype GetMethodsOptions<Methods extends { [key: string]: Function }> = {\n  [Name in keyof Methods]: Methods[Name] extends (...args: infer Args) => any\n    ? Args[Decrement<Args['length']>]\n    : never;\n};\ntype MethodsOptions = GetMethodsOptions<typeof methods>;\nexport interface AeSdkMethodsOptions\n  extends Partial<UnionToIntersection<MethodsOptions[keyof MethodsOptions]>> {}\n\nexport interface WrappedOptions {\n  onAccount: AccountBase;\n  onCompiler: CompilerBase;\n  onNode: Node;\n}\n\n/**\n * AeSdkMethods is the composition of:\n * - chain methods\n * - tx methods\n * - aens methods\n * - spend methods\n * - oracle methods\n * - contract methods\n * - contract ga methods\n *\n * While these methods can be used separately, this class provides a handy way to store\n * their context (current account, network, and compiler to use).\n */\nclass AeSdkMethods {\n  _options: AeSdkMethodsOptions = {};\n\n  readonly #wrappedOptions: WrappedOptions;\n\n  /**\n   * @param options - Options\n   */\n  constructor(options: AeSdkMethodsOptions = {}) {\n    Object.assign(this._options, options);\n    this.#wrappedOptions = {\n      onAccount: wrapWithProxy(() => this._options.onAccount),\n      onNode: wrapWithProxy(() => this._options.onNode),\n      onCompiler: wrapWithProxy(() => this._options.onCompiler),\n    };\n  }\n\n  /**\n   * Returns sdk instance options with references to current account, node, compiler.\n   * Used to create an instance (Contract, Oracle) bound to AeSdk state.\n   * @param mergeWith - Merge context with these extra options\n   * @returns Context object\n   */\n  getContext(mergeWith: AeSdkMethodsOptions = {}): AeSdkMethodsOptions & WrappedOptions {\n    return {\n      ...this._options,\n      ...this.#wrappedOptions,\n      ...mergeWith,\n    };\n  }\n\n  // TODO: omit onNode from options, because it is already in context\n  async buildTx(options: TxParamsAsync): Promise<Encoded.Transaction> {\n    // TODO: remove `any` at the same time as AeSdk class\n    return buildTxAsync({ ...(this.getContext() as any), ...options });\n  }\n}\n\ntype RequiredKeys<T> = {\n  [K in keyof T]-?: {} extends Pick<T, K> ? never : K;\n}[keyof T];\n\ntype OptionalIfNotRequired<T extends [any]> = RequiredKeys<T[0]> extends never ? T | [] : T;\n\ntype ReplaceOnAccount<Options> = Options extends { onAccount: any }\n  ? Omit<Options, 'onAccount'> & {\n      /**\n       * Make operation on specific account by providing address (to use account from sdk) or instance\n       * of AccountBase (like AccountMemory)\n       */\n      onAccount: OnAccount;\n    }\n  : Options;\n\ntype MakeOptional<Options> = OptionalIfNotRequired<\n  [Omit<Options, 'onNode' | 'onCompiler' | 'onAccount'> & Partial<ReplaceOnAccount<Options>>]\n>;\n\ntype TransformMethods<Methods extends { [key: string]: Function }> = {\n  [Name in keyof Methods]: Methods[Name] extends (\n    ...args: [...infer Args, infer Options]\n  ) => infer Ret\n    ? (...args: [...Args, ...MakeOptional<Options>]) => Ret\n    : never;\n};\n\ninterface AeSdkMethodsTransformed extends TransformMethods<typeof methods> {}\n\nObject.assign(\n  AeSdkMethods.prototype,\n  mapObject<Function, Function>(methods, ([name, handler]) => [\n    name,\n    function methodWrapper(this: AeSdkMethods, ...args: any[]) {\n      args.length = handler.length;\n      const options = args[args.length - 1];\n      args[args.length - 1] = this.getContext(options);\n      return handler(...args);\n    },\n  ]),\n);\n\ntype AeSdkMethodsTyped = AeSdkMethods & AeSdkMethodsTransformed;\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst AeSdkMethodsTyped = AeSdkMethods as new (options?: AeSdkMethodsOptions) => AeSdkMethodsTyped;\nexport default AeSdkMethodsTyped;\n"],"mappings":";;;;;;AAAA,OAAO,KAAKA,YAAY,MAAM,YAAY;AAC1C,SAASC,eAAe,QAAQ,uBAAuB;AACvD,OAAO,KAAKC,YAAY,MAAM,YAAY;AAC1C,OAAO,KAAKC,iBAAiB,MAAM,kBAAkB;AACrD,SAASC,YAAY,QAAQ,uBAAuB;AACpD,SAASC,SAAS,QAA6B,kBAAkB;AACjE,SAASC,aAAa,QAAQ,uBAAuB;AASrD,MAAMC,OAAO,GAAG;EACd,GAAGP,YAAY;EACfC,eAAe;EACf,GAAGC,YAAY;EACf,GAAGC;AACL,CAAU;AAAC,IAAAK,eAAA,oBAAAC,OAAA;AAkBX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,YAAY,CAAC;EAKjB;AACF;AACA;EACEC,WAAWA,CAACC,OAA4B,GAAG,CAAC,CAAC,EAAE;IAAAC,eAAA,mBAPf,CAAC,CAAC;IAElCC,0BAAA,OAASN,eAAe;IAMtBO,MAAM,CAACC,MAAM,CAAC,IAAI,CAACC,QAAQ,EAAEL,OAAO,CAAC;IACrCM,qBAAA,CAAKV,eAAe,EAApB,IAAI,EAAmB;MACrBW,SAAS,EAAEb,aAAa,CAAC,MAAM,IAAI,CAACW,QAAQ,CAACE,SAAS,CAAC;MACvDC,MAAM,EAAEd,aAAa,CAAC,MAAM,IAAI,CAACW,QAAQ,CAACG,MAAM,CAAC;MACjDC,UAAU,EAAEf,aAAa,CAAC,MAAM,IAAI,CAACW,QAAQ,CAACI,UAAU;IAC1D,CAJmB,CAAC;EAKtB;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEC,UAAUA,CAACC,SAA8B,GAAG,CAAC,CAAC,EAAwC;IACpF,OAAO;MACL,GAAG,IAAI,CAACN,QAAQ;MAChB,GAAGO,qBAAA,CAAKhB,eAAe,EAApB,IAAmB,CAAC;MACvB,GAAGe;IACL,CAAC;EACH;;EAEA;EACA,MAAME,OAAOA,CAACb,OAAsB,EAAgC;IAClE;IACA,OAAOR,YAAY,CAAC;MAAE,GAAI,IAAI,CAACkB,UAAU,CAAC,CAAS;MAAE,GAAGV;IAAQ,CAAC,CAAC;EACpE;AACF;AAgCAG,MAAM,CAACC,MAAM,CACXN,YAAY,CAACgB,SAAS,EACtBrB,SAAS,CAAqBE,OAAO,EAAE,CAAC,CAACoB,IAAI,EAAEC,OAAO,CAAC,KAAK,CAC1DD,IAAI,EACJ,SAASE,aAAaA,CAAqB,GAAGC,IAAW,EAAE;EACzDA,IAAI,CAACC,MAAM,GAAGH,OAAO,CAACG,MAAM;EAC5B,MAAMnB,OAAO,GAAGkB,IAAI,CAACA,IAAI,CAACC,MAAM,GAAG,CAAC,CAAC;EACrCD,IAAI,CAACA,IAAI,CAACC,MAAM,GAAG,CAAC,CAAC,GAAG,IAAI,CAACT,UAAU,CAACV,OAAO,CAAC;EAChD,OAAOgB,OAAO,CAAC,GAAGE,IAAI,CAAC;AACzB,CAAC,CACF,CACH,CAAC;AAGD;AACA,MAAME,iBAAiB,GAAGtB,YAAwE;AAClG,eAAesB,iBAAiB","ignoreList":[]}