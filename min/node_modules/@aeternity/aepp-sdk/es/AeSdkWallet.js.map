{"version":3,"file":"AeSdkWallet.js","names":["nacl","AeSdk","verifyTransaction","RpcClient","METHODS","RPC_STATUS","SUBSCRIPTION_TYPES","RpcInvalidTransactionError","RpcNotAuthorizeError","RpcPermissionDenyError","RpcUnsupportedProtocolError","InternalError","UnknownRpcClientError","RPC_VERSION","Encoding","encode","decode","jsonBig","AeSdkWallet","constructor","name","id","type","onConnection","onSubscription","onDisconnect","onAskAccounts","onAskToSelectNetwork","options","_defineProperty","Map","_type","_getAccountsForClient","addressSubscription","current","connected","getAccounts","has","_pushAccountsToApps","_clients","Array","from","keys","filter","clientId","_isRpcClientConnected","map","_getClient","client","size","forEach","rpc","notify","updateAddress","selectAccount","address","addAccount","account","_getNode","ensureNodeConnected","node","url","api","$host","selectedNodeName","selectNode","networkId","getNetworkId","updateNetwork","connectNode","get","CONNECTED","status","connection","isConnected","_disconnectRpcClient","disconnect","DISCONNECTED","Set","removeRpcClient","delete","addRpcClient","clientConnection","_Buffer","randomBytes","toString","disconnectParams","WAITING_FOR_CONNECTION_REQUEST","closeConnection","params","connect","version","icons","origin","getWalletInfo","subscribeAddress","value","subscribe","add","unsubscribe","subscription","addresses","sign","tx","onAccount","returnSigned","innerTx","includes","parameters","aeppOrigin","aeppRpcClientId","signedTransaction","signTransaction","parse","stringify","transactionHash","sendTransaction","verify","error","validation","length","signMessage","message","signature","signTypedData","domain","aci","data","unsafeSign","Signature","signDelegation","delegation","set","shareWalletInfo","readyToConnect","window","location","selectedAddress","a","reduce","acc"],"sources":["../src/AeSdkWallet.ts"],"sourcesContent":["import nacl from 'tweetnacl';\nimport AeSdk from './AeSdk.js';\nimport verifyTransaction from './tx/validator.js';\nimport RpcClient from './aepp-wallet-communication/rpc/RpcClient.js';\nimport {\n  METHODS,\n  RPC_STATUS,\n  SUBSCRIPTION_TYPES,\n  WALLET_TYPE,\n  RpcInvalidTransactionError,\n  RpcNotAuthorizeError,\n  RpcPermissionDenyError,\n  RpcUnsupportedProtocolError,\n} from './aepp-wallet-communication/schema.js';\nimport { InternalError, UnknownRpcClientError } from './utils/errors.js';\nimport AccountBase from './account/Base.js';\nimport BrowserConnection from './aepp-wallet-communication/connection/Browser.js';\nimport {\n  Accounts,\n  AeppApi,\n  Network,\n  NetworkToSelect,\n  RPC_VERSION,\n  WalletApi,\n  WalletInfo,\n} from './aepp-wallet-communication/rpc/types.js';\nimport { Encoded, Encoding, encode, decode } from './utils/encoder.js';\nimport jsonBig from './utils/json-big.js';\n\ntype RpcClientWallet = RpcClient<AeppApi, WalletApi>;\n\ntype OnConnection = (\n  clientId: string,\n  params: Omit<Parameters<WalletApi[METHODS.connect]>[0], 'version'>,\n  origin: string,\n) => void;\n\ntype OnSubscription = (\n  clientId: string,\n  params: Parameters<WalletApi[METHODS.subscribeAddress]>[0],\n  origin: string,\n) => void;\n\ntype OnDisconnect = (\n  clientId: string,\n  params: Parameters<WalletApi[METHODS.closeConnection]>[0],\n) => void;\n\ntype OnAskAccounts = (clientId: string, params: undefined, origin: string) => void;\n\ntype OnAskToSelectNetwork = (clientId: string, params: NetworkToSelect, origin: string) => void;\n\ninterface RpcClientsInfo {\n  id: string;\n  status: RPC_STATUS;\n  connectNode: boolean;\n  addressSubscription: Set<'connected' | 'current'>;\n  rpc: RpcClientWallet;\n}\n\n/**\n * Contain functionality for aepp interaction and managing multiple aepps\n * @category aepp wallet communication\n */\nexport default class AeSdkWallet extends AeSdk {\n  id: string;\n\n  _type: WALLET_TYPE;\n\n  name: string;\n\n  _clients = new Map<string, RpcClientsInfo>();\n\n  onConnection: OnConnection;\n\n  onSubscription: OnSubscription;\n\n  onDisconnect: OnDisconnect;\n\n  onAskAccounts: OnAskAccounts;\n\n  onAskToSelectNetwork: OnAskToSelectNetwork;\n\n  /**\n   * @param options - Options\n   * @param options.name - Wallet name\n   * @param options.id - Wallet id\n   * @param options.type - Wallet type\n   * @param options.onConnection - Call-back function for incoming AEPP connection\n   * @param options.onSubscription - Call-back function for incoming AEPP account subscription\n   * @param options.onAskAccounts - Call-back function for incoming AEPP get address request\n   * @param options.onAskToSelectNetwork - Call-back function for incoming AEPP select network\n   * request. If the request is fine then this function should change the current network.\n   * @param options.onDisconnect - Call-back function for disconnect event\n   */\n  constructor({\n    name,\n    id,\n    type,\n    onConnection,\n    onSubscription,\n    onDisconnect,\n    onAskAccounts,\n    onAskToSelectNetwork,\n    ...options\n  }: {\n    id: string;\n    type: WALLET_TYPE;\n    name: string;\n    onConnection: OnConnection;\n    onSubscription: OnSubscription;\n    onDisconnect: OnDisconnect;\n    onAskAccounts: OnAskAccounts;\n    onAskToSelectNetwork: OnAskToSelectNetwork;\n  } & ConstructorParameters<typeof AeSdk>[0]) {\n    super(options);\n    this.onConnection = onConnection;\n    this.onSubscription = onSubscription;\n    this.onDisconnect = onDisconnect;\n    this.onAskAccounts = onAskAccounts;\n    this.onAskToSelectNetwork = onAskToSelectNetwork;\n    this.name = name;\n    this.id = id;\n    this._type = type;\n  }\n\n  _getAccountsForClient({ addressSubscription }: RpcClientsInfo): Accounts {\n    const { current, connected } = this.getAccounts();\n    return {\n      current:\n        addressSubscription.has('current') || addressSubscription.has('connected') ? current : {},\n      connected: addressSubscription.has('connected') ? connected : {},\n    };\n  }\n\n  _pushAccountsToApps(): void {\n    if (this._clients == null) return;\n    Array.from(this._clients.keys())\n      .filter((clientId) => this._isRpcClientConnected(clientId))\n      .map((clientId) => this._getClient(clientId))\n      .filter((client) => client.addressSubscription.size !== 0)\n      .forEach((client) =>\n        client.rpc.notify(METHODS.updateAddress, this._getAccountsForClient(client)),\n      );\n  }\n\n  override selectAccount(address: Encoded.AccountAddress): void {\n    super.selectAccount(address);\n    this._pushAccountsToApps();\n  }\n\n  override addAccount(account: AccountBase, options?: Parameters<AeSdk['addAccount']>[1]): void {\n    super.addAccount(account, options);\n    this._pushAccountsToApps();\n  }\n\n  _getNode(): { node: Network['node'] } {\n    this.ensureNodeConnected();\n    return { node: { url: this.api.$host, name: this.selectedNodeName } };\n  }\n\n  override async selectNode(name: string): Promise<void> {\n    super.selectNode(name);\n    const networkId = await this.api.getNetworkId();\n    Array.from(this._clients.keys())\n      .filter((clientId) => this._isRpcClientConnected(clientId))\n      .map((clientId) => this._getClient(clientId))\n      .forEach((client) => {\n        client.rpc.notify(METHODS.updateNetwork, {\n          networkId,\n          ...(client.connectNode && this._getNode()),\n        });\n      });\n  }\n\n  _getClient(clientId: string): RpcClientsInfo {\n    const client = this._clients.get(clientId);\n    if (client == null) throw new UnknownRpcClientError(clientId);\n    return client;\n  }\n\n  _isRpcClientConnected(clientId: string): boolean {\n    return (\n      RPC_STATUS.CONNECTED === this._getClient(clientId).status &&\n      this._getClient(clientId).rpc.connection.isConnected()\n    );\n  }\n\n  _disconnectRpcClient(clientId: string): void {\n    const client = this._getClient(clientId);\n    client.rpc.connection.disconnect();\n    client.status = RPC_STATUS.DISCONNECTED;\n    client.addressSubscription = new Set();\n  }\n\n  /**\n   * Remove specific RpcClient by ID\n   * @param id - Client ID\n   */\n  removeRpcClient(id: string): void {\n    this._disconnectRpcClient(id);\n    this._clients.delete(id);\n  }\n\n  /**\n   * Add new client by AEPP connection\n   * @param clientConnection - AEPP connection object\n   * @returns Client ID\n   */\n  addRpcClient(clientConnection: BrowserConnection): string {\n    // @TODO  detect if aepp has some history based on origin????\n    // if yes use this instance for connection\n    const id = Buffer.from(nacl.randomBytes(8)).toString('base64');\n    let disconnectParams: any;\n    const client: RpcClientsInfo = {\n      id,\n      status: RPC_STATUS.WAITING_FOR_CONNECTION_REQUEST,\n      addressSubscription: new Set(),\n      connectNode: false,\n      rpc: new RpcClient<AeppApi, WalletApi>(\n        clientConnection,\n        () => {\n          this._clients.delete(id);\n          this.onDisconnect(id, disconnectParams); // also related info\n        },\n        {\n          [METHODS.closeConnection]: (params) => {\n            disconnectParams = params;\n            this._disconnectRpcClient(id);\n          },\n          // Store client info and prepare two fn for each client `connect` and `denyConnection`\n          // which automatically prepare and send response for that client\n          [METHODS.connect]: async ({ name, version, icons, connectNode }, origin) => {\n            if (version !== RPC_VERSION) throw new RpcUnsupportedProtocolError();\n\n            await this.onConnection(id, { name, icons, connectNode }, origin);\n            client.status = RPC_STATUS.CONNECTED;\n            client.connectNode = connectNode;\n            return {\n              ...(await this.getWalletInfo()),\n              ...(connectNode && this._getNode()),\n            };\n          },\n          [METHODS.subscribeAddress]: async ({ type, value }, origin) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n\n            switch (type) {\n              case SUBSCRIPTION_TYPES.subscribe:\n                // TODO: remove `type` as it always subscribe\n                await this.onSubscription(id, { type, value }, origin);\n                client.addressSubscription.add(value);\n                break;\n              case SUBSCRIPTION_TYPES.unsubscribe:\n                client.addressSubscription.delete(value);\n                break;\n              default:\n                throw new InternalError(`Unknown subscription type: ${type}`);\n            }\n\n            return {\n              subscription: Array.from(client.addressSubscription),\n              address: this._getAccountsForClient(client),\n            };\n          },\n          [METHODS.address]: async (params, origin) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n            await this.onAskAccounts(id, params, origin);\n            return this.addresses();\n          },\n          [METHODS.sign]: async (\n            { tx, onAccount = this.address, returnSigned, innerTx },\n            origin,\n          ) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n            if (!this.addresses().includes(onAccount)) {\n              throw new RpcPermissionDenyError(onAccount);\n            }\n\n            const parameters = {\n              onAccount,\n              aeppOrigin: origin,\n              aeppRpcClientId: id,\n              innerTx,\n            };\n            if (returnSigned || innerTx === true) {\n              return { signedTransaction: await this.signTransaction(tx, parameters) };\n            }\n            try {\n              return jsonBig.parse(\n                jsonBig.stringify({\n                  transactionHash: await this.sendTransaction(tx, { ...parameters, verify: false }),\n                }),\n              );\n            } catch (error) {\n              const validation = await verifyTransaction(tx, this.api);\n              if (validation.length > 0) throw new RpcInvalidTransactionError(validation);\n              throw error;\n            }\n          },\n          [METHODS.signMessage]: async ({ message, onAccount = this.address }, origin) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n            if (!this.addresses().includes(onAccount)) {\n              throw new RpcPermissionDenyError(onAccount);\n            }\n\n            const parameters = { onAccount, aeppOrigin: origin, aeppRpcClientId: id };\n            return {\n              signature: Buffer.from(await this.signMessage(message, parameters)).toString('hex'),\n            };\n          },\n          [METHODS.signTypedData]: async (\n            { domain, aci, data, onAccount = this.address },\n            origin,\n          ) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n            if (!this.addresses().includes(onAccount)) {\n              throw new RpcPermissionDenyError(onAccount);\n            }\n\n            const parameters = {\n              ...domain,\n              onAccount,\n              aeppOrigin: origin,\n              aeppRpcClientId: id,\n            };\n            return {\n              signature: await this.signTypedData(data, aci, parameters),\n            };\n          },\n          [METHODS.unsafeSign]: async ({ data, onAccount = this.address }, origin) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n            if (!this.addresses().includes(onAccount)) throw new RpcPermissionDenyError(onAccount);\n            const parameters = { onAccount, aeppOrigin: origin, aeppRpcClientId: id };\n            const signature = encode(\n              await this.unsafeSign(decode(data), parameters),\n              Encoding.Signature,\n            );\n            return { signature };\n          },\n          [METHODS.signDelegation]: async ({ delegation, onAccount = this.address }, origin) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n            if (!this.addresses().includes(onAccount)) throw new RpcPermissionDenyError(onAccount);\n            const parameters = { onAccount, aeppOrigin: origin, aeppRpcClientId: id };\n            const signature = await this.signDelegation(delegation, parameters);\n            return { signature };\n          },\n          [METHODS.updateNetwork]: async (params, origin) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n            await this.onAskToSelectNetwork(id, params, origin);\n            return null;\n          },\n        },\n      ),\n    };\n    this._clients.set(id, client);\n    return id;\n  }\n\n  /**\n   * Send shareWalletInfo message to notify AEPP about wallet\n   * @param clientId - ID of RPC client send message to\n   */\n  async shareWalletInfo(clientId: string): Promise<void> {\n    this._getClient(clientId).rpc.notify(METHODS.readyToConnect, await this.getWalletInfo());\n  }\n\n  /**\n   * Get Wallet info object\n   * @returns Object with wallet information\n   */\n  async getWalletInfo(): Promise<WalletInfo> {\n    const { origin } = window.location;\n    return {\n      id: this.id,\n      name: this.name,\n      networkId: await this.api.getNetworkId(),\n      origin: origin === 'file://' ? '*' : origin,\n      type: this._type,\n    };\n  }\n\n  /**\n   * Get Wallet accounts\n   * @returns Object with accounts information (\\{ connected: Object, current: Object \\})\n   */\n  getAccounts(): Accounts {\n    return {\n      current: this.selectedAddress != null ? { [this.selectedAddress]: {} } : {},\n      connected: this.addresses()\n        .filter((a) => a !== this.selectedAddress)\n        .reduce((acc, a) => ({ ...acc, [a]: {} }), {}),\n    };\n  }\n}\n"],"mappings":"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","ignoreList":[]}