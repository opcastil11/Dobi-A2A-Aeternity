{"version":3,"file":"send-transaction.js","names":["verifyTransaction","ensureError","TransactionError","buildTxHash","poll","waitForTxConfirm","InvalidTxError","constructor","message","validation","transaction","name","sendTransaction","txUnsigned","onNode","onAccount","verify","waitMined","confirm","innerTx","options","tx","signTransaction","networkId","getNetworkId","hash","rawTx","length","map","v","join","__queue","address","error","txHash","postTransaction","requestOptions","customHeaders","pollResult","txData","c","undefined","confirmationHeight","Object","assign","verifyTx"],"sources":["../src/send-transaction.ts"],"sourcesContent":["import verifyTransaction, { ValidatorResult } from './tx/validator.js';\nimport { ensureError } from './utils/other.js';\nimport { TransactionError } from './utils/errors.js';\nimport Node from './Node.js';\nimport { SignedTx } from './apis/node/index.js';\nimport { Encoded } from './utils/encoder.js';\nimport AccountBase from './account/Base.js';\nimport { buildTxHash } from './tx/builder/index.js';\nimport { poll, waitForTxConfirm } from './chain.js';\n\n/**\n * @category exception\n */\nexport class InvalidTxError extends TransactionError {\n  validation: ValidatorResult[];\n\n  transaction: Encoded.Transaction;\n\n  constructor(message: string, validation: ValidatorResult[], transaction: Encoded.Transaction) {\n    super(message);\n    this.name = 'InvalidTxError';\n    this.validation = validation;\n    this.transaction = transaction;\n  }\n}\n\n/**\n * Signs and submits transaction for mining\n * @category chain\n * @param txUnsigned - Transaction to sign and submit\n * @param options - Options\n * @returns Transaction details\n */\nexport async function sendTransaction(\n  txUnsigned: Encoded.Transaction,\n  {\n    onNode,\n    onAccount,\n    verify = true,\n    waitMined = true,\n    confirm,\n    innerTx,\n    ...options\n  }: SendTransactionOptions,\n): Promise<SendTransactionReturnType> {\n  const tx = await onAccount.signTransaction(txUnsigned, {\n    ...options,\n    onNode,\n    innerTx,\n    networkId: await onNode.getNetworkId(),\n  });\n\n  if (innerTx === true) return { hash: buildTxHash(tx), rawTx: tx };\n\n  if (verify) {\n    const validation = await verifyTransaction(tx, onNode);\n    if (validation.length > 0) {\n      const message = `Transaction verification errors: ${validation\n        .map((v: { message: string }) => v.message)\n        .join(', ')}`;\n      throw new InvalidTxError(message, validation, tx);\n    }\n  }\n\n  try {\n    let __queue;\n    try {\n      __queue = onAccount != null ? `tx-${onAccount.address}` : null;\n    } catch (error) {\n      __queue = null;\n    }\n    const { txHash } = await onNode.postTransaction(\n      { tx },\n      {\n        requestOptions: {\n          customHeaders: {\n            // TODO: remove __retry-code after fixing https://github.com/aeternity/aeternity/issues/3803\n            '__retry-code': '400',\n            ...(__queue != null ? { __queue } : {}),\n          },\n        },\n      },\n    );\n\n    if (waitMined) {\n      const pollResult = await poll(txHash, { onNode, ...options });\n      const txData = {\n        ...pollResult,\n        hash: pollResult.hash as Encoded.TxHash,\n        rawTx: tx,\n      };\n      // wait for transaction confirmation\n      if (confirm != null && +confirm > 0) {\n        const c = typeof confirm === 'boolean' ? undefined : confirm;\n        return {\n          ...txData,\n          confirmationHeight: await waitForTxConfirm(txHash, { onNode, confirm: c, ...options }),\n        };\n      }\n      return txData;\n    }\n    return { hash: txHash, rawTx: tx };\n  } catch (error) {\n    ensureError(error);\n    throw Object.assign(error, {\n      rawTx: tx,\n      verifyTx: async () => verifyTransaction(tx, onNode),\n    });\n  }\n}\n\ntype SendTransactionOptionsType = {\n  /**\n   * Node to use\n   */\n  onNode: Node;\n  /**\n   * Account to use\n   */\n  onAccount: AccountBase;\n  /**\n   * Verify transaction before broadcast, throw error if not\n   */\n  verify?: boolean;\n  /**\n   * Ensure that transaction get into block\n   */\n  waitMined?: boolean;\n  /**\n   * Number of micro blocks that should be mined after tx get included\n   */\n  confirm?: boolean | number;\n} & Parameters<typeof poll>[1] &\n  Omit<Parameters<typeof waitForTxConfirm>[1], 'confirm'> &\n  Parameters<AccountBase['signTransaction']>[1];\nexport interface SendTransactionOptions extends SendTransactionOptionsType {}\ninterface SendTransactionReturnType extends Partial<SignedTx> {\n  hash: Encoded.TxHash;\n  // TODO: use `SignedTx.encodedTx` instead\n  rawTx: Encoded.Transaction;\n  confirmationHeight?: number;\n}\n"],"mappings":"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","ignoreList":[]}