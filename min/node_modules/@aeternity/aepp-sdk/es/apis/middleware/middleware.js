import { createSerializer } from "../../utils/autorest.js";
import * as coreClient from "@azure/core-client";
import * as Parameters from "./models/parameters.js";
import * as Mappers from "./models/mappers.js";
export class Middleware extends coreClient.ServiceClient {
  /**
   * Initializes a new instance of the Middleware class.
   * @param $host server parameter
   * @param options The parameter options
   */
  constructor($host, options) {
    var _ref, _options$endpoint;
    if ($host === undefined) {
      throw new Error("'$host' cannot be null");
    }

    // Initializing default values for options
    if (!options) {
      options = {};
    }
    const defaults = {
      requestContentType: "application/json; charset=utf-8"
    };
    const packageDetails = `azsdk-js-middleware/1.0.0-beta.1`;
    const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}` : `${packageDetails}`;
    const optionsWithDefaults = {
      ...defaults,
      ...options,
      userAgentOptions: {
        userAgentPrefix
      },
      endpoint: (_ref = (_options$endpoint = options.endpoint) !== null && _options$endpoint !== void 0 ? _options$endpoint : options.baseUri) !== null && _ref !== void 0 ? _ref : "{$host}"
    };
    super(optionsWithDefaults);
    // Parameter assignments
    this.$host = $host;
  }

  /**
   * Get an account activities.
   * @param accountId The account address Account address
   * @param options The options parameters.
   */
  getAccountActivities(accountId, options) {
    return this.sendOperationRequest({
      accountId,
      options
    }, getAccountActivitiesOperationSpec);
  }

  /**
   * Get tokens owned by an account.
   * @param accountId The account id Account address
   * @param options The options parameters.
   */
  getAex141OwnedTokens(accountId, options) {
    return this.sendOperationRequest({
      accountId,
      options
    }, getAex141OwnedTokensOperationSpec);
  }

  /**
   * Get all AEX9 balances for an account on the last block.
   * @param accountId Account id Account address
   * @param options The options parameters.
   */
  getAex9AccountBalances(accountId, options) {
    return this.sendOperationRequest({
      accountId,
      options
    }, getAex9AccountBalancesOperationSpec);
  }

  /**
   * Get DEX swap tokens
   * @param accountId The account id Account address
   * @param options The options parameters.
   */
  getAccountDexSwaps(accountId, options) {
    return this.sendOperationRequest({
      accountId,
      options
    }, getAccountDexSwapsOperationSpec);
  }

  /**
   * Get all name claims of an account
   * @param accountId The account that made the claims Account address
   * @param options The options parameters.
   */
  getAccountNameClaims(accountId, options) {
    return this.sendOperationRequest({
      accountId,
      options
    }, getAccountNameClaimsOperationSpec);
  }

  /**
   * Get account pointees
   * @param accountId The account that names point to Account address
   * @param options The options parameters.
   */
  getAccountPointees(accountId, options) {
    return this.sendOperationRequest({
      accountId,
      options
    }, getAccountPointeesOperationSpec);
  }

  /**
   * Get transactions count and its type for given aeternity ID.
   * @param accountId The ID of the address/name/oracle/etc Account address
   * @param options The options parameters.
   */
  getAccountTransactionsCount(accountId, options) {
    return this.sendOperationRequest({
      accountId,
      options
    }, getAccountTransactionsCountOperationSpec);
  }

  /**
   * Get AEX141 contracts sorted by creation time, name or symbol.
   * @param options The options parameters.
   */
  getSortedAex141Contracts(options) {
    return this.sendOperationRequest({
      options
    }, getSortedAex141ContractsOperationSpec);
  }

  /**
   * Get templates AEX-141 contract tokens.
   * @param contractId The contract id Contract address
   * @param options The options parameters.
   */
  getAex141ContractTemplates(contractId, options) {
    return this.sendOperationRequest({
      contractId,
      options
    }, getAex141ContractTemplatesOperationSpec);
  }

  /**
   * Get AEX-141 template tokens.
   * @param contractId Contract id Contract address
   * @param templateId Template id
   * @param options The options parameters.
   */
  getAex141TemplateTokens(contractId, templateId, options) {
    return this.sendOperationRequest({
      contractId,
      templateId,
      options
    }, getAex141TemplateTokensOperationSpec);
  }

  /**
   * Get owners of tokens of a AEX-141 contract.
   * @param contractId The contract id Contract address
   * @param options The options parameters.
   */
  getAex141ContractTokens(contractId, options) {
    return this.sendOperationRequest({
      contractId,
      options
    }, getAex141ContractTokensOperationSpec);
  }

  /**
   * Get owner of a NFT (AEX-141 token).
   * @param contractId The contract id Contract address
   * @param tokenId The nft token id
   * @param options The options parameters.
   */
  getAex141TokenOwner(contractId, tokenId, options) {
    return this.sendOperationRequest({
      contractId,
      tokenId,
      options
    }, getAex141TokenOwnerOperationSpec);
  }

  /**
   * Get AEX-141 transfers on a contract.
   * @param contractId Contract id Contract address
   * @param options The options parameters.
   */
  getAex141ContractTransfers(contractId, options) {
    return this.sendOperationRequest({
      contractId,
      options
    }, getAex141ContractTransfersOperationSpec);
  }

  /**
   * Get AEX141 contract meta-info, extensions, limits and stats.
   * @param id The contract id Contract address
   * @param options The options parameters.
   */
  getAex141ByContract(id, options) {
    return this.sendOperationRequest({
      id,
      options
    }, getAex141ByContractOperationSpec);
  }

  /**
   * Get AEX9 tokens sorted by creation time, name or symbol.
   * @param options The options parameters.
   */
  getSortedAex9Tokens(options) {
    return this.sendOperationRequest({
      options
    }, getSortedAex9TokensOperationSpec);
  }

  /**
   * Get AEX9 tokens count.
   * @param options The options parameters.
   */
  getAex9TokensCount(options) {
    return this.sendOperationRequest({
      options
    }, getAex9TokensCountOperationSpec);
  }

  /**
   * Get AEX9 balances on a contract.
   * @param contractId Contract id Contract address
   * @param options The options parameters.
   */
  getAex9ContractBalances(contractId, options) {
    return this.sendOperationRequest({
      contractId,
      options
    }, getAex9ContractBalancesOperationSpec);
  }

  /**
   * Get AEX9 balance for an account on a contract.
   * @param contractId Contract id Contract address
   * @param accountId Account id Account address
   * @param options The options parameters.
   */
  getAex9ContractAccountBalance(contractId, accountId, options) {
    return this.sendOperationRequest({
      contractId,
      accountId,
      options
    }, getAex9ContractAccountBalanceOperationSpec);
  }

  /**
   * Get AEX9 account balance on a contract throughout all heights when changed.
   * @param contractId Contract id Contract address
   * @param accountId Account id Account address
   * @param options The options parameters.
   */
  getAex9ContractAccountBalanceHistory(contractId, accountId, options) {
    return this.sendOperationRequest({
      contractId,
      accountId,
      options
    }, getAex9ContractAccountBalanceHistoryOperationSpec);
  }

  /**
   * Get AEX9 creation and meta_info information by contract id.
   * @param id The contract id Contract address
   * @param options The options parameters.
   */
  getAex9ByContract(id, options) {
    return this.sendOperationRequest({
      id,
      options
    }, getAex9ByContractOperationSpec);
  }

  /**
   * Get multiple channels.
   * @param options The options parameters.
   */
  getChannels(options) {
    return this.sendOperationRequest({
      options
    }, getChannelsOperationSpec);
  }

  /**
   * Get a single channel.
   * @param id The channel Channel ID
   * @param options The options parameters.
   */
  getChannel(id, options) {
    return this.sendOperationRequest({
      id,
      options
    }, getChannelOperationSpec);
  }

  /**
   * Get contract calls.
   * @param options The options parameters.
   */
  getContractCalls(options) {
    return this.sendOperationRequest({
      options
    }, getContractCallsOperationSpec);
  }

  /**
   * Get contract logs.
   * @param options The options parameters.
   */
  getContractLogs(options) {
    return this.sendOperationRequest({
      options
    }, getContractLogsOperationSpec);
  }

  /**
   * Gets contract creation info.
   * @param id Contract that emitted the logs Contract address
   * @param options The options parameters.
   */
  getContract(id, options) {
    return this.sendOperationRequest({
      id,
      options
    }, getContractOperationSpec);
  }

  /**
   * Get DEX swap tokens
   * @param options The options parameters.
   */
  getDexSwaps(options) {
    return this.sendOperationRequest({
      options
    }, getDexSwapsOperationSpec);
  }

  /**
   * Get DEX swap tokens
   * @param contractId The contract id Contract address
   * @param options The options parameters.
   */
  getDexSwapsByContractId(contractId, options) {
    return this.sendOperationRequest({
      contractId,
      options
    }, getDexSwapsByContractIdOperationSpec);
  }

  /**
   * Get Epoch information
   * @param options The options parameters.
   */
  getEpochs(options) {
    return this.sendOperationRequest({
      options
    }, getEpochsOperationSpec);
  }

  /**
   * Get Top Epoch information
   * @param options The options parameters.
   */
  getEpochTop(options) {
    return this.sendOperationRequest({
      options
    }, getEpochTopOperationSpec);
  }

  /**
   * Get Schedule information
   * @param options The options parameters.
   */
  getSchedules(options) {
    return this.sendOperationRequest({
      options
    }, getSchedulesOperationSpec);
  }

  /**
   * Get Schedule information
   * @param height Schedule height
   * @param options The options parameters.
   */
  getSchedule(height, options) {
    return this.sendOperationRequest({
      height,
      options
    }, getScheduleOperationSpec);
  }

  /**
   * Get Validators information
   * @param options The options parameters.
   */
  getValidators(options) {
    return this.sendOperationRequest({
      options
    }, getValidatorsOperationSpec);
  }

  /**
   * Get Validator information
   * @param validator Validator address Account address
   * @param options The options parameters.
   */
  getValidator(validator, options) {
    return this.sendOperationRequest({
      validator,
      options
    }, getValidatorOperationSpec);
  }

  /**
   * Get Delegates information for validator
   * @param validator Validator address Account address
   * @param options The options parameters.
   */
  getValidatorDelegates(validator, options) {
    return this.sendOperationRequest({
      validator,
      options
    }, getValidatorDelegatesOperationSpec);
  }

  /**
   * Get top Delegates information for validator
   * @param validator Validator address Account address
   * @param options The options parameters.
   */
  getTopValidatorDelegates(validator, options) {
    return this.sendOperationRequest({
      validator,
      options
    }, getTopValidatorDelegatesOperationSpec);
  }

  /**
   * Get multiple key blocks.
   * @param options The options parameters.
   */
  getKeyBlocks(options) {
    return this.sendOperationRequest({
      options
    }, getKeyBlocksOperationSpec);
  }

  /**
   * Get a single key block.
   * @param hashOrKbi The key block encoded hash or key block index 
   * @param options The options parameters.
   */
  getKeyBlock(hashOrKbi, options) {
    return this.sendOperationRequest({
      hashOrKbi,
      options
    }, getKeyBlockOperationSpec);
  }

  /**
   * Get the key block micro blocks.
   * @param hashOrKbi The key block encoded hash or key block index 
   * @param options The options parameters.
   */
  getKeyBlockMicroBlocks(hashOrKbi, options) {
    return this.sendOperationRequest({
      hashOrKbi,
      options
    }, getKeyBlockMicroBlocksOperationSpec);
  }

  /**
   * Get a micro block
   * @param hash The micro block encoded hash Micro block hash
   * @param options The options parameters.
   */
  getMicroBlock(hash, options) {
    return this.sendOperationRequest({
      hash,
      options
    }, getMicroBlockOperationSpec);
  }

  /**
   * Get a micro block transactions
   * @param hash The micro block encoded hash Micro block hash
   * @param options The options parameters.
   */
  getMicroBlockTransactions(hash, options) {
    return this.sendOperationRequest({
      hash,
      options
    }, getMicroBlockTransactionsOperationSpec);
  }

  /**
   * Get multiple names.
   * @param options The options parameters.
   */
  getNames(options) {
    return this.sendOperationRequest({
      options
    }, getNamesOperationSpec);
  }

  /**
   * Get multiple names.
   * @param options The options parameters.
   */
  getNamesAuctions(options) {
    return this.sendOperationRequest({
      options
    }, getNamesAuctionsOperationSpec);
  }

  /**
   * Get name auction
   * @param id The name 
   * @param options The options parameters.
   */
  getNameAuction(id, options) {
    return this.sendOperationRequest({
      id,
      options
    }, getNameAuctionOperationSpec);
  }

  /**
   * Get name auction claims
   * @param id The name 
   * @param options The options parameters.
   */
  getNameAuctionClaims(id, options) {
    return this.sendOperationRequest({
      id,
      options
    }, getNameAuctionClaimsOperationSpec);
  }

  /**
   * Get the total number of active names.
   * @param options The options parameters.
   */
  getNamesCount(options) {
    return this.sendOperationRequest({
      options
    }, getNamesCountOperationSpec);
  }

  /**
   * Get a single name.
   * @param id The name 
   * @param options The options parameters.
   */
  getName(id, options) {
    return this.sendOperationRequest({
      id,
      options
    }, getNameOperationSpec);
  }

  /**
   * Get name claims
   * @param id The name or name hash 
   * @param options The options parameters.
   */
  getNameClaims(id, options) {
    return this.sendOperationRequest({
      id,
      options
    }, getNameClaimsOperationSpec);
  }

  /**
   * Get name transfers
   * @param id The name or name hash 
   * @param options The options parameters.
   */
  getNameTransfers(id, options) {
    return this.sendOperationRequest({
      id,
      options
    }, getNameTransfersOperationSpec);
  }

  /**
   * Get name updates
   * @param id The name or name hash 
   * @param options The options parameters.
   */
  getNameUpdates(id, options) {
    return this.sendOperationRequest({
      id,
      options
    }, getNameUpdatesOperationSpec);
  }

  /**
   * Get multiple oracles.
   * @param options The options parameters.
   */
  getOracles(options) {
    return this.sendOperationRequest({
      options
    }, getOraclesOperationSpec);
  }

  /**
   * Get a single oracle.
   * @param id The oracle Oracle address
   * @param options The options parameters.
   */
  getOracle(id, options) {
    return this.sendOperationRequest({
      id,
      options
    }, getOracleOperationSpec);
  }

  /**
   * Get an oracle's extensions.
   * @param id The oracle Oracle address
   * @param options The options parameters.
   */
  getOracleExtends(id, options) {
    return this.sendOperationRequest({
      id,
      options
    }, getOracleExtendsOperationSpec);
  }

  /**
   * Get an oracle's queries.
   * @param id The oracle Oracle address
   * @param options The options parameters.
   */
  getOracleQueries(id, options) {
    return this.sendOperationRequest({
      id,
      options
    }, getOracleQueriesOperationSpec);
  }

  /**
   * Get an oracle's responses.
   * @param id The oracle Oracle address
   * @param options The options parameters.
   */
  getOracleResponses(id, options) {
    return this.sendOperationRequest({
      id,
      options
    }, getOracleResponsesOperationSpec);
  }

  /**
   * Get stats.
   * @param options The options parameters.
   */
  getStats(options) {
    return this.sendOperationRequest({
      options
    }, getStatsOperationSpec);
  }

  /**
   * Get active accounts stats.
   * @param options The options parameters.
   */
  getActiveAccountsStats(options) {
    return this.sendOperationRequest({
      options
    }, getActiveAccountsStatsOperationSpec);
  }

  /**
   * Get total AEx9 token transfers.
   * @param options The options parameters.
   */
  getAex9TransfersStats(options) {
    return this.sendOperationRequest({
      options
    }, getAex9TransfersStatsOperationSpec);
  }

  /**
   * Get total blocks count stats.
   * @param options The options parameters.
   */
  getBlocksStats(options) {
    return this.sendOperationRequest({
      options
    }, getBlocksStatsOperationSpec);
  }

  /**
   * Get the created contracts count per interval.
   * @param options The options parameters.
   */
  getContractsStats(options) {
    return this.sendOperationRequest({
      options
    }, getContractsStatsOperationSpec);
  }

  /**
   * Get delta stats.
   * @param options The options parameters.
   */
  getDeltaStats(options) {
    return this.sendOperationRequest({
      options
    }, getDeltaStatsOperationSpec);
  }

  /**
   * Get total blocks difficulty stats.
   * @param options The options parameters.
   */
  getDifficultyStats(options) {
    return this.sendOperationRequest({
      options
    }, getDifficultyStatsOperationSpec);
  }

  /**
   * Get total blocks hashrate stats.
   * @param options The options parameters.
   */
  getHashrateStats(options) {
    return this.sendOperationRequest({
      options
    }, getHashrateStatsOperationSpec);
  }

  /**
   * Get miners list with total rewards obtained through mining.
   * @param options The options parameters.
   */
  getMinerStats(options) {
    return this.sendOperationRequest({
      options
    }, getMinerStatsOperationSpec);
  }

  /**
   * Get total names count stats.
   * @param options The options parameters.
   */
  getNamesStats(options) {
    return this.sendOperationRequest({
      options
    }, getNamesStatsOperationSpec);
  }

  /**
   * Get total accumulated stats.
   * @param options The options parameters.
   */
  getTotalStats(options) {
    return this.sendOperationRequest({
      options
    }, getTotalStatsOperationSpec);
  }

  /**
   * Get total accounts created per interval stats.
   * @param options The options parameters.
   */
  getTotalAccountsStats(options) {
    return this.sendOperationRequest({
      options
    }, getTotalAccountsStatsOperationSpec);
  }

  /**
   * Get total transactions count stats.
   * @param options The options parameters.
   */
  getTransactionsStats(options) {
    return this.sendOperationRequest({
      options
    }, getTransactionsStatsOperationSpec);
  }

  /**
   * Gets the current syncing status of both middleware and the node
   * @param options The options parameters.
   */
  getStatus(options) {
    return this.sendOperationRequest({
      options
    }, getStatusOperationSpec);
  }

  /**
   * Get multiple transactions.
   * @param options The options parameters.
   */
  getTransactions(options) {
    return this.sendOperationRequest({
      options
    }, getTransactionsOperationSpec);
  }

  /**
   * Get count of transactions at the latest height.
   * @param options The options parameters.
   */
  getTransactionsCount(options) {
    return this.sendOperationRequest({
      options
    }, getTransactionsCountOperationSpec);
  }

  /**
   * Get pending transactions.
   * @param options The options parameters.
   */
  getPendingTransactions(options) {
    return this.sendOperationRequest({
      options
    }, getPendingTransactionsOperationSpec);
  }

  /**
   * Get count of pending transactions.
   * @param options The options parameters.
   */
  getPendingTransactionsCount(options) {
    return this.sendOperationRequest({
      options
    }, getPendingTransactionsCountOperationSpec);
  }

  /**
   * Get a single transaction.
   * @param hash The transaction encoded hash Transaction hash
   * @param options The options parameters.
   */
  getTransaction(hash, options) {
    return this.sendOperationRequest({
      hash,
      options
    }, getTransactionOperationSpec);
  }

  /**
   * Get multiple transfers.
   * @param options The options parameters.
   */
  getTransfers(options) {
    return this.sendOperationRequest({
      options
    }, getTransfersOperationSpec);
  }
}
// Operation Specifications
const serializer = createSerializer(Mappers, /* isXml */false);
const getAccountActivitiesOperationSpec = {
  path: "/v3/accounts/{accountId}/activities",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Paths1EfdbjrV3AccountsAccountidActivitiesGetResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.ownedOnly, Parameters.typeParam, Parameters.limit, Parameters.scope, Parameters.direction],
  urlParameters: [Parameters.$host, Parameters.accountId],
  headerParameters: [Parameters.accept],
  serializer
};
const getAex141OwnedTokensOperationSpec = {
  path: "/v3/accounts/{accountId}/aex141/tokens",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Paths3Hsv3GV3AccountsAccountidAex141TokensGetResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.limit, Parameters.direction1, Parameters.contract],
  urlParameters: [Parameters.$host, Parameters.accountId],
  headerParameters: [Parameters.accept],
  serializer
};
const getAex9AccountBalancesOperationSpec = {
  path: "/v3/accounts/{accountId}/aex9/balances",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PathsKm52GqV3AccountsAccountidAex9BalancesGetResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  urlParameters: [Parameters.$host, Parameters.accountId],
  headerParameters: [Parameters.accept],
  serializer
};
const getAccountDexSwapsOperationSpec = {
  path: "/v3/accounts/{accountId}/dex/swaps",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PathsZpy8S9V3AccountsAccountidDexSwapsGetResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.direction2],
  urlParameters: [Parameters.$host, Parameters.accountId],
  headerParameters: [Parameters.accept],
  serializer
};
const getAccountNameClaimsOperationSpec = {
  path: "/v3/accounts/{accountId}/names/claims",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Paths16Cyh9EV3AccountsAccountidNamesClaimsGetResponses200ContentApplicationJsonSchema
    },
    404: {
      bodyMapper: Mappers.NotFoundResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.limit, Parameters.scope, Parameters.direction3],
  urlParameters: [Parameters.$host, Parameters.accountId],
  headerParameters: [Parameters.accept],
  serializer
};
const getAccountPointeesOperationSpec = {
  path: "/v3/accounts/{accountId}/names/pointees",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Paths1Mheci5V3AccountsAccountidNamesPointeesGetResponses200ContentApplicationJsonSchema
    },
    404: {
      bodyMapper: Mappers.NotFoundResponse,
      isError: true
    }
  },
  urlParameters: [Parameters.$host, Parameters.accountId],
  headerParameters: [Parameters.accept],
  serializer
};
const getAccountTransactionsCountOperationSpec = {
  path: "/v3/accounts/{accountId}/transactions/count",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PathsXcg812V3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  urlParameters: [Parameters.$host, Parameters.accountId],
  headerParameters: [Parameters.accept],
  serializer
};
const getSortedAex141ContractsOperationSpec = {
  path: "/v3/aex141",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Paths1XwlyjtV3Aex141GetResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.limit, Parameters.direction4, Parameters.by, Parameters.prefix, Parameters.exact],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getAex141ContractTemplatesOperationSpec = {
  path: "/v3/aex141/{contractId}/templates",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Paths181AjwxV3Aex141ContractidTemplatesGetResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.limit, Parameters.direction5],
  urlParameters: [Parameters.$host, Parameters.contractId],
  headerParameters: [Parameters.accept],
  serializer
};
const getAex141TemplateTokensOperationSpec = {
  path: "/v3/aex141/{contractId}/templates/{templateId}/tokens",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Paths15Mi2TaV3Aex141ContractidTemplatesTemplateidTokensGetResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.limit, Parameters.direction6],
  urlParameters: [Parameters.$host, Parameters.contractId, Parameters.templateId],
  headerParameters: [Parameters.accept],
  serializer
};
const getAex141ContractTokensOperationSpec = {
  path: "/v3/aex141/{contractId}/tokens",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PathsWl652MV3Aex141ContractidTokensGetResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.limit, Parameters.direction7],
  urlParameters: [Parameters.$host, Parameters.contractId],
  headerParameters: [Parameters.accept],
  serializer
};
const getAex141TokenOwnerOperationSpec = {
  path: "/v3/aex141/{contractId}/tokens/{tokenId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Aex141TokenDetailResponse
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  urlParameters: [Parameters.$host, Parameters.contractId, Parameters.tokenId],
  headerParameters: [Parameters.accept],
  serializer
};
const getAex141ContractTransfersOperationSpec = {
  path: "/v3/aex141/{contractId}/transfers",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Paths1O7Q6IhV3Aex141ContractidTransfersGetResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.limit, Parameters.direction8, Parameters.fromParam, Parameters.to],
  urlParameters: [Parameters.$host, Parameters.contractId],
  headerParameters: [Parameters.accept],
  serializer
};
const getAex141ByContractOperationSpec = {
  path: "/v3/aex141/{id}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Aex141Response
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  urlParameters: [Parameters.$host, Parameters.id],
  headerParameters: [Parameters.accept],
  serializer
};
const getSortedAex9TokensOperationSpec = {
  path: "/v3/aex9",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Paths1Vr3Y2EV3Aex9GetResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.limit, Parameters.prefix, Parameters.exact, Parameters.direction9, Parameters.by1],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getAex9TokensCountOperationSpec = {
  path: "/v3/aex9/count",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Paths19IxhsmV3Aex9CountGetResponses200ContentApplicationJsonSchema
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getAex9ContractBalancesOperationSpec = {
  path: "/v3/aex9/{contractId}/balances",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Paths1N61UurV3Aex9ContractidBalancesGetResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.limit, Parameters.direction10, Parameters.by2, Parameters.blockHash],
  urlParameters: [Parameters.$host, Parameters.contractId],
  headerParameters: [Parameters.accept],
  serializer
};
const getAex9ContractAccountBalanceOperationSpec = {
  path: "/v3/aex9/{contractId}/balances/{accountId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PathsKr825V3Aex9ContractidBalancesAccountidGetResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.hash],
  urlParameters: [Parameters.$host, Parameters.accountId, Parameters.contractId],
  headerParameters: [Parameters.accept],
  serializer
};
const getAex9ContractAccountBalanceHistoryOperationSpec = {
  path: "/v3/aex9/{contractId}/balances/{accountId}/history",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Paths1Uybd4PV3Aex9ContractidBalancesAccountidHistoryGetResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.limit, Parameters.scope, Parameters.direction11],
  urlParameters: [Parameters.$host, Parameters.accountId, Parameters.contractId],
  headerParameters: [Parameters.accept],
  serializer
};
const getAex9ByContractOperationSpec = {
  path: "/v3/aex9/{id}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Aex9Response
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  urlParameters: [Parameters.$host, Parameters.id],
  headerParameters: [Parameters.accept],
  serializer
};
const getChannelsOperationSpec = {
  path: "/v3/channels",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Paths3EzhapV3ChannelsGetResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.limit, Parameters.scope, Parameters.direction12, Parameters.state],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getChannelOperationSpec = {
  path: "/v3/channels/{id}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Channel
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.NotFoundResponse,
      isError: true
    }
  },
  urlParameters: [Parameters.$host, Parameters.id1],
  headerParameters: [Parameters.accept],
  serializer
};
const getContractCallsOperationSpec = {
  path: "/v3/contracts/calls",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Paths1Txblx8V3ContractsCallsGetResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.limit, Parameters.scope, Parameters.direction13],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getContractLogsOperationSpec = {
  path: "/v3/contracts/logs",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Paths7A1M6RV3ContractsLogsGetResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.limit, Parameters.scope, Parameters.contractId1, Parameters.event, Parameters.functionParam, Parameters.functionPrefix, Parameters.data, Parameters.aexnArgs, Parameters.direction14],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getContractOperationSpec = {
  path: "/v3/contracts/{id}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Contract
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.NotFoundResponse,
      isError: true
    }
  },
  urlParameters: [Parameters.$host, Parameters.id],
  headerParameters: [Parameters.accept],
  serializer
};
const getDexSwapsOperationSpec = {
  path: "/v3/dex/swaps",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Paths1Di8FnjV3DexSwapsGetResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.direction15],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getDexSwapsByContractIdOperationSpec = {
  path: "/v3/dex/{contract_id}/swaps",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PathsKwxlzlV3DexContractIdSwapsGetResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.direction16],
  urlParameters: [Parameters.$host, Parameters.contractId2],
  headerParameters: [Parameters.accept],
  serializer
};
const getEpochsOperationSpec = {
  path: "/v3/hyperchain/epochs",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Paths194Lg3IV3HyperchainEpochsGetResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.limit, Parameters.direction17, Parameters.scope1],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getEpochTopOperationSpec = {
  path: "/v3/hyperchain/epochs/top",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EpochInfo
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getSchedulesOperationSpec = {
  path: "/v3/hyperchain/schedule",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Paths1S5Zlt1V3HyperchainScheduleGetResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.limit, Parameters.scope1, Parameters.direction18],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getScheduleOperationSpec = {
  path: "/v3/hyperchain/schedule/height/{height}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Schedule
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  urlParameters: [Parameters.$host, Parameters.height],
  headerParameters: [Parameters.accept],
  serializer
};
const getValidatorsOperationSpec = {
  path: "/v3/hyperchain/validators",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Paths1Ibn686V3HyperchainValidatorsGetResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.limit, Parameters.scope1, Parameters.direction19],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getValidatorOperationSpec = {
  path: "/v3/hyperchain/validators/{validator}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Validator
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  urlParameters: [Parameters.$host, Parameters.validator],
  headerParameters: [Parameters.accept],
  serializer
};
const getValidatorDelegatesOperationSpec = {
  path: "/v3/hyperchain/validators/{validator}/delegates",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Paths1I4U8D5V3HyperchainValidatorsValidatorDelegatesGetResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.limit, Parameters.scope1, Parameters.direction20],
  urlParameters: [Parameters.$host, Parameters.validator],
  headerParameters: [Parameters.accept],
  serializer
};
const getTopValidatorDelegatesOperationSpec = {
  path: "/v3/hyperchain/validators/{validator}/delegates/top",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Paths15K0AlgV3HyperchainValidatorsValidatorDelegatesTopGetResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.limit, Parameters.scope1, Parameters.direction21],
  urlParameters: [Parameters.$host, Parameters.validator],
  headerParameters: [Parameters.accept],
  serializer
};
const getKeyBlocksOperationSpec = {
  path: "/v3/key-blocks",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Paths277OngV3KeyBlocksGetResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.limit, Parameters.scope, Parameters.direction22],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getKeyBlockOperationSpec = {
  path: "/v3/key-blocks/{hash_or_kbi}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.KeyBlockExtended
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.NotFoundResponse,
      isError: true
    }
  },
  urlParameters: [Parameters.$host, Parameters.hashOrKbi],
  headerParameters: [Parameters.accept],
  serializer
};
const getKeyBlockMicroBlocksOperationSpec = {
  path: "/v3/key-blocks/{hash_or_kbi}/micro-blocks",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Paths1159W94V3KeyBlocksHashOrKbiMicroBlocksGetResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.limit, Parameters.scope, Parameters.direction23],
  urlParameters: [Parameters.$host, Parameters.hashOrKbi],
  headerParameters: [Parameters.accept],
  serializer
};
const getMicroBlockOperationSpec = {
  path: "/v3/micro-blocks/{hash}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MicroBlockExtended
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.NotFoundResponse,
      isError: true
    }
  },
  urlParameters: [Parameters.$host, Parameters.hash1],
  headerParameters: [Parameters.accept],
  serializer
};
const getMicroBlockTransactionsOperationSpec = {
  path: "/v3/micro-blocks/{hash}/transactions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Paths15Bkk50V3MicroBlocksHashTransactionsGetResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  urlParameters: [Parameters.$host, Parameters.hash1],
  headerParameters: [Parameters.accept],
  serializer
};
const getNamesOperationSpec = {
  path: "/v3/names",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Paths12S1Nd4V3NamesGetResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.limit, Parameters.prefix, Parameters.by2, Parameters.ownedBy, Parameters.state1, Parameters.direction24],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getNamesAuctionsOperationSpec = {
  path: "/v3/names/auctions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PathsKjq4D4V3NamesAuctionsGetResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.limit, Parameters.scope, Parameters.direction25],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getNameAuctionOperationSpec = {
  path: "/v3/names/auctions/{id}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Auction
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.NotFoundResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.limit, Parameters.scope, Parameters.direction26],
  urlParameters: [Parameters.$host, Parameters.id2],
  headerParameters: [Parameters.accept],
  serializer
};
const getNameAuctionClaimsOperationSpec = {
  path: "/v3/names/auctions/{id}/claims",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PathsCrb9BgV3NamesAuctionsIdClaimsGetResponses200ContentApplicationJsonSchema
    },
    404: {
      bodyMapper: Mappers.NotFoundResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.limit, Parameters.scope, Parameters.direction27],
  urlParameters: [Parameters.$host, Parameters.id2],
  headerParameters: [Parameters.accept],
  serializer
};
const getNamesCountOperationSpec = {
  path: "/v3/names/count",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Number"
        }
      }
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.ownedBy],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getNameOperationSpec = {
  path: "/v3/names/{id}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Name
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.NotFoundResponse,
      isError: true
    }
  },
  urlParameters: [Parameters.$host, Parameters.id2],
  headerParameters: [Parameters.accept],
  serializer
};
const getNameClaimsOperationSpec = {
  path: "/v3/names/{id}/claims",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Paths1F98AqgV3NamesIdClaimsGetResponses200ContentApplicationJsonSchema
    },
    404: {
      bodyMapper: Mappers.NotFoundResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.limit, Parameters.scope, Parameters.direction28],
  urlParameters: [Parameters.$host, Parameters.id2],
  headerParameters: [Parameters.accept],
  serializer
};
const getNameTransfersOperationSpec = {
  path: "/v3/names/{id}/transfers",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Paths1Raw8PV3NamesIdTransfersGetResponses200ContentApplicationJsonSchema
    },
    404: {
      bodyMapper: Mappers.NotFoundResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.limit, Parameters.scope, Parameters.direction29],
  urlParameters: [Parameters.$host, Parameters.id2],
  headerParameters: [Parameters.accept],
  serializer
};
const getNameUpdatesOperationSpec = {
  path: "/v3/names/{id}/updates",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Paths1Ec8CltV3NamesIdUpdatesGetResponses200ContentApplicationJsonSchema
    },
    404: {
      bodyMapper: Mappers.NotFoundResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.limit, Parameters.scope, Parameters.direction30],
  urlParameters: [Parameters.$host, Parameters.id2],
  headerParameters: [Parameters.accept],
  serializer
};
const getOraclesOperationSpec = {
  path: "/v3/oracles",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Paths1E14NekV3OraclesGetResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.limit, Parameters.scope, Parameters.state1, Parameters.direction31],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getOracleOperationSpec = {
  path: "/v3/oracles/{id}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Oracle
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.NotFoundResponse,
      isError: true
    }
  },
  urlParameters: [Parameters.$host, Parameters.id3],
  headerParameters: [Parameters.accept],
  serializer
};
const getOracleExtendsOperationSpec = {
  path: "/v3/oracles/{id}/extends",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Paths1L5C64RV3OraclesIdExtendsGetResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.NotFoundResponse,
      isError: true
    }
  },
  urlParameters: [Parameters.$host, Parameters.id3],
  headerParameters: [Parameters.accept],
  serializer
};
const getOracleQueriesOperationSpec = {
  path: "/v3/oracles/{id}/queries",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Paths8722JhV3OraclesIdQueriesGetResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.NotFoundResponse,
      isError: true
    }
  },
  urlParameters: [Parameters.$host, Parameters.id3],
  headerParameters: [Parameters.accept],
  serializer
};
const getOracleResponsesOperationSpec = {
  path: "/v3/oracles/{id}/responses",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PathsVron83V3OraclesIdResponsesGetResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.NotFoundResponse,
      isError: true
    }
  },
  urlParameters: [Parameters.$host, Parameters.id3],
  headerParameters: [Parameters.accept],
  serializer
};
const getStatsOperationSpec = {
  path: "/v3/stats",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Stats
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getActiveAccountsStatsOperationSpec = {
  path: "/v3/stats/active-accounts",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PathsCgzmimV3StatsActiveAccountsGetResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.limit, Parameters.intervalBy, Parameters.direction32],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getAex9TransfersStatsOperationSpec = {
  path: "/v3/stats/aex9-transfers",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Paths1UxyhelV3StatsAex9TransfersGetResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.limit, Parameters.intervalBy1, Parameters.minStartDate, Parameters.maxStartDate, Parameters.direction33],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getBlocksStatsOperationSpec = {
  path: "/v3/stats/blocks",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Paths1Sxjoy0V3StatsBlocksGetResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.limit, Parameters.minStartDate, Parameters.maxStartDate, Parameters.intervalBy2, Parameters.typeParam1, Parameters.direction34],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getContractsStatsOperationSpec = {
  path: "/v3/stats/contracts",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PathsWbrhqnV3StatsContractsGetResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.limit, Parameters.minStartDate, Parameters.maxStartDate, Parameters.intervalBy3, Parameters.direction35],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getDeltaStatsOperationSpec = {
  path: "/v3/stats/delta",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Paths5Xf9ScV3StatsDeltaGetResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.limit, Parameters.scope, Parameters.direction36],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getDifficultyStatsOperationSpec = {
  path: "/v3/stats/difficulty",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Paths1D7Up0DV3StatsDifficultyGetResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.limit, Parameters.minStartDate, Parameters.maxStartDate, Parameters.intervalBy4, Parameters.direction37],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getHashrateStatsOperationSpec = {
  path: "/v3/stats/hashrate",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PathsR51VshV3StatsHashrateGetResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.limit, Parameters.minStartDate, Parameters.maxStartDate, Parameters.intervalBy5, Parameters.direction38],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getMinerStatsOperationSpec = {
  path: "/v3/stats/miners",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PathsA8Q6T7V3StatsMinersGetResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.limit, Parameters.direction39],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getNamesStatsOperationSpec = {
  path: "/v3/stats/names",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PathsCeyhpaV3StatsNamesGetResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.limit, Parameters.minStartDate, Parameters.maxStartDate, Parameters.intervalBy6, Parameters.direction40],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getTotalStatsOperationSpec = {
  path: "/v3/stats/total",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PathsJoz7P5V3StatsTotalGetResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.limit, Parameters.scope, Parameters.direction41],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getTotalAccountsStatsOperationSpec = {
  path: "/v3/stats/total-accounts",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Paths15F3FfuV3StatsTotalAccountsGetResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.limit, Parameters.intervalBy7, Parameters.direction42],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getTransactionsStatsOperationSpec = {
  path: "/v3/stats/transactions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Paths1IfhshmV3StatsTransactionsGetResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.limit, Parameters.minStartDate, Parameters.maxStartDate, Parameters.intervalBy8, Parameters.txType, Parameters.direction43],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getStatusOperationSpec = {
  path: "/v3/status",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Status
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getTransactionsOperationSpec = {
  path: "/v3/transactions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Paths1Pymq07V3TransactionsGetResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.limit, Parameters.contract, Parameters.typeParam2, Parameters.typeGroup, Parameters.account, Parameters.channel, Parameters.oracle, Parameters.senderId, Parameters.recipientId, Parameters.entrypoint, Parameters.scope2, Parameters.direction44],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getTransactionsCountOperationSpec = {
  path: "/v3/transactions/count",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Number"
        }
      }
    }
  },
  queryParameters: [Parameters.scope, Parameters.txType, Parameters.id4],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getPendingTransactionsOperationSpec = {
  path: "/v3/transactions/pending",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PathsUq0T7JV3TransactionsPendingGetResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.limit, Parameters.direction45],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getPendingTransactionsCountOperationSpec = {
  path: "/v3/transactions/pending/count",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Number"
        }
      }
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getTransactionOperationSpec = {
  path: "/v3/transactions/{hash}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Transaction
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.NotFoundResponse,
      isError: true
    }
  },
  urlParameters: [Parameters.$host, Parameters.hash2],
  headerParameters: [Parameters.accept],
  serializer
};
const getTransfersOperationSpec = {
  path: "/v3/transfers",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PathsA7P0KiV3TransfersGetResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.limit, Parameters.scope, Parameters.direction46],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
export const operationSpecs = [getAccountActivitiesOperationSpec, getAex141OwnedTokensOperationSpec, getAex9AccountBalancesOperationSpec, getAccountDexSwapsOperationSpec, getAccountNameClaimsOperationSpec, getAccountPointeesOperationSpec, getAccountTransactionsCountOperationSpec, getSortedAex141ContractsOperationSpec, getAex141ContractTemplatesOperationSpec, getAex141TemplateTokensOperationSpec, getAex141ContractTokensOperationSpec, getAex141TokenOwnerOperationSpec, getAex141ContractTransfersOperationSpec, getAex141ByContractOperationSpec, getSortedAex9TokensOperationSpec, getAex9TokensCountOperationSpec, getAex9ContractBalancesOperationSpec, getAex9ContractAccountBalanceOperationSpec, getAex9ByContractOperationSpec, getChannelsOperationSpec, getChannelOperationSpec, getContractCallsOperationSpec, getContractLogsOperationSpec, getContractOperationSpec, getDexSwapsOperationSpec, getDexSwapsByContractIdOperationSpec, getEpochsOperationSpec, getEpochTopOperationSpec, getSchedulesOperationSpec, getScheduleOperationSpec, getValidatorsOperationSpec, getValidatorOperationSpec, getValidatorDelegatesOperationSpec, getTopValidatorDelegatesOperationSpec, getKeyBlocksOperationSpec, getKeyBlockOperationSpec, getKeyBlockMicroBlocksOperationSpec, getMicroBlockOperationSpec, getMicroBlockTransactionsOperationSpec, getNamesOperationSpec, getNamesAuctionsOperationSpec, getNameAuctionOperationSpec, getNameAuctionClaimsOperationSpec, getNamesCountOperationSpec, getNameOperationSpec, getNameClaimsOperationSpec, getNameTransfersOperationSpec, getNameUpdatesOperationSpec, getOraclesOperationSpec, getOracleOperationSpec, getOracleExtendsOperationSpec, getOracleQueriesOperationSpec, getOracleResponsesOperationSpec, getStatsOperationSpec, getActiveAccountsStatsOperationSpec, getAex9TransfersStatsOperationSpec, getBlocksStatsOperationSpec, getContractsStatsOperationSpec, getDeltaStatsOperationSpec, getDifficultyStatsOperationSpec, getHashrateStatsOperationSpec, getMinerStatsOperationSpec, getNamesStatsOperationSpec, getTotalStatsOperationSpec, getTotalAccountsStatsOperationSpec, getTransactionsStatsOperationSpec, getStatusOperationSpec, getTransactionsOperationSpec, getTransactionsCountOperationSpec, getPendingTransactionsOperationSpec, getPendingTransactionsCountOperationSpec, getTransactionOperationSpec, getTransfersOperationSpec];
//# sourceMappingURL=middleware.js.map