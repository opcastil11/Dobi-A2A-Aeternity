import { MiddlewarePage } from "../../../utils/MiddlewarePage.js";
import * as coreClient from "@azure/core-client";
/** Activity related to an account */
export interface Activity {
    /** Micro block hash */
    blockHash: `mh_${string}`;
    blockTime: Date;
    /** The block height */
    height: number;
    /** The event type */
    type: ActivityType;
    /** A mix of all activity types. */
    payload: ActivityPayload;
}
/** A mix of all activity types. */
export interface ActivityPayload {
    /** The micro block hash in which the transaction happened */
    blockHash?: `mh_${string}`;
    blockHeight?: number;
    /** Encoded transaction */
    encodedTx?: `tx_${string}`;
    /** Transaction hash */
    hash?: `th_${string}`;
    /** The micro block index */
    microIndex?: number;
    microTime?: Date;
    /** The signatures */
    signatures?: string[];
    /** The transaction */
    tx?: Tx;
    /** The amount of AE tokens */
    amount?: bigint;
    /** Contract address */
    contractId?: `ct_${string}`;
    logIdx?: number;
    /** Account address */
    recipientId?: `ak_${string}`;
    /** Account address */
    senderId?: `ak_${string}`;
    /** Transaction hash */
    txHash?: `th_${string}`;
    /** Account address */
    recipient?: `ak_${string}`;
    /** Account address */
    sender?: `ak_${string}`;
    tokenId?: number;
    /** The contract creation transaction hash */
    contractTxHash?: `th_${string}`;
    /** The contract call transaction hash */
    callTxHash?: `th_${string}`;
    /** The name of the function */
    function?: string;
    /** The transaction object */
    internalTx?: Record<string, unknown>;
    /** The height in which the internal call happened */
    height?: number;
    /** The kind of internal transfer */
    kind?: ActivityPayloadKind;
    /** The transaction hash of a transaction related to the internal transfer */
    refTxHash?: `th_${string}`;
}
/** A mix of all transaction types. */
export interface Tx {
    /** Base58Check encoded tagged pubkey */
    recipientId?: string;
    amount?: bigint;
    fee: bigint;
    ttl?: number;
    /** Base58Check encoded tagged pubkey */
    senderId?: string;
    nonce?: number;
    /** Base64Check encoded tagged byte array */
    payload?: string;
    /** Base58Check encoded tagged pubkey */
    initiatorId?: string;
    initiatorAmount?: bigint;
    /** Base58Check encoded tagged pubkey */
    responderId?: string;
    responderAmount?: bigint;
    channelReserve?: bigint;
    lockPeriod?: number;
    /** Base58Check encoded tagged pubkey */
    stateHash?: string;
    delegateIds?: Delegates;
    /** Base58Check encoded tagged pubkey */
    channelId?: string;
    /** Base58Check encoded tagged pubkey */
    fromId?: string;
    round?: number;
    /** Base58Check encoded tagged pubkey */
    toId?: string;
    update?: OffChainUpdate;
    /** Base64Check encoded tagged byte array */
    offchainTrees?: string;
    initiatorAmountFinal?: number;
    responderAmountFinal?: number;
    /** Base64Check encoded tagged byte array */
    poi?: string;
    initiatorDelegateIds?: string[];
    responderDelegateIds?: string[];
    queryFormat?: string;
    responseFormat?: string;
    queryFee?: bigint;
    oracleTtl?: RelativeTTL;
    /** Base58Check encoded tagged pubkey */
    accountId?: string;
    abiVersion?: number;
    /** Base58Check encoded tagged pubkey */
    oracleId?: string;
    query?: string;
    queryTtl?: Ttl;
    responseTtl?: RelativeTTL;
    /** Base58Check encoded tagged value */
    queryId?: string;
    response?: string;
    /** Base58Check encoded tagged value */
    commitmentId?: string;
    name?: string;
    nameSalt?: number;
    nameFee?: bigint;
    /** Base58Check encoded tagged value */
    nameId?: string;
    nameTtl?: number;
    pointers?: NamePointer[];
    clientTtl?: number;
    /** Base58Check encoded tagged pubkey */
    ownerId?: string;
    /** Base64Check encoded tagged byte array */
    code?: string;
    vmVersion?: number;
    deposit?: bigint;
    gas?: number;
    gasPrice?: bigint;
    /** Base64Check encoded tagged byte array */
    callData?: string;
    /** Base58Check encoded tagged pubkey */
    callerId?: string;
    /** Base58Check encoded tagged pubkey */
    contractId?: string;
    /** Contract authorization function hash (hex encoded) */
    authFun?: string;
    /** Base58Check encoded tagged pubkey */
    gaId?: string;
    /** Base64Check encoded tagged byte array */
    authData?: string;
    tx?: SignedTx;
    /** Base58Check encoded tagged pubkey */
    payerId?: string;
    version: number;
    type: TxType;
}
export interface Delegates {
    initiator?: string[];
    responder?: string[];
}
export interface OffChainUpdate {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    op: "OffChainUpdate";
}
export interface RelativeTTL {
    type: "delta";
    value: number;
}
export interface Ttl {
    type: TTLType;
    value: number;
}
export interface NamePointer {
    key: string;
    /** Base58Check encoded tagged value */
    encodedKey?: string;
    /** Base58Check encoded tagged pubkey */
    id: string;
}
export interface SignedTx {
    /** A mix of all transaction types. */
    tx: Tx;
    blockHeight?: number;
    /** Base58Check encoded tagged hash */
    blockHash?: string;
    /** Base58Check encoded tagged hash */
    hash?: string;
    /** Base64Check encoded tagged byte array */
    encodedTx?: string;
    /** At least one signature is required unless for Generalized Account Meta transactions */
    signatures?: string[];
}
/** Error response from the API */
export interface ErrorResponse {
    /** The message of the error raised */
    error: string;
}
/** Response Schema for owners of AEX-141 tokens */
export interface Aex141TokenResponse {
    /** NFT contract id */
    contractId: `ct_${string}`;
    /** Account address */
    ownerId?: `ak_${string}`;
    /** Non-fungible token id */
    tokenId: number;
}
/** Response Schema for AEX9 balance responses */
export interface Aex9BalanceResponse {
    /** Amount of AEX9 token */
    amount: bigint;
    /** Block hash, indicating a state of a balance for that block */
    blockHash: number;
    /** Contract id of AEX9 token */
    contractId: `ct_${string}`;
    /** Number of decimals of AEX9 token */
    decimals: number;
    /** Block height, indicating a state of a balance for that block height */
    height: number;
    /** Name of AEX9 token */
    tokenName: string;
    /** Symbol of AEX9 token */
    tokenSymbol: string;
    /** Transaction hash, indicating a state of a balance for that block height */
    txHash: `th_${string}`;
    /** Transaction index, indicating a state of a balance for that block height */
    txIndex: number;
    /** Transaction type, indicating a state of a balance for that block height */
    txType: string;
}
/** DEX swap */
export interface DexSwap {
    amounts: DexSwapAmounts;
    action: DexSwapAction;
    /** Account address */
    caller: `ak_${string}`;
    fromToken: string;
    toToken: string;
    logIdx: number;
    /** Account address */
    toAccount: `ak_${string}`;
    /** Transaction hash */
    txHash: `th_${string}`;
    /** Contract address */
    fromContract: `ct_${string}`;
    /** Contract address */
    toContract: `ct_${string}`;
    fromAmount: bigint;
    toAmount: bigint;
    fromDecimals: number;
    toDecimals: number;
    microTime: Date;
    height: number;
}
export interface DexSwapAmounts {
    amount0In: bigint;
    amount1In: bigint;
    amount0Out: bigint;
    amount1Out: bigint;
}
/** Name Claim */
export interface NameClaim {
    activeFrom: number;
    /** Transaction hash */
    sourceTxHash: `th_${string}`;
    sourceTxType: string;
    /** Micro block hash */
    blockHash: `mh_${string}`;
    height: number;
    tx: NameClaimTx;
    internalSource?: boolean;
}
export interface NameClaimTx {
    name: string;
    nameSalt: number;
    nameFee?: bigint;
    fee: bigint;
    ttl?: number;
    /** Base58Check encoded tagged pubkey */
    accountId: string;
    nonce?: number;
}
/** Resource not found on the API */
export interface NotFoundResponse {
    /** The message of the error raised */
    error: string;
}
/** Pointee */
export interface Pointee {
    active: boolean;
    /** AENS name */
    name: `${string}.chain`;
    key: string;
    /** Micro block hash */
    blockHash: `mh_${string}`;
    tx: NameUpdateTx;
    sourceTxType: string;
    /** Transaction hash */
    sourceTxHash: `th_${string}`;
    blockHeight: number;
    blockTime: Date;
}
export interface NameUpdateTx {
    /** Base58Check encoded tagged value */
    nameId: string;
    nameTtl: number;
    pointers: NamePointer[];
    clientTtl: number;
    fee: bigint;
    ttl?: number;
    /** Base58Check encoded tagged pubkey */
    accountId: string;
    nonce?: number;
}
export interface PathsXcg812V3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchema {
    /** The contract create transactions count */
    contractCreateTx?: Get200ApplicationJsonProperties;
    /** The contract call transactions count */
    contractCallTx?: PathsEvgmfsV3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesContractCallTx;
    /** The ga attach transactions count */
    gaAttachTx?: Paths1Mat0BzV3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesGaAttachTx;
    /** The ga meta transactions count */
    gaMetaTx?: Paths1Smy8TV3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesGaMetaTx;
    /** The channel close mutual transactions count */
    channelCloseMutualTx?: PathsTachlnV3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesChannelCloseMutualTx;
    /** The channel close solo transactions count */
    channelCloseSoloTx?: Paths1AeqodeV3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesChannelCloseSoloTx;
    /** The channel create transactions count */
    channelCreateTx?: PathsGp6EyrV3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesChannelCreateTx;
    /** The channel deposit transactions count */
    channelDepositTx?: Paths10Z6Jt8V3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesChannelDepositTx;
    /** The channel force progress transactions count */
    channelForceProgressTx?: Paths1Jkl3L3V3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesChannelForceProgressTx;
    /** The channel set delegates transactions count */
    channelSetDelegatesTx?: PathsN9Iv8YV3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesChannelSetDelegatesTx;
    /** The channel settle transactions count */
    channelSettleTx?: PathsCsym65V3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesChannelSettleTx;
    /** The channel slash transactions count */
    channelSlashTx?: PathsEwav40V3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesChannelSlashTx;
    /** The channel snapshot solo transactions count */
    channelSnapshotSoloTx?: Paths5Ehb0PV3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesChannelSnapshotSoloTx;
    /** The channel withdraw transactions count */
    channelWithdrawTx?: Paths1Qk8BkgV3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesChannelWithdrawTx;
    /** The name claim transactions count */
    nameClaimTx?: PathsC7WhtoV3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesNameClaimTx;
    /** The name preclaim transactions count */
    namePreclaimTx?: Paths1R4Z885V3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesNamePreclaimTx;
    /** The name revoke transactions count */
    nameRevokeTx?: PathsKrpz02V3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesNameRevokeTx;
    /** The name transfer transactions count */
    nameTransferTx?: PathsPs07B4V3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesNameTransferTx;
    /** The name update transactions count */
    nameUpdateTx?: PathsTug6HrV3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesNameUpdateTx;
    /** The oracle extend transactions count */
    oracleExtendTx?: Paths17Dchb7V3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesOracleExtendTx;
    /** The oracle query transactions count */
    oracleQueryTx?: Paths1Ngkd7FV3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesOracleQueryTx;
    /** The oracle register transactions count */
    oracleRegisterTx?: PathsMvqgifV3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesOracleRegisterTx;
    /** The oracle response transactions count */
    oracleResponseTx?: Paths1U2Ve7RV3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesOracleResponseTx;
    /** The paying for transactions count */
    payingForTx?: Paths1N757S0V3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesPayingForTx;
    /** The spend transactions count */
    spendTx?: Paths11Bqs5V3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesSpendTx;
    /** The channel offchain transactions count */
    channelOffchainTx?: Paths4Pjk8DV3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesChannelOffchainTx;
    /** The total transactions count */
    total: number;
}
/** The contract create transactions count */
export interface Get200ApplicationJsonProperties {
    /** The number of times the account was owner id in contract create transaction */
    ownerId?: number;
}
/** The contract call transactions count */
export interface PathsEvgmfsV3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesContractCallTx {
    /** The number of times the account was contract id in contract call transaction */
    contractId?: number;
    /** The number of times the account was caller id in contract call transaction */
    callerId?: number;
}
/** The ga attach transactions count */
export interface Paths1Mat0BzV3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesGaAttachTx {
    /** The number of times the account was owner id in ga attach transaction */
    ownerId?: number;
}
/** The ga meta transactions count */
export interface Paths1Smy8TV3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesGaMetaTx {
    /** The number of times the account was ga id in ga meta transaction */
    gaId?: number;
}
/** The channel close mutual transactions count */
export interface PathsTachlnV3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesChannelCloseMutualTx {
    /** The number of times the account was channel id in channel close mutual transaction */
    channelId?: number;
    /** The number of times the account was from id in channel close mutual transaction */
    fromId?: number;
}
/** The channel close solo transactions count */
export interface Paths1AeqodeV3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesChannelCloseSoloTx {
    /** The number of times the account was channel id in channel close solo transaction */
    channelId?: number;
    /** The number of times the account was from id in channel close solo transaction */
    fromId?: number;
}
/** The channel create transactions count */
export interface PathsGp6EyrV3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesChannelCreateTx {
    /** The number of times the account was initiator id in channel create transaction */
    initiatorId?: number;
    /** The number of times the account was responder id in channel create transaction */
    responderId?: number;
}
/** The channel deposit transactions count */
export interface Paths10Z6Jt8V3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesChannelDepositTx {
    /** The number of times the account was channel id in channel deposit transaction */
    channelId?: number;
    /** The number of times the account was from id in channel deposit transaction */
    fromId?: number;
}
/** The channel force progress transactions count */
export interface Paths1Jkl3L3V3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesChannelForceProgressTx {
    /** The number of times the account was channel id in channel force progress transaction */
    channelId?: number;
    /** The number of times the account was from id in channel force progress transaction */
    fromId?: number;
}
/** The channel set delegates transactions count */
export interface PathsN9Iv8YV3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesChannelSetDelegatesTx {
    /** The number of times the account was channel id in channel set delegates transaction */
    channelId?: number;
    /** The number of times the account was from id in channel set delegates transaction */
    fromId?: number;
}
/** The channel settle transactions count */
export interface PathsCsym65V3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesChannelSettleTx {
    /** The number of times the account was channel id in channel settle transaction */
    channelId?: number;
    /** The number of times the account was from id in channel settle transaction */
    fromId?: number;
}
/** The channel slash transactions count */
export interface PathsEwav40V3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesChannelSlashTx {
    /** The number of times the account was channel id in channel slash transaction */
    channelId?: number;
    /** The number of times the account was from id in channel slash transaction */
    fromId?: number;
}
/** The channel snapshot solo transactions count */
export interface Paths5Ehb0PV3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesChannelSnapshotSoloTx {
    /** The number of times the account was channel id in channel snapshot solo transaction */
    channelId?: number;
    /** The number of times the account was from id in channel snapshot solo transaction */
    fromId?: number;
}
/** The channel withdraw transactions count */
export interface Paths1Qk8BkgV3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesChannelWithdrawTx {
    /** The number of times the account was channel id in channel withdraw transaction */
    channelId?: number;
    /** The number of times the account was to id in channel withdraw transaction */
    toId?: number;
}
/** The name claim transactions count */
export interface PathsC7WhtoV3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesNameClaimTx {
    /** The number of times the account was account id in name claim transaction */
    accountId?: number;
}
/** The name preclaim transactions count */
export interface Paths1R4Z885V3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesNamePreclaimTx {
    /** The number of times the account was account id in name preclaim transaction */
    accountId?: number;
    /** The number of times the account was commitment id in name preclaim transaction */
    commitmentId?: number;
}
/** The name revoke transactions count */
export interface PathsKrpz02V3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesNameRevokeTx {
    /** The number of times the account was account id in name revoke transaction */
    accountId?: number;
    /** The number of times the account was name id in name revoke transaction */
    nameId?: number;
}
/** The name transfer transactions count */
export interface PathsPs07B4V3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesNameTransferTx {
    /** The number of times the account was recipient id in name transfer transaction */
    recipientId?: number;
    /** The number of times the account was account id in name transfer transaction */
    accountId?: number;
    /** The number of times the account was name id in name transfer transaction */
    nameId?: number;
}
/** The name update transactions count */
export interface PathsTug6HrV3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesNameUpdateTx {
    /** The number of times the account was account id in name update transaction */
    accountId?: number;
    /** The number of times the account was name id in name update transaction */
    nameId?: number;
}
/** The oracle extend transactions count */
export interface Paths17Dchb7V3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesOracleExtendTx {
    /** The number of times the account was oracle id in oracle extend transaction */
    oracleId?: number;
}
/** The oracle query transactions count */
export interface Paths1Ngkd7FV3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesOracleQueryTx {
    /** The number of times the account was sender id in oracle query transaction */
    senderId?: number;
    /** The number of times the account was oracle id in oracle query transaction */
    oracleId?: number;
}
/** The oracle register transactions count */
export interface PathsMvqgifV3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesOracleRegisterTx {
    /** The number of times the account was account id in oracle register transaction */
    accountId?: number;
}
/** The oracle response transactions count */
export interface Paths1U2Ve7RV3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesOracleResponseTx {
    /** The number of times the account was oracle id in oracle response transaction */
    oracleId?: number;
}
/** The paying for transactions count */
export interface Paths1N757S0V3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesPayingForTx {
    /** The number of times the account was payer id in paying for transaction */
    payerId?: number;
}
/** The spend transactions count */
export interface Paths11Bqs5V3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesSpendTx {
    /** The number of times the account was sender id in spend transaction */
    senderId?: number;
    /** The number of times the account was recipient id in spend transaction */
    recipientId?: number;
}
/** The channel offchain transactions count */
export interface Paths4Pjk8DV3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesChannelOffchainTx {
    /** The number of times the account was channel id in channel offchain transaction */
    channelId?: number;
}
/** Response Schema for AEX141 contract */
export interface Aex141Response {
    /** Metadata base url */
    baseUrl: string;
    /** NFT contract id */
    contractId: `ct_${string}`;
    /** Transaction hash of the contract creation */
    contractTxHash: `th_${string}`;
    /** Extensions implemented by the contract */
    extensions: string[];
    /** Limit for amount of tokens or templates */
    limits: Record<string, unknown>;
    /** True if the contract is invalid */
    invalid: boolean;
    creationTime: Date;
    /** Block height of the contract creation */
    blockHeight: number;
}
/** Response Schema for templates of a AEX-141 contract */
export interface Aex141TemplatesResponse {
    /** NFT contract id */
    contractId: `ct_${string}`;
    /** Template edition details */
    edition?: Record<string, unknown>;
    /** Log index of the TemplateCreation */
    logIdx: number;
    /** Template id of AEX-141 tokens */
    templateId: number;
    /** Transaction hash of the TemplateCreation */
    txHash: `th_${string}`;
}
/** Response Schema for template tokens of a AEX-141 contract */
export interface Aex141TemplateTokensResponse {
    /** Owner wallet address */
    ownerId: `ak_${string}`;
    /** Mint event index */
    logIdx: number;
    /** NFT id */
    tokenId: number;
    /** Mint transaction hash */
    txHash: `th_${string}`;
}
/** Response schema for AEX-141 token detail */
export interface Aex141TokenDetailResponse {
    /** NFT contract id */
    contractId: `ct_${string}`;
    /** Account address */
    ownerId: `ak_${string}`;
    /** Non-fungible token id */
    tokenId: number;
    /** The metadata associated to this NFT */
    metadata: Record<string, unknown>;
}
/** AEx141 Transfer */
export interface Aex141TransferEvent {
    blockHeight: number;
    /** Contract address */
    contractId: `ct_${string}`;
    logIdx: number;
    microIndex: number;
    microTime: Date;
    /** Account address */
    recipient: `ak_${string}`;
    /** Account address */
    sender: `ak_${string}`;
    tokenId: number;
    /** Transaction hash */
    txHash: `th_${string}`;
}
/** Response Schema for AEX9 contract */
export interface Aex9Response {
    /** Id of the contract of the AEX9 tokens */
    contractId: `ct_${string}`;
    /** Transaction hash of the contract creation */
    contractTxHash: `th_${string}`;
    /** Token supply right after contract's creation */
    initialSupply: bigint;
    /** Token supply updated on event basis (Mint, Burn, Swap) */
    eventSupply: bigint;
    /** The number of decimals for AEX9 token */
    decimals: number;
    /** Extensions implemented by the contract */
    extensions?: string[];
    /** Count of accounts having balance (nil when contract is not complaint) */
    holders: number;
    /** Name of AEX9 token */
    name: string;
    /** Symbol of AEX9 token */
    symbol: string;
    /** True if the contract is invalid */
    invalid: boolean;
}
export interface Paths19IxhsmV3Aex9CountGetResponses200ContentApplicationJsonSchema {
    data: number;
}
/** Response Schema for AEX9 contract balances responses */
export interface Aex9ContractBalanceResponse {
    /** The wallet pubkey */
    accountId: `ak_${string}`;
    /** The balance amount */
    amount: bigint;
    /** The block hash, indicating a state of a balance for that block */
    blockHash: number;
    /** The contract id of given token */
    contractId: number;
    /** The block height, indicating a state of a balance for that block height */
    height: number;
    /** The hash of the last transaction that changed the balance */
    lastTxHash: `th_${string}`;
    /** The index of the event log that changed the balance */
    lastLogIdx: number;
}
export interface PathsKr825V3Aex9ContractidBalancesAccountidGetResponses200ContentApplicationJsonSchema {
    /** The account present on a AEX9 */
    account: `ak_${string}`;
    /** The amount of AEX9 token */
    amount: bigint;
    /** The contract id of given token */
    contract: `ct_${string}`;
}
export interface Get200ApplicationJsonAllOfPropertiesItemsItem {
    /** The account present on a AEX9 */
    account: `ak_${string}`;
    /** The amount of AEX9 token */
    amount: bigint;
    /** The contract id of given token */
    contract: `ct_${string}`;
    /** The block height, indicating a state of a balance for that block height */
    height: number;
}
export interface Channel {
    /** Channel is active */
    active: boolean;
    /** Balance currently left in the channel */
    amount: bigint;
    /** Channel ID */
    channel: `ch_${string}`;
    /** Minimum amount for sufficient funds */
    channelReserve: bigint;
    /** Pubkeys of delegated accounts */
    delegateIds: Record<string, unknown>;
    /** Channel initiator pubkey */
    initiator: `ak_${string}`;
    /** Amount owned by initiator */
    initiatorAmount: bigint;
    /** The last height in which the channel was updated on chain */
    lastUpdatedHeight: number;
    /** The transaction type of the last transaction that updated the channel */
    lastUpdatedTxType: string;
    lastUpdatedTime: Date;
    /** The hash of the last transaction that updated the channel */
    lastUpdatedTxHash: `th_${string}`;
    /** Amount of heights locked after a solo closing */
    lockPeriod: number;
    /** Non-inclusive height until which the channel is locked */
    lockedUntil: number;
    /** The channel responder pubkey */
    responder: `ak_${string}`;
    /** Amount owned by responder */
    responderAmount: bigint;
    /** Round after last transaction */
    round: number;
    /** Round of last solo transaction */
    soloRound: number;
    /** The hash of the current channel state */
    stateHash: `st_${string}`;
    /** The amount of times the channel's been updated by any of the channel transactions */
    updatesCount: number;
}
/** ContractCall */
export interface ContractCall {
    /** Micro block hash */
    blockHash: `mh_${string}`;
    /** Transaction hash */
    callTxHash: `th_${string}`;
    /** Contract address */
    contractId: `ct_${string}`;
    /** Transaction hash */
    contractTxHash: `th_${string}`;
    function: string;
    height: number;
    /** Any object */
    internalTx: Record<string, unknown>;
    localIdx: number;
    microIndex: number;
}
/** ContractLog */
export interface ContractLog {
    args: string[];
    /** Micro block hash */
    blockHash: `mh_${string}`;
    blockTime: Date;
    /** Transaction hash */
    callTxHash: `th_${string}`;
    /** Contract address */
    contractId: `ct_${string}`;
    /** Transaction hash */
    contractTxHash: `th_${string}`;
    data: string;
    eventHash: string;
    eventName: string | null;
    /** Contract address */
    extCallerContractId: `ct_${string}` | null;
    /** Transaction hash */
    extCallerContractTxHash: `th_${string}` | null;
    height: number;
    logIdx: number;
    microIndex: number;
    parentContractId: number | null;
}
/** Contract creation info */
export interface Contract {
    aexnType: string | null;
    /** Micro block hash */
    blockHash: `mh_${string}`;
    /** Contract address */
    contract: `ct_${string}`;
    /** Transaction hash */
    sourceTxHash: `th_${string}`;
    sourceTxType: string;
    createTx: ContractCreateTx;
}
export interface ContractCreateTx {
    /** Base58Check encoded tagged pubkey */
    ownerId: string;
    nonce?: number;
    /** Base64Check encoded tagged byte array */
    code: string;
    vmVersion: number;
    abiVersion: number;
    deposit: bigint;
    amount: bigint;
    gas: number;
    gasPrice: bigint;
    fee: bigint;
    ttl?: number;
    /** Base64Check encoded tagged byte array */
    callData: string;
}
/** Epoch information */
export interface EpochInfo {
    epoch: number;
    first: number;
    last: number;
    length: number;
    seed: string;
    lastPinHeight: number;
    parentBlockHash: string;
    lastLeader: string;
    epochStartTime: number;
    validators: EpochInfoValidatorsItem[];
}
export interface EpochInfoValidatorsItem {
    validator?: string;
    stake?: number;
}
/** Schedule information */
export interface Schedule {
    height: number;
    leader: string;
}
/** Validator information */
export interface Validator {
    epoch: number;
    validator: string;
    totalStakes: number;
    delegates: number;
    rewardsEarned: number;
    /** Dictionary of <integer> */
    pinningHistory: {
        [propertyName: string]: number;
    };
}
/** Delegate information */
export interface Delegate {
    epoch: number;
    delegate: string;
    stake: number;
    validator: string;
}
export interface KeyBlock {
    /** Base58Check encoded tagged hash */
    hash: string;
    height: number;
    /** Base58Check encoded tagged hash */
    prevHash: string;
    /** Base58Check encoded tagged hash */
    prevKeyHash: string;
    /** Base58Check encoded tagged hash */
    stateHash: string;
    /** Base58Check encoded tagged pubkey */
    miner: string;
    /** Base58Check encoded tagged pubkey */
    beneficiary: string;
    target: number;
    pow?: number[];
    nonce?: number;
    time: Date;
    version: number;
    /** Base64Check encoded tagged byte array */
    info: string;
}
export interface MicroBlockHeader {
    /** Base58Check encoded tagged hash */
    hash: string;
    height: number;
    /** Base58Check encoded tagged hash */
    pofHash: string;
    /** Base58Check encoded tagged hash */
    prevHash: string;
    /** Base58Check encoded tagged hash */
    prevKeyHash: string;
    /** Base58Check encoded tagged hash */
    stateHash: string;
    /** Base58Check encoded tagged hash */
    txsHash: string;
    /** Base58Check encoded tagged value */
    signature: string;
    time: Date;
    version: number;
}
/** Transaction */
export interface Transaction {
    /** Micro block hash */
    blockHash: `mh_${string}`;
    /** The block height */
    blockHeight: number;
    /** Encoded transaction */
    encodedTx: `tx_${string}`;
    /** Transaction hash */
    hash: `th_${string}`;
    /** The micro block index */
    microIndex: number;
    microTime: Date;
    /** The signatures */
    signatures: string[];
    /** The transaction */
    tx: Tx;
}
/** Name */
export interface Name {
    active: boolean;
    /** AENS name hash */
    hash: `nm_${string}`;
    activeFrom: number;
    approximateActivationTime: Date;
    approximateExpireTime: Date;
    expireHeight: number;
    pointers: NamePointer[];
    /** Auction */
    auction: Auction | null;
    auctionTimeout: number;
    ownership: NameOwnership;
    /** AENS name */
    name: `${string}.chain`;
    nameFee: bigint;
    revoke: NameTx | null;
    claimsCount?: number;
}
/** Auction */
export interface Auction {
    auctionEnd: number;
    activationTime: Date;
    approximateExpireTime: Date;
    lastBid: AuctionLastBid;
    /** AENS name */
    name: `${string}.chain`;
    nameFee: bigint;
    claimsCount: number;
}
export interface AuctionLastBid {
    /** Micro block hash */
    blockHash: `mh_${string}`;
    blockHeight: number;
    /** Encoded transaction */
    encodedTx: `tx_${string}`;
    /** Transaction hash */
    hash: `th_${string}`;
    microIndex: number;
    microTime: Date;
    signatures: string[];
    tx: AuctionLastBidTx;
}
export interface Components17W16A5SchemasAuctionPropertiesLastBidPropertiesTxAllof1 {
    /** AENS name hash */
    nameId: `nm_${string}`;
    type: string;
    version: number;
}
export interface NameOwnership {
    /** Account address */
    current?: `ak_${string}`;
    /** Account address */
    original?: `ak_${string}`;
}
export interface NameTx {
    /** Micro block hash */
    blockHash: `mh_${string}`;
    blockHeight: number;
    /** Transaction hash */
    hash: `th_${string}`;
    microIndex: number;
    microTime: Date;
    signatures: string[];
    tx: NameTxTx;
}
export interface NameRevokeTx {
    /** Base58Check encoded tagged value */
    nameId: string;
    fee: bigint;
    ttl?: number;
    /** Base58Check encoded tagged pubkey */
    accountId: string;
    nonce?: number;
}
export interface Components171VsjiSchemasNametxPropertiesTxAllof1 {
    type: string;
    version: number;
}
export interface PathsCrb9BgV3NamesAuctionsIdClaimsGetResponses200ContentApplicationJsonSchema {
    data: NameClaim[];
}
/** Name Transfer */
export interface NameTransfer {
    activeFrom: number;
    /** Micro block hash */
    blockHash: `mh_${string}`;
    height: number;
    /** Transaction hash */
    sourceTxHash: `th_${string}`;
    sourceTxType: string;
    tx: NameTransferTx;
    internalSource?: boolean;
}
export interface NameTransferTx {
    /** Base58Check encoded tagged value */
    nameId: string;
    /** Base58Check encoded tagged pubkey */
    recipientId: string;
    fee: bigint;
    ttl?: number;
    /** Base58Check encoded tagged pubkey */
    accountId: string;
    nonce?: number;
}
/** Name Update */
export interface NameUpdate {
    activeFrom: number;
    /** Micro block hash */
    blockHash: `mh_${string}`;
    height: number;
    /** Transaction hash */
    sourceTxHash: `th_${string}`;
    sourceTxType: string;
    tx: NameUpdateTx;
    internalSource?: boolean;
}
export interface Oracle {
    /** The oracle active status */
    active: boolean;
    /** The block height when the oracle became active */
    activeFrom: number;
    approximateExpireTime: Date;
    /** The block height when the oracle expires */
    expireHeight: number;
    registerTime: Date;
    /** The transaction hash in which the oracle was registered, use `register.hash` instead */
    registerTxHash: `th_${string}`;
    /** The oracle's query and response formats */
    format: OracleFormat;
    /** Oracle address */
    oracle: `ok_${string}`;
    /** The query fee */
    queryFee: bigint;
    register: OracleTx;
}
/** The oracle's query and response formats */
export interface OracleFormat {
    /** The query format */
    query: string;
    /** The response format */
    response: string;
}
export interface OracleTx {
    /** Micro block hash */
    blockHash: `mh_${string}`;
    blockHeight: number;
    /** Transaction hash */
    hash: `th_${string}`;
    microIndex: number;
    microTime: Date;
    signatures: string[];
    /** Encoded transaction */
    encodedTx: `tx_${string}`;
    tx: OracleTxTx;
}
export interface OracleRegisterTx {
    queryFormat: string;
    responseFormat: string;
    queryFee: bigint;
    oracleTtl: Ttl;
    /** Base58Check encoded tagged pubkey */
    accountId: string;
    nonce?: number;
    fee: bigint;
    ttl?: number;
    abiVersion?: number;
}
export interface Components1Viuqa3SchemasOracletxPropertiesTxAllof1 {
    /** use `account_id` instead */
    oracleId: `ok_${string}`;
    type: string;
    version: number;
    /** use the outer `hash` instead */
    txHash: `th_${string}`;
}
export interface OracleExtend {
    /** The hash of the block in which it occurred */
    blockHash: `mh_${string}`;
    /** The block height */
    height: number;
    /** The hash of the transaction in which the extend was done */
    sourceTxHash: `th_${string}`;
    /** The type of the transaction in which the extend was done, it can be either via a contract call or an extend transaction */
    sourceTxType: string;
    tx: OracleExtendTx;
}
export interface OracleExtendTx {
    fee: bigint;
    oracleTtl: RelativeTTL;
    /** Base58Check encoded tagged pubkey */
    oracleId: string;
    nonce?: number;
    ttl?: number;
}
export interface OracleQuery {
    /** The hash of the block in which it occurred */
    blockHash: `mh_${string}`;
    blockTime: Date;
    /** The block height */
    height: number;
    /** Oracle query ID */
    queryId: `oq_${string}`;
    response?: OracleResponse;
    /** The hash of the transaction in which the query was created */
    sourceTxHash: `th_${string}`;
    /** The type of the transaction in which the query was created, it can be either via a contract call or a query transaction */
    sourceTxType: string;
    /** The transaction fee */
    fee: bigint;
    /** The nonce */
    nonce: number;
    /** The oracle ID of this query */
    oracleId: `ok_${string}`;
    /** Base64 encoding of the query */
    query: string;
    /** The query fee */
    queryFee: bigint;
    /** Expiration of the query */
    queryTtl: Record<string, unknown>;
    /** Expiration of the response */
    responseTtl: Record<string, unknown>;
    /** The creator of the query */
    senderId: `ak_${string}`;
    /** Transaction TTL */
    ttl: number;
}
export interface OracleResponse {
    /** The hash of the block in which it occurred */
    blockHash: `mh_${string}`;
    blockTime: Date;
    /** The block height */
    height: number;
    /** Oracle query ID */
    queryId: `oq_${string}`;
    query: OracleQuery;
    /** The hash of the transaction in which the response was created */
    sourceTxHash: `th_${string}`;
    /** The type of the transaction in which the response was created, it can be either via a contract call or a respond transaction */
    sourceTxType: string;
    /** The transaction fee */
    fee: bigint;
    /** The nonce */
    nonce: number;
    /** The oracle ID of this response */
    oracleId: `ok_${string}`;
    /** Base64 encoding of the response */
    response: string;
    /** Expiration of the response */
    responseTtl: Record<string, unknown>;
    /** Transaction TTL */
    ttl: number;
}
/** Stats */
export interface Stats {
    /** The number of miners */
    minersCount?: number;
    /** The fees trend */
    feesTrend?: number;
    /** The last 24hs average transaction fees */
    last24HsAverageTransactionFees?: number;
    /** The last 24hs transactions */
    last24HsTransactions?: number;
    /** The max transactions per second */
    maxTransactionsPerSecond?: number;
    /** The max transactions per second block hash */
    maxTransactionsPerSecondBlockHash?: `kh_${string}`;
    /** The transactions trend */
    transactionsTrend?: number;
}
/** Stat */
export interface Stat {
    /** The statistic count */
    count: number;
    /** The statistic start date */
    startDate: string;
    /** The statistic end date (not taken into account) */
    endDate: string;
}
/** DeltaStat */
export interface DeltaStat {
    /** The generation */
    height: number;
    /** The number of auctions started */
    auctionsStarted: number;
    /** The block reward */
    blockReward: bigint;
    /** The amount burned in auctions */
    burnedInAuctions: bigint;
    /** The number of channels closed */
    channelsClosed: number;
    /** The number of channels opened */
    channelsOpened: number;
    /** The number of contracts created */
    contractsCreated: number;
    /** The dev reward */
    devReward: bigint;
    /** The number of names activated */
    namesActivated: number;
    /** The number of names expired */
    namesExpired: number;
    /** The number of names revoked */
    namesRevoked: number;
    /** The number of oracles expired */
    oraclesExpired: number;
    /** The number of oracles registered */
    oraclesRegistered: number;
    /** The last transaction hash for this height */
    lastTxHash: `th_${string}`;
    /** The amount locked in auctions */
    lockedInAuctions: bigint;
    /** The amount locked in channels */
    lockedInChannels: bigint;
}
/** Miner */
export interface Miner {
    /** The miner (beneficiary) address */
    miner: `ak_${string}`;
    /** The accumulated reward on the miner (beneficiary) address */
    totalReward: bigint;
}
/** TotalStat */
export interface TotalStat {
    /** The generation */
    height: number;
    /** The number of contracts */
    contracts: number;
    /** The amount locked in auctions */
    lockedInAuctions: bigint;
    /** The amount burned in auctions */
    burnedInAuctions: bigint;
    /** The amount locked in channels */
    lockedInChannels: bigint;
    /** The number of active auctions */
    activeAuctions: number;
    /** The number of active names */
    activeNames: number;
    /** The number of inactive names */
    inactiveNames: number;
    /** The number of active oracles */
    activeOracles: number;
    /** The number of inactive oracles */
    inactiveOracles: number;
    /** The number of open channels */
    openChannels: number;
    /** The sum of block rewards */
    sumBlockReward: bigint;
    /** The sum of dev rewards */
    sumDevReward: bigint;
    /** The total token supply */
    totalTokenSupply: bigint;
    /** The last transaction hash for this height */
    lastTxHash: `th_${string}`;
}
export interface Status {
    mdwAsyncTasks: StatusMdwAsyncTasks;
    /** The approximate number of generations synced per minute on middleware */
    mdwGensPerMinute: number;
    /** The top generation up to which the middleware was synced */
    mdwHeight: number;
    /** The last middleware migration ran */
    mdwLastMigration: number;
    /** The middleware's git revision of the latest commit applied */
    mdwRevision: string;
    /** true if middleware was synced up to the latest node block */
    mdwSynced: boolean;
    /** true if middleware is syncing (i.e. it didn't stop due to an error) */
    mdwSyncing: boolean;
    /** index of the latest synced transaction */
    mdwTxIndex: number;
    /** The middleware's version */
    mdwVersion: string;
    /** The node generation of the last block synced */
    nodeHeight: number;
    /** The percentage of generations synced on the node */
    nodeProgress: number;
    /** The node's git revision of the latest commit applied */
    nodeRevision: string;
    /** If true, the node is still processing additional blocks to reach the latest one */
    nodeSyncing: boolean;
    /** The node's version */
    nodeVersion: string;
}
export interface StatusMdwAsyncTasks {
    longTasks: number;
    producerBuffer: number;
    totalPending: number;
}
/** Pending Transaction */
export interface PendingTransaction {
    /** The block hash, but since it's pending it's always "none" */
    blockHash: string;
    /** The block height, but since it's pending it's always -1 */
    blockHeight: number;
    /** Encoded transaction */
    encodedTx: `tx_${string}`;
    /** The failures count */
    failures: number;
    /** Transaction hash */
    hash: `th_${string}`;
    /** The signatures */
    signatures: string[];
    /** The transaction */
    tx: Tx;
}
export interface Transfer {
    /** Account address */
    accountId: `ak_${string}`;
    amount: bigint;
    height: number;
    kind: TransferKind;
    /** Micro block hash */
    refBlockHash: `mh_${string}` | null;
    /** Transaction hash */
    refTxHash: `th_${string}` | null;
    refTxType: string | null;
}
/** AEx9 Transfer */
export interface Aex9TransferEvent {
    amount: bigint;
    blockHeight: number;
    /** Contract address */
    contractId: `ct_${string}`;
    logIdx: number;
    microIndex: number;
    microTime: Date;
    /** Account address */
    recipientId: `ak_${string}`;
    /** Account address */
    senderId: `ak_${string}`;
    /** Transaction hash */
    txHash: `th_${string}`;
}
/** Response Schema for AEX9 transfer responses */
export interface Aex9TransferResponse {
    /** Transfer amount of AEX9 token */
    amount: bigint;
    /** The block height */
    blockHeight: number;
    /** AEX9 token transfer index */
    callTxi: number;
    /** Contract address */
    contractId: `ct_${string}`;
    /** Log index */
    logIdx: number;
    microTime: Date;
    /** Recipient of AEX9 transfer */
    recipient: `ak_${string}`;
    /** Sender of AEX9 transfer */
    sender: `ak_${string}`;
}
/** Contract call made inside of a contract call or contract create transaction */
export interface InternalContractCallEvent {
    /** The contract creation transaction hash */
    contractTxHash: `th_${string}`;
    /** Contract address */
    contractId: `ct_${string}`;
    /** The contract call transaction hash */
    callTxHash?: `th_${string}`;
    /** The name of the function */
    function: string;
    /** The transaction object */
    internalTx: Record<string, unknown>;
    /** The height in which the internal call happened */
    height: number;
    /** The micro block index */
    microIndex: number;
    /** The micro block hash in which the transaction happened */
    blockHash: `mh_${string}`;
}
/** Internal transfer */
export interface InternalTransferEvent {
    /** The amount of AE tokens */
    amount: bigint;
    /** The kind of internal transfer */
    kind: InternalTransferEventKind;
    /** The transaction hash of a transaction related to the internal transfer */
    refTxHash: `th_${string}`;
}
/** Name claim */
export interface NameClaimEvent {
    /** The hash of the transaction (either a name claim or a contract call transaction) */
    txHash: `th_${string}`;
    /** The claim transaction (internal or not) */
    tx: Record<string, unknown>;
}
export interface SpendTx {
    /** Base58Check encoded tagged pubkey */
    recipientId: string;
    amount: bigint;
    fee: bigint;
    ttl?: number;
    /** Base58Check encoded tagged pubkey */
    senderId: string;
    nonce?: number;
    /** Base64Check encoded tagged byte array */
    payload: string;
}
export interface ChannelCreateTx {
    /** Base58Check encoded tagged pubkey */
    initiatorId: string;
    initiatorAmount: bigint;
    /** Base58Check encoded tagged pubkey */
    responderId: string;
    responderAmount: bigint;
    channelReserve: bigint;
    lockPeriod: number;
    ttl?: number;
    fee: bigint;
    nonce?: number;
    /** Base58Check encoded tagged hash */
    stateHash: string;
    delegateIds?: Delegates;
}
export interface ChannelDepositTx {
    /** Base58Check encoded tagged pubkey */
    channelId: string;
    /** Base58Check encoded tagged pubkey */
    fromId: string;
    amount: bigint;
    ttl?: number;
    fee: bigint;
    nonce: number;
    /** Base58Check encoded tagged hash */
    stateHash: string;
    round: number;
}
export interface ChannelWithdrawTx {
    /** Base58Check encoded tagged pubkey */
    channelId: string;
    /** Base58Check encoded tagged pubkey */
    toId: string;
    amount: bigint;
    ttl?: number;
    fee: bigint;
    nonce: number;
    /** Base58Check encoded tagged hash */
    stateHash: string;
    round: number;
}
export interface ChannelForceProgressTx {
    /** Base58Check encoded tagged pubkey */
    channelId: string;
    /** Base58Check encoded tagged pubkey */
    fromId: string;
    /** Base64Check encoded tagged byte array */
    payload: string;
    round: number;
    update: OffChainUpdate;
    /** Base58Check encoded tagged hash */
    stateHash: string;
    ttl?: number;
    fee: bigint;
    nonce?: number;
    /** Base64Check encoded tagged byte array */
    offchainTrees?: string;
}
export interface ChannelCloseMutualTx {
    /** Base58Check encoded tagged pubkey */
    channelId: string;
    /** Base58Check encoded tagged pubkey */
    fromId: string;
    initiatorAmountFinal: number;
    responderAmountFinal: number;
    ttl?: number;
    fee: bigint;
    nonce: number;
}
export interface ChannelCloseSoloTx {
    /** Base58Check encoded tagged pubkey */
    channelId: string;
    /** Base58Check encoded tagged pubkey */
    fromId: string;
    /** Base64Check encoded tagged byte array */
    payload: string;
    ttl?: number;
    fee: bigint;
    nonce?: number;
    /** Base64Check encoded tagged byte array */
    poi: string;
}
export interface ChannelSlashTx {
    /** Base58Check encoded tagged pubkey */
    channelId: string;
    /** Base58Check encoded tagged pubkey */
    fromId: string;
    /** Base64Check encoded tagged byte array */
    payload: string;
    ttl?: number;
    fee: bigint;
    nonce?: number;
    /** Base64Check encoded tagged byte array */
    poi: string;
}
export interface ChannelSettleTx {
    /** Base58Check encoded tagged pubkey */
    channelId: string;
    /** Base58Check encoded tagged pubkey */
    fromId: string;
    initiatorAmountFinal: number;
    responderAmountFinal: number;
    ttl?: number;
    fee: bigint;
    nonce: number;
}
export interface ChannelSnapshotSoloTx {
    /** Base58Check encoded tagged pubkey */
    channelId: string;
    /** Base58Check encoded tagged pubkey */
    fromId: string;
    /** Base64Check encoded tagged byte array */
    payload: string;
    ttl?: number;
    fee: bigint;
    nonce?: number;
}
export interface ChannelSetDelegatesTx {
    /** Base58Check encoded tagged pubkey */
    channelId: string;
    /** Base58Check encoded tagged pubkey */
    fromId: string;
    initiatorDelegateIds: string[];
    responderDelegateIds: string[];
    /** Base58Check encoded tagged pubkey */
    stateHash: string;
    round: number;
    /** Base64Check encoded tagged byte array */
    payload: string;
    ttl?: number;
    fee: bigint;
    nonce?: number;
}
export interface OracleQueryTx {
    /** Base58Check encoded tagged pubkey */
    oracleId: string;
    query: string;
    queryFee: bigint;
    queryTtl: Ttl;
    responseTtl: RelativeTTL;
    fee: bigint;
    ttl?: number;
    /** Base58Check encoded tagged pubkey */
    senderId: string;
    nonce?: number;
}
export interface OracleRespondTx {
    /** Base58Check encoded tagged value */
    queryId: string;
    response: string;
    responseTtl: RelativeTTL;
    fee: bigint;
    ttl?: number;
    /** Base58Check encoded tagged pubkey */
    oracleId: string;
    nonce?: number;
}
export interface NamePreclaimTx {
    /** Base58Check encoded tagged value */
    commitmentId: string;
    fee: bigint;
    ttl?: number;
    /** Base58Check encoded tagged pubkey */
    accountId: string;
    nonce?: number;
}
export interface ContractCallTx {
    /** Base58Check encoded tagged pubkey */
    callerId: string;
    nonce?: number;
    /** Base58Check encoded tagged pubkey */
    contractId: string;
    abiVersion: number;
    fee: bigint;
    ttl?: number;
    amount: bigint;
    gas: number;
    gasPrice: bigint;
    /** Base64Check encoded tagged byte array */
    callData: string;
}
export interface GAAttachTx {
    /** Base58Check encoded tagged pubkey */
    ownerId: string;
    nonce?: number;
    /** Base64Check encoded tagged byte array */
    code: string;
    vmVersion: number;
    abiVersion: number;
    gas: number;
    gasPrice: bigint;
    fee: bigint;
    ttl?: number;
    /** Base64Check encoded tagged byte array */
    callData: string;
    /** Contract authorization function hash (hex encoded) */
    authFun: string;
}
export interface GAMetaTx {
    /** Base58Check encoded tagged pubkey */
    gaId: string;
    abiVersion: number;
    gas: number;
    gasPrice: bigint;
    fee: bigint;
    ttl?: number;
    /** Base64Check encoded tagged byte array */
    authData: string;
    tx: SignedTx;
}
export interface PayingForTx {
    /** Base58Check encoded tagged pubkey */
    payerId: string;
    fee: bigint;
    nonce?: number;
    tx: SignedTx;
}
export interface AuctionLastBidTx extends NameClaimTx, Components17W16A5SchemasAuctionPropertiesLastBidPropertiesTxAllof1 {
}
/** Key Block Extended */
export interface KeyBlockExtended extends KeyBlock {
    /** The beneficiary reward */
    beneficiaryReward: number;
    /**  */
    flags: `ba_${string}`;
    /** The number of micro blocks */
    microBlocksCount: number;
    /** The number of transactions */
    transactionsCount: number;
}
/** Micro Block Extended */
export interface MicroBlockExtended extends MicroBlockHeader {
    /** The index of the micro-block on the micro-block height, starting from 0 */
    microBlockIndex: number;
    /** The number of transactions */
    transactionsCount: number;
    /** The gas used by the microblock */
    gas: number;
    /**  */
    flags: `ba_${string}`;
}
export interface NameTxTx extends NameRevokeTx, Components171VsjiSchemasNametxPropertiesTxAllof1 {
}
export interface OracleTxTx extends OracleRegisterTx, Components1Viuqa3SchemasOracletxPropertiesTxAllof1 {
}
/** Defines values for Enum0. */
export type Enum0 = "transactions" | "aexn" | "aex9" | "aex141" | "contract" | "transfers" | "claims" | "swaps";
/** Defines values for Enum1. */
export type Enum1 = "forward" | "backward";
/** Defines values for ActivityType. */
export type ActivityType = "SpendTxEvent" | "OracleRegisterTxEvent" | "OracleExtendTxEvent" | "OracleQueryTxEvent" | "OracleResponseTxEvent" | "NamePreclaimTxEvent" | "NameClaimTxEvent" | "NameTransferTxEvent" | "NameUpdateTxEvent" | "NameRevokeTxEvent" | "ContractCreateTxEvent" | "ContractCallTxEvent" | "GaAttachTxEvent" | "GaMetaTxEvent" | "ChannelCreateTxEvent" | "ChannelDepositTxEvent" | "ChannelWithdrawTxEvent" | "ChannelForceProgressTxEvent" | "ChannelCloseMutualTxEvent" | "ChannelCloseSoloTxEvent" | "ChannelSlashTxEvent" | "ChannelSettleTxEvent" | "ChannelSnapshotSoloTxEvent" | "ChannelSetDelegatesTxEvent" | "ChannelOffchainTxEvent" | "ChannelClientReconnectTxEvent" | "PayingForTxEvent";
/** Defines values for TTLType. */
export type TTLType = "delta" | "block";
/** Defines values for TxType. */
export type TxType = "SpendTx" | "ChannelCreateTx" | "ChannelDepositTx" | "ChannelWithdrawTx" | "ChannelForceProgressTx" | "ChannelCloseMutualTx" | "ChannelCloseSoloTx" | "ChannelSlashTx" | "ChannelSettleTx" | "ChannelSnapshotSoloTx" | "ChannelSetDelegatesTx" | "OracleRegisterTx" | "OracleExtendTx" | "OracleQueryTx" | "OracleRespondTx" | "NamePreclaimTx" | "NameClaimTx" | "NameUpdateTx" | "NameTransferTx" | "NameRevokeTx" | "ContractCreateTx" | "ContractCallTx" | "GAAttachTx" | "GAMetaTx" | "PayingForTx";
/** Defines values for ActivityPayloadKind. */
export type ActivityPayloadKind = "accounts_extra_lima" | "accounts_fortuna" | "accounts_genesis" | "accounts_lima" | "accounts_minerva" | "contracts_lima" | "reward_dev" | "reward_block" | "fee_refund_oracle" | "fee_lock_name" | "fee_refund_name" | "fee_spend_name" | "reward_oracle";
/** Defines values for Enum6. */
export type Enum6 = "forward" | "backward";
/** Defines values for Enum7. */
export type Enum7 = "forward" | "backward";
/** Defines values for DexSwapAction. */
export type DexSwapAction = "SWAP" | "BUY" | "SELL";
/** Defines values for Enum9. */
export type Enum9 = "forward" | "backward";
/** Defines values for Enum10. */
export type Enum10 = "forward" | "backward";
/** Defines values for Enum11. */
export type Enum11 = "creation" | "name" | "symbol";
/** Defines values for Enum12. */
export type Enum12 = "forward" | "backward";
/** Defines values for Enum13. */
export type Enum13 = "forward" | "backward";
/** Defines values for Enum14. */
export type Enum14 = "forward" | "backward";
/** Defines values for Enum15. */
export type Enum15 = "forward" | "backward";
/** Defines values for Enum16. */
export type Enum16 = "forward" | "backward";
/** Defines values for Enum17. */
export type Enum17 = "creation" | "name" | "symbol";
/** Defines values for Enum18. */
export type Enum18 = "forward" | "backward";
/** Defines values for Enum19. */
export type Enum19 = "forward" | "backward";
/** Defines values for Enum20. */
export type Enum20 = "forward" | "backward";
/** Defines values for Enum21. */
export type Enum21 = "active" | "inactive";
/** Defines values for Enum22. */
export type Enum22 = "forward" | "backward";
/** Defines values for Enum23. */
export type Enum23 = "forward" | "backward";
/** Defines values for Enum24. */
export type Enum24 = "forward" | "backward";
/** Defines values for Enum25. */
export type Enum25 = "forward" | "backward";
/** Defines values for Enum26. */
export type Enum26 = "forward" | "backward";
/** Defines values for Enum27. */
export type Enum27 = "forward" | "backward";
/** Defines values for Enum28. */
export type Enum28 = "forward" | "backward";
/** Defines values for Enum29. */
export type Enum29 = "forward" | "backward";
/** Defines values for Enum30. */
export type Enum30 = "forward" | "backward";
/** Defines values for Enum31. */
export type Enum31 = "forward" | "backward";
/** Defines values for Enum32. */
export type Enum32 = "forward" | "backward";
/** Defines values for Enum33. */
export type Enum33 = "forward" | "backward";
/** Defines values for Enum34. */
export type Enum34 = "forward" | "backward";
/** Defines values for Enum35. */
export type Enum35 = "forward" | "backward";
/** Defines values for Enum36. */
export type Enum36 = "forward" | "backward";
/** Defines values for Enum37. */
export type Enum37 = "forward" | "backward";
/** Defines values for Enum38. */
export type Enum38 = "forward" | "backward";
/** Defines values for Enum39. */
export type Enum39 = "forward" | "backward";
/** Defines values for Enum40. */
export type Enum40 = "forward" | "backward";
/** Defines values for Enum41. */
export type Enum41 = "day" | "week" | "month";
/** Defines values for Enum42. */
export type Enum42 = "forward" | "backward";
/** Defines values for Enum43. */
export type Enum43 = "day" | "week" | "month";
/** Defines values for Enum44. */
export type Enum44 = "forward" | "backward";
/** Defines values for Enum45. */
export type Enum45 = "day" | "week" | "month";
/** Defines values for Enum46. */
export type Enum46 = "key" | "micro";
/** Defines values for Enum47. */
export type Enum47 = "forward" | "backward";
/** Defines values for Enum48. */
export type Enum48 = "day" | "week" | "month";
/** Defines values for Enum49. */
export type Enum49 = "forward" | "backward";
/** Defines values for Enum50. */
export type Enum50 = "forward" | "backward";
/** Defines values for Enum51. */
export type Enum51 = "day" | "week" | "month";
/** Defines values for Enum52. */
export type Enum52 = "forward" | "backward";
/** Defines values for Enum53. */
export type Enum53 = "day" | "week" | "month";
/** Defines values for Enum54. */
export type Enum54 = "forward" | "backward";
/** Defines values for Enum55. */
export type Enum55 = "forward" | "backward";
/** Defines values for Enum56. */
export type Enum56 = "day" | "week" | "month";
/** Defines values for Enum57. */
export type Enum57 = "forward" | "backward";
/** Defines values for Enum58. */
export type Enum58 = "forward" | "backward";
/** Defines values for Enum59. */
export type Enum59 = "day" | "week" | "month";
/** Defines values for Enum60. */
export type Enum60 = "forward" | "backward";
/** Defines values for Enum61. */
export type Enum61 = "day" | "week" | "month";
/** Defines values for Enum62. */
export type Enum62 = "forward" | "backward";
/** Defines values for Get0ItemsItem. */
export type Get0ItemsItem = "channel_close_mutual" | "channel_close_solo" | "channel_create" | "channel_deposit" | "channel_force_progress" | "channel_offchain" | "channel_settle" | "channel_slash" | "channel_snapshot_solo" | "channel_withdraw" | "contract_call" | "contract_create" | "ga_attach" | "ga_meta" | "name_claim" | "name_preclaim" | "name_revoke" | "name_transfer" | "name_update" | "oracle_extend" | "oracle_query" | "oracle_register" | "oracle_response" | "paying_for" | "spend";
/** Defines values for Get1ItemsItem. */
export type Get1ItemsItem = "channel" | "contract" | "ga" | "name" | "oracle" | "paying_for" | "spend";
/** Defines values for Enum65. */
export type Enum65 = "forward" | "backward";
/** Defines values for Enum66. */
export type Enum66 = "forward" | "backward";
/** Defines values for Enum67. */
export type Enum67 = "forward" | "backward";
/** Defines values for TransferKind. */
export type TransferKind = "reward_dev" | "reward_block";
/** Defines values for InternalTransferEventKind. */
export type InternalTransferEventKind = "accounts_extra_lima" | "accounts_fortuna" | "accounts_genesis" | "accounts_lima" | "accounts_minerva" | "contracts_lima" | "reward_dev" | "reward_block" | "fee_refund_oracle" | "fee_lock_name" | "fee_refund_name" | "fee_spend_name" | "reward_oracle";
/** Defines values for Enum70. */
export type Enum70 = "forward" | "backward";
/** Optional parameters. */
export interface GetAccountActivitiesOptionalParams extends coreClient.OperationOptions {
    /** Indicate to filter only activities initiated by the account */
    ownedOnly?: boolean;
    /**
     * Filter by activity type. Supported values:
     *  * `transactions` - Transactions containing the account in any of the transaction fields
     *  * `aexn` - AExN (aex9 and aex141) activities
     *  * `aex9` - AEx9 activities
     *  * `aex141` - AEx141 activities
     *  * `contract` - Internal and external contract calls
     *  * `transfers` - Internal (both gen-based and tx-based) transfers
     *  * `claims` - Name claims related to the name hash
     *  * `swaps` - Dex swaps related to the name hash
     *
     */
    type?: Enum0;
    /** Limit paginated resources (max 100) */
    limit?: number;
    /** Scopes results in a generation range */
    scope?: string;
    /** Sorts results in forwards or backwards direction */
    direction?: Enum1;
}
/** Contains response data for the getAccountActivities operation. */
export type GetAccountActivitiesResponse = MiddlewarePage<Activity>;
/** Optional parameters. */
export interface GetAex141OwnedTokensOptionalParams extends coreClient.OperationOptions {
    /** Limit paginated resources (max 100) */
    limit?: number;
    /** Sorts results in forwards or backwards direction */
    direction?: Enum6;
    /** Collection contract pubkey Contract address */
    contract?: `ct_${string}`;
}
/** Contains response data for the getAex141OwnedTokens operation. */
export type GetAex141OwnedTokensResponse = MiddlewarePage<Aex141TokenResponse>;
/** Optional parameters. */
export interface GetAex9AccountBalancesOptionalParams extends coreClient.OperationOptions {
}
/** Contains response data for the getAex9AccountBalances operation. */
export type GetAex9AccountBalancesResponse = MiddlewarePage<Aex9BalanceResponse>;
/** Optional parameters. */
export interface GetAccountDexSwapsOptionalParams extends coreClient.OperationOptions {
    /** Sorts results in forwards or backwards direction */
    direction?: Enum7;
}
/** Contains response data for the getAccountDexSwaps operation. */
export type GetAccountDexSwapsResponse = MiddlewarePage<DexSwap>;
/** Optional parameters. */
export interface GetAccountNameClaimsOptionalParams extends coreClient.OperationOptions {
    /** Limit paginated resources (max 100) */
    limit?: number;
    /** Scopes results in a generation range */
    scope?: string;
    /** Sorts results in forwards or backwards direction */
    direction?: Enum9;
}
/** Contains response data for the getAccountNameClaims operation. */
export type GetAccountNameClaimsResponse = MiddlewarePage<NameClaim>;
/** Optional parameters. */
export interface GetAccountPointeesOptionalParams extends coreClient.OperationOptions {
}
/** Contains response data for the getAccountPointees operation. */
export type GetAccountPointeesResponse = MiddlewarePage<Pointee>;
/** Optional parameters. */
export interface GetAccountTransactionsCountOptionalParams extends coreClient.OperationOptions {
}
/** Contains response data for the getAccountTransactionsCount operation. */
export type GetAccountTransactionsCountResponse = PathsXcg812V3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchema;
/** Optional parameters. */
export interface GetSortedAex141ContractsOptionalParams extends coreClient.OperationOptions {
    /** Limit paginated resources (max 100) */
    limit?: number;
    /** Sorts results in forwards or backwards direction */
    direction?: Enum10;
    /** meta info field used on sorting */
    by?: Enum11;
    /** Sorts by name or symbol prefix, this is decided by the 'by' field. If it's name, it will sort by name prefix, if it's symbol, it will sort by symbol prefix. */
    prefix?: string;
    /** Gets AEX141 contracts with exact name or symbol, this is decided by the 'by' field. If it's name, it will get contracts with exact name, if it's symbol, it will get contracts with exact symbol. */
    exact?: string;
}
/** Contains response data for the getSortedAex141Contracts operation. */
export type GetSortedAex141ContractsResponse = MiddlewarePage<Aex141Response>;
/** Optional parameters. */
export interface GetAex141ContractTemplatesOptionalParams extends coreClient.OperationOptions {
    /** Limit paginated resources (max 100) */
    limit?: number;
    /** Sorts results in forwards or backwards direction */
    direction?: Enum12;
}
/** Contains response data for the getAex141ContractTemplates operation. */
export type GetAex141ContractTemplatesResponse = MiddlewarePage<Aex141TemplatesResponse>;
/** Optional parameters. */
export interface GetAex141TemplateTokensOptionalParams extends coreClient.OperationOptions {
    /** Limit paginated resources (max 100) */
    limit?: number;
    /** Sorts results in forwards or backwards direction */
    direction?: Enum13;
}
/** Contains response data for the getAex141TemplateTokens operation. */
export type GetAex141TemplateTokensResponse = MiddlewarePage<Aex141TemplateTokensResponse>;
/** Optional parameters. */
export interface GetAex141ContractTokensOptionalParams extends coreClient.OperationOptions {
    /** Limit paginated resources (max 100) */
    limit?: number;
    /** Sorts results in forwards or backwards direction */
    direction?: Enum14;
}
/** Contains response data for the getAex141ContractTokens operation. */
export type GetAex141ContractTokensResponse = MiddlewarePage<Aex141TokenResponse>;
/** Optional parameters. */
export interface GetAex141TokenOwnerOptionalParams extends coreClient.OperationOptions {
}
/** Contains response data for the getAex141TokenOwner operation. */
export type GetAex141TokenOwnerResponse = Aex141TokenDetailResponse;
/** Optional parameters. */
export interface GetAex141ContractTransfersOptionalParams extends coreClient.OperationOptions {
    /** Limit paginated resources (max 100) */
    limit?: number;
    /** Sorts results in forwards or backwards direction */
    direction?: Enum15;
    /** From account Account address */
    from?: `ak_${string}`;
    /** To account Account address */
    to?: `ak_${string}`;
}
/** Contains response data for the getAex141ContractTransfers operation. */
export type GetAex141ContractTransfersResponse = MiddlewarePage<Aex141TransferEvent>;
/** Optional parameters. */
export interface GetAex141ByContractOptionalParams extends coreClient.OperationOptions {
}
/** Contains response data for the getAex141ByContract operation. */
export type GetAex141ByContractResponse = Aex141Response;
/** Optional parameters. */
export interface GetSortedAex9TokensOptionalParams extends coreClient.OperationOptions {
    /** Limit paginated resources (max 100) */
    limit?: number;
    /** Sorts by name or symbol prefix, this is decided by the 'by' field. If it's name, it will sort by name prefix, if it's symbol, it will sort by symbol prefix. */
    prefix?: string;
    /** Gets AEX9 tokens with exact name or symbol, this is decided by the 'by' field. If it's name, it will get tokens with exact name, if it's symbol, it will get tokens with exact symbol. */
    exact?: string;
    /** Sorts results in forwards or backwards direction */
    direction?: Enum16;
    /** meta info field used on sorting */
    by?: Enum17;
}
/** Contains response data for the getSortedAex9Tokens operation. */
export type GetSortedAex9TokensResponse = MiddlewarePage<Aex9Response>;
/** Optional parameters. */
export interface GetAex9TokensCountOptionalParams extends coreClient.OperationOptions {
}
/** Contains response data for the getAex9TokensCount operation. */
export type GetAex9TokensCountResponse = Paths19IxhsmV3Aex9CountGetResponses200ContentApplicationJsonSchema;
/** Optional parameters. */
export interface GetAex9ContractBalancesOptionalParams extends coreClient.OperationOptions {
    /** Limit paginated resources (max 100) */
    limit?: number;
    /** Sorts results in forwards or backwards direction */
    direction?: Enum18;
    /** Order by */
    by?: string;
    /** Block hash Micro block hash */
    blockHash?: `mh_${string}`;
}
/** Contains response data for the getAex9ContractBalances operation. */
export type GetAex9ContractBalancesResponse = MiddlewarePage<Aex9ContractBalanceResponse>;
/** Optional parameters. */
export interface GetAex9ContractAccountBalanceOptionalParams extends coreClient.OperationOptions {
    /** Block hash Micro block hash */
    hash?: `mh_${string}`;
}
/** Contains response data for the getAex9ContractAccountBalance operation. */
export type GetAex9ContractAccountBalanceResponse = PathsKr825V3Aex9ContractidBalancesAccountidGetResponses200ContentApplicationJsonSchema;
/** Optional parameters. */
export interface GetAex9ContractAccountBalanceHistoryOptionalParams extends coreClient.OperationOptions {
    /** Limit paginated resources (max 100) */
    limit?: number;
    /** Scopes results in a generation range */
    scope?: string;
    /** Sorts results in forwards or backwards direction */
    direction?: Enum19;
}
/** Contains response data for the getAex9ContractAccountBalanceHistory operation. */
export type GetAex9ContractAccountBalanceHistoryResponse = MiddlewarePage<Get200ApplicationJsonAllOfPropertiesItemsItem>;
/** Optional parameters. */
export interface GetAex9ByContractOptionalParams extends coreClient.OperationOptions {
}
/** Contains response data for the getAex9ByContract operation. */
export type GetAex9ByContractResponse = Aex9Response;
/** Optional parameters. */
export interface GetChannelsOptionalParams extends coreClient.OperationOptions {
    /** Limit paginated resources (max 100) */
    limit?: number;
    /** Scopes results in a generation range */
    scope?: string;
    /** Sorts results in forwards or backwards direction */
    direction?: Enum20;
    /** Exclusively filter by active/inactive channels. */
    state?: Enum21;
}
/** Contains response data for the getChannels operation. */
export type GetChannelsResponse = MiddlewarePage<Channel>;
/** Optional parameters. */
export interface GetChannelOptionalParams extends coreClient.OperationOptions {
}
/** Contains response data for the getChannel operation. */
export type GetChannelResponse = Channel;
/** Optional parameters. */
export interface GetContractCallsOptionalParams extends coreClient.OperationOptions {
    /** Limit paginated resources (max 100) */
    limit?: number;
    /** Scopes results in a generation range */
    scope?: string;
    /** Sorts results in forwards or backwards direction */
    direction?: Enum22;
}
/** Contains response data for the getContractCalls operation. */
export type GetContractCallsResponse = MiddlewarePage<ContractCall>;
/** Optional parameters. */
export interface GetContractLogsOptionalParams extends coreClient.OperationOptions {
    /** Limit paginated resources (max 100) */
    limit?: number;
    /** Scopes results in a generation range */
    scope?: string;
    /** Contract that emitted the logs Contract address */
    contractId?: `ct_${string}`;
    /** Name of the event */
    event?: string;
    /** Prefix of the contract called function */
    function?: string;
    /** Prefix of the contract called function */
    functionPrefix?: string;
    /** Data prefix from the contract call */
    data?: string;
    /** Indicates to format args when event is AEX-N */
    aexnArgs?: boolean;
    /** Sorts results in forwards or backwards direction */
    direction?: Enum23;
}
/** Contains response data for the getContractLogs operation. */
export type GetContractLogsResponse = MiddlewarePage<ContractLog>;
/** Optional parameters. */
export interface GetContractOptionalParams extends coreClient.OperationOptions {
}
/** Contains response data for the getContract operation. */
export type GetContractResponse = Contract;
/** Optional parameters. */
export interface GetDexSwapsOptionalParams extends coreClient.OperationOptions {
    /** Sorts results in forwards or backwards direction */
    direction?: Enum24;
}
/** Contains response data for the getDexSwaps operation. */
export type GetDexSwapsResponse = MiddlewarePage<DexSwap>;
/** Optional parameters. */
export interface GetDexSwapsByContractIdOptionalParams extends coreClient.OperationOptions {
    /** Sorts results in forwards or backwards direction */
    direction?: Enum25;
}
/** Contains response data for the getDexSwapsByContractId operation. */
export type GetDexSwapsByContractIdResponse = MiddlewarePage<DexSwap>;
/** Optional parameters. */
export interface GetEpochsOptionalParams extends coreClient.OperationOptions {
    /** Limit paginated resources (max 100) */
    limit?: number;
    /** Sorts results in forwards or backwards direction */
    direction?: Enum26;
    /** Scopes results in a hyperchain epoch range */
    scope?: string;
}
/** Contains response data for the getEpochs operation. */
export type GetEpochsResponse = MiddlewarePage<EpochInfo>;
/** Optional parameters. */
export interface GetEpochTopOptionalParams extends coreClient.OperationOptions {
}
/** Contains response data for the getEpochTop operation. */
export type GetEpochTopResponse = EpochInfo;
/** Optional parameters. */
export interface GetSchedulesOptionalParams extends coreClient.OperationOptions {
    /** Limit paginated resources (max 100) */
    limit?: number;
    /** Scopes results in a hyperchain epoch range */
    scope?: string;
    /** Sorts results in forwards or backwards direction */
    direction?: Enum27;
}
/** Contains response data for the getSchedules operation. */
export type GetSchedulesResponse = MiddlewarePage<Schedule>;
/** Optional parameters. */
export interface GetScheduleOptionalParams extends coreClient.OperationOptions {
}
/** Contains response data for the getSchedule operation. */
export type GetScheduleResponse = Schedule;
/** Optional parameters. */
export interface GetValidatorsOptionalParams extends coreClient.OperationOptions {
    /** Limit paginated resources (max 100) */
    limit?: number;
    /** Scopes results in a hyperchain epoch range */
    scope?: string;
    /** Sorts results in forwards or backwards direction */
    direction?: Enum28;
}
/** Contains response data for the getValidators operation. */
export type GetValidatorsResponse = MiddlewarePage<Validator>;
/** Optional parameters. */
export interface GetValidatorOptionalParams extends coreClient.OperationOptions {
}
/** Contains response data for the getValidator operation. */
export type GetValidatorResponse = Validator;
/** Optional parameters. */
export interface GetValidatorDelegatesOptionalParams extends coreClient.OperationOptions {
    /** Limit paginated resources (max 100) */
    limit?: number;
    /** Scopes results in a hyperchain epoch range */
    scope?: string;
    /** Sorts results in forwards or backwards direction */
    direction?: Enum29;
}
/** Contains response data for the getValidatorDelegates operation. */
export type GetValidatorDelegatesResponse = MiddlewarePage<Delegate>;
/** Optional parameters. */
export interface GetTopValidatorDelegatesOptionalParams extends coreClient.OperationOptions {
    /** Limit paginated resources (max 100) */
    limit?: number;
    /** Scopes results in a hyperchain epoch range */
    scope?: string;
    /** Sorts results in forwards or backwards direction */
    direction?: Enum30;
}
/** Contains response data for the getTopValidatorDelegates operation. */
export type GetTopValidatorDelegatesResponse = MiddlewarePage<Delegate>;
/** Optional parameters. */
export interface GetKeyBlocksOptionalParams extends coreClient.OperationOptions {
    /** Limit paginated resources (max 100) */
    limit?: number;
    /** Scopes results in a generation range */
    scope?: string;
    /** Sorts results in forwards or backwards direction */
    direction?: Enum31;
}
/** Contains response data for the getKeyBlocks operation. */
export type GetKeyBlocksResponse = MiddlewarePage<KeyBlockExtended>;
/** Optional parameters. */
export interface GetKeyBlockOptionalParams extends coreClient.OperationOptions {
}
/** Contains response data for the getKeyBlock operation. */
export type GetKeyBlockResponse = KeyBlockExtended;
/** Optional parameters. */
export interface GetKeyBlockMicroBlocksOptionalParams extends coreClient.OperationOptions {
    /** Limit paginated resources (max 100) */
    limit?: number;
    /** Scopes results in a generation range */
    scope?: string;
    /** Sorts results in forwards or backwards direction */
    direction?: Enum32;
}
/** Contains response data for the getKeyBlockMicroBlocks operation. */
export type GetKeyBlockMicroBlocksResponse = MiddlewarePage<MicroBlockExtended>;
/** Optional parameters. */
export interface GetMicroBlockOptionalParams extends coreClient.OperationOptions {
}
/** Contains response data for the getMicroBlock operation. */
export type GetMicroBlockResponse = MicroBlockExtended;
/** Optional parameters. */
export interface GetMicroBlockTransactionsOptionalParams extends coreClient.OperationOptions {
}
/** Contains response data for the getMicroBlockTransactions operation. */
export type GetMicroBlockTransactionsResponse = MiddlewarePage<Transaction>;
/** Optional parameters. */
export interface GetNamesOptionalParams extends coreClient.OperationOptions {
    /** Limit paginated resources (max 100) */
    limit?: number;
    /** Name prefix filter (case insensitive). Requires by=name parameter */
    prefix?: string;
    /** Sorting by deactivation, activation or name */
    by?: string;
    /** Account that owns the name Account address */
    ownedBy?: `ak_${string}`;
    /** Activation state of the name (active or inactive) */
    state?: string;
    /** Sorts results in forwards or backwards direction */
    direction?: Enum33;
}
/** Contains response data for the getNames operation. */
export type GetNamesResponse = MiddlewarePage<Name>;
/** Optional parameters. */
export interface GetNamesAuctionsOptionalParams extends coreClient.OperationOptions {
    /** Limit paginated resources (max 100) */
    limit?: number;
    /** Scopes results in a generation range */
    scope?: string;
    /** Sorts results in forwards or backwards direction */
    direction?: Enum34;
}
/** Contains response data for the getNamesAuctions operation. */
export type GetNamesAuctionsResponse = MiddlewarePage<Auction>;
/** Optional parameters. */
export interface GetNameAuctionOptionalParams extends coreClient.OperationOptions {
    /** Limit paginated resources (max 100) */
    limit?: number;
    /** Scopes results in a generation range */
    scope?: string;
    /** Sorts results in forwards or backwards direction */
    direction?: Enum35;
}
/** Contains response data for the getNameAuction operation. */
export type GetNameAuctionResponse = Auction;
/** Optional parameters. */
export interface GetNameAuctionClaimsOptionalParams extends coreClient.OperationOptions {
    /** Limit paginated resources (max 100) */
    limit?: number;
    /** Scopes results in a generation range */
    scope?: string;
    /** Sorts results in forwards or backwards direction */
    direction?: Enum36;
}
/** Contains response data for the getNameAuctionClaims operation. */
export type GetNameAuctionClaimsResponse = PathsCrb9BgV3NamesAuctionsIdClaimsGetResponses200ContentApplicationJsonSchema;
/** Optional parameters. */
export interface GetNamesCountOptionalParams extends coreClient.OperationOptions {
    /** Account that owns the name Account address */
    ownedBy?: `ak_${string}`;
}
/** Contains response data for the getNamesCount operation. */
export type GetNamesCountResponse = {
    /** The parsed response body. */
    body: number;
};
/** Optional parameters. */
export interface GetNameOptionalParams extends coreClient.OperationOptions {
}
/** Contains response data for the getName operation. */
export type GetNameResponse = Name;
/** Optional parameters. */
export interface GetNameClaimsOptionalParams extends coreClient.OperationOptions {
    /** Limit paginated resources (max 100) */
    limit?: number;
    /** Scopes results in a generation range */
    scope?: string;
    /** Sorts results in forwards or backwards direction */
    direction?: Enum37;
}
/** Contains response data for the getNameClaims operation. */
export type GetNameClaimsResponse = MiddlewarePage<NameClaim>;
/** Optional parameters. */
export interface GetNameTransfersOptionalParams extends coreClient.OperationOptions {
    /** Limit paginated resources (max 100) */
    limit?: number;
    /** Scopes results in a generation range */
    scope?: string;
    /** Sorts results in forwards or backwards direction */
    direction?: Enum38;
}
/** Contains response data for the getNameTransfers operation. */
export type GetNameTransfersResponse = MiddlewarePage<NameTransfer>;
/** Optional parameters. */
export interface GetNameUpdatesOptionalParams extends coreClient.OperationOptions {
    /** Limit paginated resources (max 100) */
    limit?: number;
    /** Scopes results in a generation range */
    scope?: string;
    /** Sorts results in forwards or backwards direction */
    direction?: Enum39;
}
/** Contains response data for the getNameUpdates operation. */
export type GetNameUpdatesResponse = MiddlewarePage<NameUpdate>;
/** Optional parameters. */
export interface GetOraclesOptionalParams extends coreClient.OperationOptions {
    /** Limit paginated resources (max 100) */
    limit?: number;
    /** Scopes results in a generation range */
    scope?: string;
    /** oracle state (active or inactive) */
    state?: string;
    /** Sorts results in forwards or backwards direction */
    direction?: Enum40;
}
/** Contains response data for the getOracles operation. */
export type GetOraclesResponse = MiddlewarePage<Oracle>;
/** Optional parameters. */
export interface GetOracleOptionalParams extends coreClient.OperationOptions {
}
/** Contains response data for the getOracle operation. */
export type GetOracleResponse = Oracle;
/** Optional parameters. */
export interface GetOracleExtendsOptionalParams extends coreClient.OperationOptions {
}
/** Contains response data for the getOracleExtends operation. */
export type GetOracleExtendsResponse = MiddlewarePage<OracleExtend>;
/** Optional parameters. */
export interface GetOracleQueriesOptionalParams extends coreClient.OperationOptions {
}
/** Contains response data for the getOracleQueries operation. */
export type GetOracleQueriesResponse = MiddlewarePage<OracleQuery>;
/** Optional parameters. */
export interface GetOracleResponsesOptionalParams extends coreClient.OperationOptions {
}
/** Contains response data for the getOracleResponses operation. */
export type GetOracleResponsesResponse = MiddlewarePage<OracleResponse>;
/** Optional parameters. */
export interface GetStatsOptionalParams extends coreClient.OperationOptions {
}
/** Contains response data for the getStats operation. */
export type GetStatsResponse = Stats;
/** Optional parameters. */
export interface GetActiveAccountsStatsOptionalParams extends coreClient.OperationOptions {
    /** Limit paginated resources (max 100) */
    limit?: number;
    /** The interval in which to return the stats. */
    intervalBy?: Enum41;
    /** Sorts results in forwards or backwards direction */
    direction?: Enum42;
}
/** Contains response data for the getActiveAccountsStats operation. */
export type GetActiveAccountsStatsResponse = MiddlewarePage<Stat>;
/** Optional parameters. */
export interface GetAex9TransfersStatsOptionalParams extends coreClient.OperationOptions {
    /** Limit paginated resources (max 100) */
    limit?: number;
    /** The interval in which to return the stats. */
    intervalBy?: Enum43;
    /** The minimum start date in YYYY-MM-DD format. */
    minStartDate?: string;
    /** The maximum start date in YYYY-MM-DD format. */
    maxStartDate?: string;
    /** Sorts results in forwards or backwards direction */
    direction?: Enum44;
}
/** Contains response data for the getAex9TransfersStats operation. */
export type GetAex9TransfersStatsResponse = MiddlewarePage<Stat>;
/** Optional parameters. */
export interface GetBlocksStatsOptionalParams extends coreClient.OperationOptions {
    /** Limit paginated resources (max 100) */
    limit?: number;
    /** The minimum start date in YYYY-MM-DD format. */
    minStartDate?: string;
    /** The maximum start date in YYYY-MM-DD format. */
    maxStartDate?: string;
    /** The interval in which to return the stats. */
    intervalBy?: Enum45;
    /** The type of block. */
    type?: Enum46;
    /** Sorts results in forwards or backwards direction */
    direction?: Enum47;
}
/** Contains response data for the getBlocksStats operation. */
export type GetBlocksStatsResponse = MiddlewarePage<Stat>;
/** Optional parameters. */
export interface GetContractsStatsOptionalParams extends coreClient.OperationOptions {
    /** Limit paginated resources (max 100) */
    limit?: number;
    /** The minimum start date in YYYY-MM-DD format. */
    minStartDate?: string;
    /** The maximum start date in YYYY-MM-DD format. */
    maxStartDate?: string;
    /** The interval in which to return the stats. */
    intervalBy?: Enum48;
    /** Sorts results in forwards or backwards direction */
    direction?: Enum49;
}
/** Contains response data for the getContractsStats operation. */
export type GetContractsStatsResponse = MiddlewarePage<Stat>;
/** Optional parameters. */
export interface GetDeltaStatsOptionalParams extends coreClient.OperationOptions {
    /** Limit paginated resources (max 100) */
    limit?: number;
    /** Scopes results in a generation range */
    scope?: string;
    /** Sorts results in forwards or backwards direction */
    direction?: Enum50;
}
/** Contains response data for the getDeltaStats operation. */
export type GetDeltaStatsResponse = MiddlewarePage<DeltaStat>;
/** Optional parameters. */
export interface GetDifficultyStatsOptionalParams extends coreClient.OperationOptions {
    /** Limit paginated resources (max 100) */
    limit?: number;
    /** The minimum start date in YYYY-MM-DD format. */
    minStartDate?: string;
    /** The maximum start date in YYYY-MM-DD format. */
    maxStartDate?: string;
    /** The interval in which to return the stats. */
    intervalBy?: Enum51;
    /** Sorts results in forwards or backwards direction */
    direction?: Enum52;
}
/** Contains response data for the getDifficultyStats operation. */
export type GetDifficultyStatsResponse = MiddlewarePage<Stat>;
/** Optional parameters. */
export interface GetHashrateStatsOptionalParams extends coreClient.OperationOptions {
    /** Limit paginated resources (max 100) */
    limit?: number;
    /** The minimum start date in YYYY-MM-DD format. */
    minStartDate?: string;
    /** The maximum start date in YYYY-MM-DD format. */
    maxStartDate?: string;
    /** The interval in which to return the stats. */
    intervalBy?: Enum53;
    /** Sorts results in forwards or backwards direction */
    direction?: Enum54;
}
/** Contains response data for the getHashrateStats operation. */
export type GetHashrateStatsResponse = MiddlewarePage<Stat>;
/** Optional parameters. */
export interface GetMinerStatsOptionalParams extends coreClient.OperationOptions {
    /** Limit paginated resources (max 100) */
    limit?: number;
    /** Sorts results in forwards or backwards direction */
    direction?: Enum55;
}
/** Contains response data for the getMinerStats operation. */
export type GetMinerStatsResponse = MiddlewarePage<Miner>;
/** Optional parameters. */
export interface GetNamesStatsOptionalParams extends coreClient.OperationOptions {
    /** Limit paginated resources (max 100) */
    limit?: number;
    /** The minimum start date in YYYY-MM-DD format. */
    minStartDate?: string;
    /** The maximum start date in YYYY-MM-DD format. */
    maxStartDate?: string;
    /** The interval in which to return the stats. */
    intervalBy?: Enum56;
    /** Sorts results in forwards or backwards direction */
    direction?: Enum57;
}
/** Contains response data for the getNamesStats operation. */
export type GetNamesStatsResponse = MiddlewarePage<Stat>;
/** Optional parameters. */
export interface GetTotalStatsOptionalParams extends coreClient.OperationOptions {
    /** Limit paginated resources (max 100) */
    limit?: number;
    /** Scopes results in a generation range */
    scope?: string;
    /** Sorts results in forwards or backwards direction */
    direction?: Enum58;
}
/** Contains response data for the getTotalStats operation. */
export type GetTotalStatsResponse = MiddlewarePage<TotalStat>;
/** Optional parameters. */
export interface GetTotalAccountsStatsOptionalParams extends coreClient.OperationOptions {
    /** Limit paginated resources (max 100) */
    limit?: number;
    /** The interval in which to return the stats. */
    intervalBy?: Enum59;
    /** Sorts results in forwards or backwards direction */
    direction?: Enum60;
}
/** Contains response data for the getTotalAccountsStats operation. */
export type GetTotalAccountsStatsResponse = MiddlewarePage<Stat>;
/** Optional parameters. */
export interface GetTransactionsStatsOptionalParams extends coreClient.OperationOptions {
    /** Limit paginated resources (max 100) */
    limit?: number;
    /** The minimum start date in YYYY-MM-DD format. */
    minStartDate?: string;
    /** The maximum start date in YYYY-MM-DD format. */
    maxStartDate?: string;
    /** The interval in which to return the stats. */
    intervalBy?: Enum61;
    /** The type of the transactions */
    txType?: string;
    /** Sorts results in forwards or backwards direction */
    direction?: Enum62;
}
/** Contains response data for the getTransactionsStats operation. */
export type GetTransactionsStatsResponse = MiddlewarePage<Stat>;
/** Optional parameters. */
export interface GetStatusOptionalParams extends coreClient.OperationOptions {
}
/** Contains response data for the getStatus operation. */
export type GetStatusResponse = Status;
/** Optional parameters. */
export interface GetTransactionsOptionalParams extends coreClient.OperationOptions {
    /** Limit paginated resources (max 100) */
    limit?: number;
    /** The contract ID. [More info](https://github.com/aeternity/ae_mdw#generic-ids) Contract address */
    contract?: `ct_${string}`;
    /** The transaction type. The query allows providing of multiple type parameters. [More info](https://github.com/aeternity/ae_mdw#types) */
    type?: Get0ItemsItem[];
    /** The type group. The query allows providing of multiple type group parameters. [More info](https://github.com/aeternity/ae_mdw#types) */
    typeGroup?: Get1ItemsItem[];
    /** The account ID. [More info](https://github.com/aeternity/ae_mdw#generic-ids) Account address */
    account?: `ak_${string}`;
    /** The channel ID. [More info](https://github.com/aeternity/ae_mdw#generic-ids) Channel ID */
    channel?: `ch_${string}`;
    /** The oracle ID. [More info](https://github.com/aeternity/ae_mdw#generic-ids) Oracle address */
    oracle?: `ok_${string}`;
    /** The sender ID Account address */
    senderId?: `ak_${string}`;
    /** The recipient ID Account address */
    recipientId?: `ak_${string}`;
    /** Entrypoint of a contract call */
    entrypoint?: string;
    /** Scopes results in a generation or time(unix timestamp) range */
    scope?: string;
    /** Sorts results in forwards or backwards direction */
    direction?: Enum65;
}
/** Contains response data for the getTransactions operation. */
export type GetTransactionsResponse = MiddlewarePage<Transaction>;
/** Optional parameters. */
export interface GetTransactionsCountOptionalParams extends coreClient.OperationOptions {
    /** Scopes results in a generation range */
    scope?: string;
    /** Type of a transaction */
    txType?: string;
    /** The ID of the address/name/oracle/etc Account address */
    id?: `ak_${string}`;
}
/** Contains response data for the getTransactionsCount operation. */
export type GetTransactionsCountResponse = {
    /** The parsed response body. */
    body: number;
};
/** Optional parameters. */
export interface GetPendingTransactionsOptionalParams extends coreClient.OperationOptions {
    /** Limit paginated resources (max 100) */
    limit?: number;
    /** Sorts results in forwards or backwards direction */
    direction?: Enum66;
}
/** Contains response data for the getPendingTransactions operation. */
export type GetPendingTransactionsResponse = MiddlewarePage<PendingTransaction>;
/** Optional parameters. */
export interface GetPendingTransactionsCountOptionalParams extends coreClient.OperationOptions {
}
/** Contains response data for the getPendingTransactionsCount operation. */
export type GetPendingTransactionsCountResponse = {
    /** The parsed response body. */
    body: number;
};
/** Optional parameters. */
export interface GetTransactionOptionalParams extends coreClient.OperationOptions {
}
/** Contains response data for the getTransaction operation. */
export type GetTransactionResponse = Transaction;
/** Optional parameters. */
export interface GetTransfersOptionalParams extends coreClient.OperationOptions {
    /** Limit paginated resources (max 100) */
    limit?: number;
    /** Scopes results in a generation range */
    scope?: string;
    /** Sorts results in forwards or backwards direction */
    direction?: Enum67;
}
/** Contains response data for the getTransfers operation. */
export type GetTransfersResponse = MiddlewarePage<Transfer>;
/** Optional parameters. */
export interface MiddlewareOptionalParams extends coreClient.ServiceClientOptions {
    /** Overrides client endpoint. */
    endpoint?: string;
}
