export const PathsBx0Ya3V3AccountsAccountidActivitiesGetResponses200ContentApplicationJsonSchemaAllof0 = {
  type: {
    name: "Composite",
    className: "PathsBx0Ya3V3AccountsAccountidActivitiesGetResponses200ContentApplicationJsonSchemaAllof0",
    modelProperties: {
      data: {
        serializedName: "data",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Activity"
            }
          }
        }
      }
    }
  }
};
export const Activity = {
  type: {
    name: "Composite",
    className: "Activity",
    modelProperties: {
      blockHash: {
        constraints: {
          Pattern: new RegExp("^mh_\\w{38,50}$")
        },
        serializedName: "block_hash",
        required: true,
        type: {
          name: "String"
        }
      },
      blockTime: {
        serializedName: "block_time",
        required: true,
        type: {
          name: "UnixTime"
        }
      },
      height: {
        serializedName: "height",
        required: true,
        type: {
          name: "Number"
        }
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["SpendTxEvent", "OracleRegisterTxEvent", "OracleExtendTxEvent", "OracleQueryTxEvent", "OracleResponseTxEvent", "NamePreclaimTxEvent", "NameClaimTxEvent", "NameTransferTxEvent", "NameUpdateTxEvent", "NameRevokeTxEvent", "ContractCreateTxEvent", "ContractCallTxEvent", "GaAttachTxEvent", "GaMetaTxEvent", "ChannelCreateTxEvent", "ChannelDepositTxEvent", "ChannelWithdrawTxEvent", "ChannelForceProgressTxEvent", "ChannelCloseMutualTxEvent", "ChannelCloseSoloTxEvent", "ChannelSlashTxEvent", "ChannelSettleTxEvent", "ChannelSnapshotSoloTxEvent", "ChannelSetDelegatesTxEvent", "ChannelOffchainTxEvent", "ChannelClientReconnectTxEvent", "PayingForTxEvent"]
        }
      },
      payload: {
        serializedName: "payload",
        type: {
          name: "Composite",
          className: "ActivityPayload"
        }
      }
    }
  }
};
export const ActivityPayload = {
  type: {
    name: "Composite",
    className: "ActivityPayload",
    modelProperties: {
      blockHash: {
        constraints: {
          Pattern: new RegExp("^mh_\\w{38,50}$")
        },
        serializedName: "block_hash",
        type: {
          name: "String"
        }
      },
      blockHeight: {
        serializedName: "block_height",
        type: {
          name: "Number"
        }
      },
      encodedTx: {
        constraints: {
          Pattern: new RegExp("^tx_\\w+$")
        },
        serializedName: "encoded_tx",
        type: {
          name: "String"
        }
      },
      hash: {
        constraints: {
          Pattern: new RegExp("^th_\\w{38,50}$")
        },
        serializedName: "hash",
        type: {
          name: "String"
        }
      },
      microIndex: {
        serializedName: "micro_index",
        type: {
          name: "Number"
        }
      },
      microTime: {
        serializedName: "micro_time",
        type: {
          name: "UnixTime"
        }
      },
      signatures: {
        serializedName: "signatures",
        type: {
          name: "Sequence",
          element: {
            constraints: {
              Pattern: new RegExp("^sg_\\w+$")
            },
            type: {
              name: "String"
            }
          }
        }
      },
      tx: {
        serializedName: "tx",
        type: {
          name: "Composite",
          className: "Tx"
        }
      },
      amount: {
        serializedName: "amount",
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      contractId: {
        constraints: {
          Pattern: new RegExp("^ct_\\w{38,50}$")
        },
        serializedName: "contract_id",
        type: {
          name: "String"
        }
      },
      logIdx: {
        serializedName: "log_idx",
        type: {
          name: "Number"
        }
      },
      recipientId: {
        constraints: {
          Pattern: new RegExp("^ak_\\w{38,50}$")
        },
        serializedName: "recipient_id",
        type: {
          name: "String"
        }
      },
      senderId: {
        constraints: {
          Pattern: new RegExp("^ak_\\w{38,50}$")
        },
        serializedName: "sender_id",
        type: {
          name: "String"
        }
      },
      txHash: {
        constraints: {
          Pattern: new RegExp("^th_\\w{38,50}$")
        },
        serializedName: "tx_hash",
        type: {
          name: "String"
        }
      },
      recipient: {
        constraints: {
          Pattern: new RegExp("^ak_\\w{38,50}$")
        },
        serializedName: "recipient",
        type: {
          name: "String"
        }
      },
      sender: {
        constraints: {
          Pattern: new RegExp("^ak_\\w{38,50}$")
        },
        serializedName: "sender",
        type: {
          name: "String"
        }
      },
      tokenId: {
        serializedName: "token_id",
        type: {
          name: "Number"
        }
      },
      contractTxHash: {
        constraints: {
          Pattern: new RegExp("^th_\\w{38,50}$")
        },
        serializedName: "contract_tx_hash",
        type: {
          name: "String"
        }
      },
      callTxHash: {
        constraints: {
          Pattern: new RegExp("^th_\\w{38,50}$")
        },
        serializedName: "call_tx_hash",
        type: {
          name: "String"
        }
      },
      function: {
        serializedName: "function",
        type: {
          name: "String"
        }
      },
      internalTx: {
        serializedName: "internal_tx",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "any"
            }
          }
        }
      },
      height: {
        serializedName: "height",
        type: {
          name: "Number"
        }
      },
      kind: {
        serializedName: "kind",
        type: {
          name: "Enum",
          allowedValues: ["accounts_extra_lima", "accounts_fortuna", "accounts_genesis", "accounts_lima", "accounts_minerva", "contracts_lima", "reward_dev", "reward_block", "fee_refund_oracle", "fee_lock_name", "fee_refund_name", "fee_spend_name", "reward_oracle"]
        }
      },
      refTxHash: {
        constraints: {
          Pattern: new RegExp("^th_\\w{38,50}$")
        },
        serializedName: "ref_tx_hash",
        type: {
          name: "String"
        }
      }
    }
  }
};
export const Tx = {
  type: {
    name: "Composite",
    className: "Tx",
    modelProperties: {
      recipientId: {
        serializedName: "recipient_id",
        type: {
          name: "String"
        }
      },
      amount: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "amount",
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      fee: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "fee",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      ttl: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "ttl",
        type: {
          name: "Number"
        }
      },
      senderId: {
        serializedName: "sender_id",
        type: {
          name: "String"
        }
      },
      nonce: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "nonce",
        type: {
          name: "Number"
        }
      },
      payload: {
        serializedName: "payload",
        type: {
          name: "String"
        }
      },
      initiatorId: {
        serializedName: "initiator_id",
        type: {
          name: "String"
        }
      },
      initiatorAmount: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "initiator_amount",
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      responderId: {
        serializedName: "responder_id",
        type: {
          name: "String"
        }
      },
      responderAmount: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "responder_amount",
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      channelReserve: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "channel_reserve",
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      lockPeriod: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "lock_period",
        type: {
          name: "Number"
        }
      },
      stateHash: {
        serializedName: "state_hash",
        type: {
          name: "String"
        }
      },
      delegateIds: {
        serializedName: "delegate_ids",
        type: {
          name: "Composite",
          className: "Delegates"
        }
      },
      channelId: {
        serializedName: "channel_id",
        type: {
          name: "String"
        }
      },
      fromId: {
        serializedName: "from_id",
        type: {
          name: "String"
        }
      },
      round: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "round",
        type: {
          name: "Number"
        }
      },
      toId: {
        serializedName: "to_id",
        type: {
          name: "String"
        }
      },
      update: {
        serializedName: "update",
        type: {
          name: "Composite",
          className: "OffChainUpdate"
        }
      },
      offchainTrees: {
        serializedName: "offchain_trees",
        type: {
          name: "String"
        }
      },
      initiatorAmountFinal: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "initiator_amount_final",
        type: {
          name: "Number"
        }
      },
      responderAmountFinal: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "responder_amount_final",
        type: {
          name: "Number"
        }
      },
      poi: {
        serializedName: "poi",
        type: {
          name: "String"
        }
      },
      initiatorDelegateIds: {
        serializedName: "initiator_delegate_ids",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      responderDelegateIds: {
        serializedName: "responder_delegate_ids",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      queryFormat: {
        serializedName: "query_format",
        type: {
          name: "String"
        }
      },
      responseFormat: {
        serializedName: "response_format",
        type: {
          name: "String"
        }
      },
      queryFee: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "query_fee",
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      oracleTtl: {
        serializedName: "oracle_ttl",
        type: {
          name: "Composite",
          className: "RelativeTTL"
        }
      },
      accountId: {
        serializedName: "account_id",
        type: {
          name: "String"
        }
      },
      abiVersion: {
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 0
        },
        serializedName: "abi_version",
        type: {
          name: "Number"
        }
      },
      oracleId: {
        serializedName: "oracle_id",
        type: {
          name: "String"
        }
      },
      query: {
        serializedName: "query",
        type: {
          name: "String"
        }
      },
      queryTtl: {
        serializedName: "query_ttl",
        type: {
          name: "Composite",
          className: "Ttl"
        }
      },
      responseTtl: {
        serializedName: "response_ttl",
        type: {
          name: "Composite",
          className: "RelativeTTL"
        }
      },
      queryId: {
        serializedName: "query_id",
        type: {
          name: "String"
        }
      },
      response: {
        serializedName: "response",
        type: {
          name: "String"
        }
      },
      commitmentId: {
        serializedName: "commitment_id",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      nameSalt: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "name_salt",
        type: {
          name: "Number"
        }
      },
      nameFee: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "name_fee",
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      nameId: {
        serializedName: "name_id",
        type: {
          name: "String"
        }
      },
      nameTtl: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "name_ttl",
        type: {
          name: "Number"
        }
      },
      pointers: {
        serializedName: "pointers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NamePointer"
            }
          }
        }
      },
      clientTtl: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "client_ttl",
        type: {
          name: "Number"
        }
      },
      ownerId: {
        serializedName: "owner_id",
        type: {
          name: "String"
        }
      },
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      vmVersion: {
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 0
        },
        serializedName: "vm_version",
        type: {
          name: "Number"
        }
      },
      deposit: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "deposit",
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      gas: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "gas",
        type: {
          name: "Number"
        }
      },
      gasPrice: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "gas_price",
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      callData: {
        serializedName: "call_data",
        type: {
          name: "String"
        }
      },
      callerId: {
        serializedName: "caller_id",
        type: {
          name: "String"
        }
      },
      contractId: {
        serializedName: "contract_id",
        type: {
          name: "String"
        }
      },
      authFun: {
        constraints: {
          Pattern: new RegExp("^(0x|0X)?[a-fA-F0-9]+$")
        },
        serializedName: "auth_fun",
        type: {
          name: "String"
        }
      },
      gaId: {
        serializedName: "ga_id",
        type: {
          name: "String"
        }
      },
      authData: {
        serializedName: "auth_data",
        type: {
          name: "String"
        }
      },
      tx: {
        serializedName: "tx",
        type: {
          name: "Composite",
          className: "SignedTx"
        }
      },
      payerId: {
        serializedName: "payer_id",
        type: {
          name: "String"
        }
      },
      version: {
        constraints: {
          InclusiveMaximum: 4294967295,
          InclusiveMinimum: 0
        },
        serializedName: "version",
        required: true,
        type: {
          name: "Number"
        }
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["SpendTx", "ChannelCreateTx", "ChannelDepositTx", "ChannelWithdrawTx", "ChannelForceProgressTx", "ChannelCloseMutualTx", "ChannelCloseSoloTx", "ChannelSlashTx", "ChannelSettleTx", "ChannelSnapshotSoloTx", "ChannelSetDelegatesTx", "OracleRegisterTx", "OracleExtendTx", "OracleQueryTx", "OracleRespondTx", "NamePreclaimTx", "NameClaimTx", "NameUpdateTx", "NameTransferTx", "NameRevokeTx", "ContractCreateTx", "ContractCallTx", "GAAttachTx", "GAMetaTx", "PayingForTx"]
        }
      }
    }
  }
};
export const Delegates = {
  type: {
    name: "Composite",
    className: "Delegates",
    modelProperties: {
      initiator: {
        serializedName: "initiator",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      responder: {
        serializedName: "responder",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};
export const OffChainUpdate = {
  serializedName: "OffChainUpdate",
  type: {
    name: "Composite",
    className: "OffChainUpdate",
    uberParent: "OffChainUpdate",
    polymorphicDiscriminator: {
      serializedName: "op",
      clientName: "op"
    },
    modelProperties: {
      op: {
        serializedName: "op",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};
export const RelativeTTL = {
  type: {
    name: "Composite",
    className: "RelativeTTL",
    modelProperties: {
      type: {
        defaultValue: "delta",
        isConstant: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      value: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "value",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const Ttl = {
  type: {
    name: "Composite",
    className: "Ttl",
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["delta", "block"]
        }
      },
      value: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "value",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const NamePointer = {
  type: {
    name: "Composite",
    className: "NamePointer",
    modelProperties: {
      key: {
        serializedName: "key",
        required: true,
        type: {
          name: "String"
        }
      },
      encodedKey: {
        serializedName: "encoded_key",
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};
export const SignedTx = {
  type: {
    name: "Composite",
    className: "SignedTx",
    modelProperties: {
      tx: {
        serializedName: "tx",
        type: {
          name: "Composite",
          className: "Tx"
        }
      },
      blockHeight: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: -1
        },
        serializedName: "block_height",
        type: {
          name: "Number"
        }
      },
      blockHash: {
        serializedName: "block_hash",
        type: {
          name: "String"
        }
      },
      hash: {
        serializedName: "hash",
        type: {
          name: "String"
        }
      },
      encodedTx: {
        serializedName: "encoded_tx",
        type: {
          name: "String"
        }
      },
      signatures: {
        serializedName: "signatures",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};
export const PaginatedResponse = {
  type: {
    name: "Composite",
    className: "PaginatedResponse",
    modelProperties: {
      next: {
        serializedName: "next",
        required: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      prev: {
        serializedName: "prev",
        required: true,
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};
export const ErrorResponse = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};
export const Paths1Q9E32FV3AccountsAccountidAex141TokensGetResponses200ContentApplicationJsonSchemaAllof0 = {
  type: {
    name: "Composite",
    className: "Paths1Q9E32FV3AccountsAccountidAex141TokensGetResponses200ContentApplicationJsonSchemaAllof0",
    modelProperties: {
      data: {
        serializedName: "data",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Aex141TokenResponse"
            }
          }
        }
      }
    }
  }
};
export const Aex141TokenResponse = {
  type: {
    name: "Composite",
    className: "Aex141TokenResponse",
    modelProperties: {
      contractId: {
        constraints: {
          Pattern: new RegExp("^ct_\\w{38,50}$")
        },
        serializedName: "contract_id",
        required: true,
        type: {
          name: "String"
        }
      },
      ownerId: {
        constraints: {
          Pattern: new RegExp("^ak_\\w{38,50}$")
        },
        serializedName: "owner_id",
        type: {
          name: "String"
        }
      },
      tokenId: {
        serializedName: "token_id",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const PathsZ92TkfV3AccountsAccountidAex9BalancesGetResponses200ContentApplicationJsonSchemaAllof1 = {
  type: {
    name: "Composite",
    className: "PathsZ92TkfV3AccountsAccountidAex9BalancesGetResponses200ContentApplicationJsonSchemaAllof1",
    modelProperties: {
      data: {
        serializedName: "data",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Aex9BalanceResponse"
            }
          }
        }
      }
    }
  }
};
export const Aex9BalanceResponse = {
  type: {
    name: "Composite",
    className: "Aex9BalanceResponse",
    modelProperties: {
      amount: {
        serializedName: "amount",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      blockHash: {
        serializedName: "block_hash",
        required: true,
        type: {
          name: "Number"
        }
      },
      contractId: {
        constraints: {
          Pattern: new RegExp("^ct_\\w{38,50}$")
        },
        serializedName: "contract_id",
        required: true,
        type: {
          name: "String"
        }
      },
      decimals: {
        serializedName: "decimals",
        required: true,
        type: {
          name: "Number"
        }
      },
      height: {
        serializedName: "height",
        required: true,
        type: {
          name: "Number"
        }
      },
      tokenName: {
        serializedName: "token_name",
        required: true,
        type: {
          name: "String"
        }
      },
      tokenSymbol: {
        serializedName: "token_symbol",
        required: true,
        type: {
          name: "String"
        }
      },
      txHash: {
        constraints: {
          Pattern: new RegExp("^th_\\w{38,50}$")
        },
        serializedName: "tx_hash",
        required: true,
        type: {
          name: "String"
        }
      },
      txIndex: {
        serializedName: "tx_index",
        required: true,
        type: {
          name: "Number"
        }
      },
      txType: {
        serializedName: "tx_type",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};
export const Paths10R8Q7PV3AccountsAccountidDexSwapsGetResponses200ContentApplicationJsonSchemaAllof0 = {
  type: {
    name: "Composite",
    className: "Paths10R8Q7PV3AccountsAccountidDexSwapsGetResponses200ContentApplicationJsonSchemaAllof0",
    modelProperties: {
      data: {
        serializedName: "data",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DexSwap"
            }
          }
        }
      }
    }
  }
};
export const DexSwap = {
  type: {
    name: "Composite",
    className: "DexSwap",
    modelProperties: {
      amounts: {
        serializedName: "amounts",
        type: {
          name: "Composite",
          className: "DexSwapAmounts"
        }
      },
      action: {
        serializedName: "action",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["SWAP", "BUY", "SELL"]
        }
      },
      caller: {
        constraints: {
          Pattern: new RegExp("^ak_\\w{38,50}$")
        },
        serializedName: "caller",
        required: true,
        type: {
          name: "String"
        }
      },
      fromToken: {
        serializedName: "from_token",
        required: true,
        type: {
          name: "String"
        }
      },
      toToken: {
        serializedName: "to_token",
        required: true,
        type: {
          name: "String"
        }
      },
      logIdx: {
        serializedName: "log_idx",
        required: true,
        type: {
          name: "Number"
        }
      },
      toAccount: {
        constraints: {
          Pattern: new RegExp("^ak_\\w{38,50}$")
        },
        serializedName: "to_account",
        required: true,
        type: {
          name: "String"
        }
      },
      txHash: {
        constraints: {
          Pattern: new RegExp("^th_\\w{38,50}$")
        },
        serializedName: "tx_hash",
        required: true,
        type: {
          name: "String"
        }
      },
      fromContract: {
        constraints: {
          Pattern: new RegExp("^ct_\\w{38,50}$")
        },
        serializedName: "from_contract",
        required: true,
        type: {
          name: "String"
        }
      },
      toContract: {
        constraints: {
          Pattern: new RegExp("^ct_\\w{38,50}$")
        },
        serializedName: "to_contract",
        required: true,
        type: {
          name: "String"
        }
      },
      fromAmount: {
        serializedName: "from_amount",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      toAmount: {
        serializedName: "to_amount",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      fromDecimals: {
        serializedName: "from_decimals",
        required: true,
        type: {
          name: "Number"
        }
      },
      toDecimals: {
        serializedName: "to_decimals",
        required: true,
        type: {
          name: "Number"
        }
      },
      microTime: {
        serializedName: "micro_time",
        required: true,
        type: {
          name: "UnixTime"
        }
      },
      height: {
        serializedName: "height",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const DexSwapAmounts = {
  type: {
    name: "Composite",
    className: "DexSwapAmounts",
    modelProperties: {
      amount0In: {
        serializedName: "amount0_in",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      amount1In: {
        serializedName: "amount1_in",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      amount0Out: {
        serializedName: "amount0_out",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      amount1Out: {
        serializedName: "amount1_out",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      }
    }
  }
};
export const Paths16G4GzrV3AccountsAccountidNamesClaimsGetResponses200ContentApplicationJsonSchemaAllof0 = {
  type: {
    name: "Composite",
    className: "Paths16G4GzrV3AccountsAccountidNamesClaimsGetResponses200ContentApplicationJsonSchemaAllof0",
    modelProperties: {
      data: {
        serializedName: "data",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NameClaim"
            }
          }
        }
      }
    }
  }
};
export const NameClaim = {
  type: {
    name: "Composite",
    className: "NameClaim",
    modelProperties: {
      activeFrom: {
        serializedName: "active_from",
        required: true,
        type: {
          name: "Number"
        }
      },
      sourceTxHash: {
        constraints: {
          Pattern: new RegExp("^th_\\w{38,50}$")
        },
        serializedName: "source_tx_hash",
        required: true,
        type: {
          name: "String"
        }
      },
      sourceTxType: {
        serializedName: "source_tx_type",
        required: true,
        type: {
          name: "String"
        }
      },
      blockHash: {
        constraints: {
          Pattern: new RegExp("^mh_\\w{38,50}$")
        },
        serializedName: "block_hash",
        required: true,
        type: {
          name: "String"
        }
      },
      height: {
        serializedName: "height",
        required: true,
        type: {
          name: "Number"
        }
      },
      tx: {
        serializedName: "tx",
        type: {
          name: "Composite",
          className: "NameClaimTx"
        }
      },
      internalSource: {
        serializedName: "internal_source",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};
export const NameClaimTx = {
  type: {
    name: "Composite",
    className: "NameClaimTx",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      nameSalt: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "name_salt",
        required: true,
        type: {
          name: "Number"
        }
      },
      nameFee: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "name_fee",
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      fee: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "fee",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      ttl: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "ttl",
        type: {
          name: "Number"
        }
      },
      accountId: {
        serializedName: "account_id",
        required: true,
        type: {
          name: "String"
        }
      },
      nonce: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "nonce",
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const NotFoundResponse = {
  type: {
    name: "Composite",
    className: "NotFoundResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};
export const PathsA60QxwV3AccountsAccountidNamesPointeesGetResponses200ContentApplicationJsonSchemaAllof0 = {
  type: {
    name: "Composite",
    className: "PathsA60QxwV3AccountsAccountidNamesPointeesGetResponses200ContentApplicationJsonSchemaAllof0",
    modelProperties: {
      data: {
        serializedName: "data",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Pointee"
            }
          }
        }
      }
    }
  }
};
export const Pointee = {
  type: {
    name: "Composite",
    className: "Pointee",
    modelProperties: {
      active: {
        serializedName: "active",
        required: true,
        type: {
          name: "Boolean"
        }
      },
      name: {
        constraints: {
          Pattern: new RegExp("^\\w+\\.chain$")
        },
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      key: {
        serializedName: "key",
        required: true,
        type: {
          name: "String"
        }
      },
      blockHash: {
        constraints: {
          Pattern: new RegExp("^mh_\\w{38,50}$")
        },
        serializedName: "block_hash",
        required: true,
        type: {
          name: "String"
        }
      },
      tx: {
        serializedName: "tx",
        type: {
          name: "Composite",
          className: "NameUpdateTx"
        }
      },
      sourceTxType: {
        serializedName: "source_tx_type",
        required: true,
        type: {
          name: "String"
        }
      },
      sourceTxHash: {
        constraints: {
          Pattern: new RegExp("^th_\\w{38,50}$")
        },
        serializedName: "source_tx_hash",
        required: true,
        type: {
          name: "String"
        }
      },
      blockHeight: {
        serializedName: "block_height",
        required: true,
        type: {
          name: "Number"
        }
      },
      blockTime: {
        serializedName: "block_time",
        required: true,
        type: {
          name: "UnixTime"
        }
      }
    }
  }
};
export const NameUpdateTx = {
  type: {
    name: "Composite",
    className: "NameUpdateTx",
    modelProperties: {
      nameId: {
        serializedName: "name_id",
        required: true,
        type: {
          name: "String"
        }
      },
      nameTtl: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "name_ttl",
        required: true,
        type: {
          name: "Number"
        }
      },
      pointers: {
        serializedName: "pointers",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NamePointer"
            }
          }
        }
      },
      clientTtl: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "client_ttl",
        required: true,
        type: {
          name: "Number"
        }
      },
      fee: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "fee",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      ttl: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "ttl",
        type: {
          name: "Number"
        }
      },
      accountId: {
        serializedName: "account_id",
        required: true,
        type: {
          name: "String"
        }
      },
      nonce: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "nonce",
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const PathsXcg812V3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchema = {
  type: {
    name: "Composite",
    className: "PathsXcg812V3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchema",
    modelProperties: {
      contractCreateTx: {
        serializedName: "contract_create_tx",
        type: {
          name: "Composite",
          className: "Get200ApplicationJsonProperties"
        }
      },
      contractCallTx: {
        serializedName: "contract_call_tx",
        type: {
          name: "Composite",
          className: "PathsEvgmfsV3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesContractCallTx"
        }
      },
      gaAttachTx: {
        serializedName: "ga_attach_tx",
        type: {
          name: "Composite",
          className: "Paths1Mat0BzV3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesGaAttachTx"
        }
      },
      gaMetaTx: {
        serializedName: "ga_meta_tx",
        type: {
          name: "Composite",
          className: "Paths1Smy8TV3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesGaMetaTx"
        }
      },
      channelCloseMutualTx: {
        serializedName: "channel_close_mutual_tx",
        type: {
          name: "Composite",
          className: "PathsTachlnV3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesChannelCloseMutualTx"
        }
      },
      channelCloseSoloTx: {
        serializedName: "channel_close_solo_tx",
        type: {
          name: "Composite",
          className: "Paths1AeqodeV3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesChannelCloseSoloTx"
        }
      },
      channelCreateTx: {
        serializedName: "channel_create_tx",
        type: {
          name: "Composite",
          className: "PathsGp6EyrV3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesChannelCreateTx"
        }
      },
      channelDepositTx: {
        serializedName: "channel_deposit_tx",
        type: {
          name: "Composite",
          className: "Paths10Z6Jt8V3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesChannelDepositTx"
        }
      },
      channelForceProgressTx: {
        serializedName: "channel_force_progress_tx",
        type: {
          name: "Composite",
          className: "Paths1Jkl3L3V3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesChannelForceProgressTx"
        }
      },
      channelSetDelegatesTx: {
        serializedName: "channel_set_delegates_tx",
        type: {
          name: "Composite",
          className: "PathsN9Iv8YV3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesChannelSetDelegatesTx"
        }
      },
      channelSettleTx: {
        serializedName: "channel_settle_tx",
        type: {
          name: "Composite",
          className: "PathsCsym65V3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesChannelSettleTx"
        }
      },
      channelSlashTx: {
        serializedName: "channel_slash_tx",
        type: {
          name: "Composite",
          className: "PathsEwav40V3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesChannelSlashTx"
        }
      },
      channelSnapshotSoloTx: {
        serializedName: "channel_snapshot_solo_tx",
        type: {
          name: "Composite",
          className: "Paths5Ehb0PV3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesChannelSnapshotSoloTx"
        }
      },
      channelWithdrawTx: {
        serializedName: "channel_withdraw_tx",
        type: {
          name: "Composite",
          className: "Paths1Qk8BkgV3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesChannelWithdrawTx"
        }
      },
      nameClaimTx: {
        serializedName: "name_claim_tx",
        type: {
          name: "Composite",
          className: "PathsC7WhtoV3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesNameClaimTx"
        }
      },
      namePreclaimTx: {
        serializedName: "name_preclaim_tx",
        type: {
          name: "Composite",
          className: "Paths1R4Z885V3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesNamePreclaimTx"
        }
      },
      nameRevokeTx: {
        serializedName: "name_revoke_tx",
        type: {
          name: "Composite",
          className: "PathsKrpz02V3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesNameRevokeTx"
        }
      },
      nameTransferTx: {
        serializedName: "name_transfer_tx",
        type: {
          name: "Composite",
          className: "PathsPs07B4V3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesNameTransferTx"
        }
      },
      nameUpdateTx: {
        serializedName: "name_update_tx",
        type: {
          name: "Composite",
          className: "PathsTug6HrV3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesNameUpdateTx"
        }
      },
      oracleExtendTx: {
        serializedName: "oracle_extend_tx",
        type: {
          name: "Composite",
          className: "Paths17Dchb7V3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesOracleExtendTx"
        }
      },
      oracleQueryTx: {
        serializedName: "oracle_query_tx",
        type: {
          name: "Composite",
          className: "Paths1Ngkd7FV3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesOracleQueryTx"
        }
      },
      oracleRegisterTx: {
        serializedName: "oracle_register_tx",
        type: {
          name: "Composite",
          className: "PathsMvqgifV3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesOracleRegisterTx"
        }
      },
      oracleResponseTx: {
        serializedName: "oracle_response_tx",
        type: {
          name: "Composite",
          className: "Paths1U2Ve7RV3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesOracleResponseTx"
        }
      },
      payingForTx: {
        serializedName: "paying_for_tx",
        type: {
          name: "Composite",
          className: "Paths1N757S0V3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesPayingForTx"
        }
      },
      spendTx: {
        serializedName: "spend_tx",
        type: {
          name: "Composite",
          className: "Paths11Bqs5V3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesSpendTx"
        }
      },
      channelOffchainTx: {
        serializedName: "channel_offchain_tx",
        type: {
          name: "Composite",
          className: "Paths4Pjk8DV3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesChannelOffchainTx"
        }
      },
      total: {
        serializedName: "total",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const Get200ApplicationJsonProperties = {
  type: {
    name: "Composite",
    className: "Get200ApplicationJsonProperties",
    modelProperties: {
      ownerId: {
        serializedName: "owner_id",
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const PathsEvgmfsV3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesContractCallTx = {
  type: {
    name: "Composite",
    className: "PathsEvgmfsV3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesContractCallTx",
    modelProperties: {
      contractId: {
        serializedName: "contract_id",
        type: {
          name: "Number"
        }
      },
      callerId: {
        serializedName: "caller_id",
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const Paths1Mat0BzV3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesGaAttachTx = {
  type: {
    name: "Composite",
    className: "Paths1Mat0BzV3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesGaAttachTx",
    modelProperties: {
      ownerId: {
        serializedName: "owner_id",
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const Paths1Smy8TV3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesGaMetaTx = {
  type: {
    name: "Composite",
    className: "Paths1Smy8TV3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesGaMetaTx",
    modelProperties: {
      gaId: {
        serializedName: "ga_id",
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const PathsTachlnV3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesChannelCloseMutualTx = {
  type: {
    name: "Composite",
    className: "PathsTachlnV3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesChannelCloseMutualTx",
    modelProperties: {
      channelId: {
        serializedName: "channel_id",
        type: {
          name: "Number"
        }
      },
      fromId: {
        serializedName: "from_id",
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const Paths1AeqodeV3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesChannelCloseSoloTx = {
  type: {
    name: "Composite",
    className: "Paths1AeqodeV3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesChannelCloseSoloTx",
    modelProperties: {
      channelId: {
        serializedName: "channel_id",
        type: {
          name: "Number"
        }
      },
      fromId: {
        serializedName: "from_id",
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const PathsGp6EyrV3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesChannelCreateTx = {
  type: {
    name: "Composite",
    className: "PathsGp6EyrV3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesChannelCreateTx",
    modelProperties: {
      initiatorId: {
        serializedName: "initiator_id",
        type: {
          name: "Number"
        }
      },
      responderId: {
        serializedName: "responder_id",
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const Paths10Z6Jt8V3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesChannelDepositTx = {
  type: {
    name: "Composite",
    className: "Paths10Z6Jt8V3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesChannelDepositTx",
    modelProperties: {
      channelId: {
        serializedName: "channel_id",
        type: {
          name: "Number"
        }
      },
      fromId: {
        serializedName: "from_id",
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const Paths1Jkl3L3V3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesChannelForceProgressTx = {
  type: {
    name: "Composite",
    className: "Paths1Jkl3L3V3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesChannelForceProgressTx",
    modelProperties: {
      channelId: {
        serializedName: "channel_id",
        type: {
          name: "Number"
        }
      },
      fromId: {
        serializedName: "from_id",
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const PathsN9Iv8YV3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesChannelSetDelegatesTx = {
  type: {
    name: "Composite",
    className: "PathsN9Iv8YV3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesChannelSetDelegatesTx",
    modelProperties: {
      channelId: {
        serializedName: "channel_id",
        type: {
          name: "Number"
        }
      },
      fromId: {
        serializedName: "from_id",
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const PathsCsym65V3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesChannelSettleTx = {
  type: {
    name: "Composite",
    className: "PathsCsym65V3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesChannelSettleTx",
    modelProperties: {
      channelId: {
        serializedName: "channel_id",
        type: {
          name: "Number"
        }
      },
      fromId: {
        serializedName: "from_id",
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const PathsEwav40V3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesChannelSlashTx = {
  type: {
    name: "Composite",
    className: "PathsEwav40V3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesChannelSlashTx",
    modelProperties: {
      channelId: {
        serializedName: "channel_id",
        type: {
          name: "Number"
        }
      },
      fromId: {
        serializedName: "from_id",
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const Paths5Ehb0PV3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesChannelSnapshotSoloTx = {
  type: {
    name: "Composite",
    className: "Paths5Ehb0PV3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesChannelSnapshotSoloTx",
    modelProperties: {
      channelId: {
        serializedName: "channel_id",
        type: {
          name: "Number"
        }
      },
      fromId: {
        serializedName: "from_id",
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const Paths1Qk8BkgV3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesChannelWithdrawTx = {
  type: {
    name: "Composite",
    className: "Paths1Qk8BkgV3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesChannelWithdrawTx",
    modelProperties: {
      channelId: {
        serializedName: "channel_id",
        type: {
          name: "Number"
        }
      },
      toId: {
        serializedName: "to_id",
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const PathsC7WhtoV3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesNameClaimTx = {
  type: {
    name: "Composite",
    className: "PathsC7WhtoV3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesNameClaimTx",
    modelProperties: {
      accountId: {
        serializedName: "account_id",
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const Paths1R4Z885V3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesNamePreclaimTx = {
  type: {
    name: "Composite",
    className: "Paths1R4Z885V3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesNamePreclaimTx",
    modelProperties: {
      accountId: {
        serializedName: "account_id",
        type: {
          name: "Number"
        }
      },
      commitmentId: {
        serializedName: "commitment_id",
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const PathsKrpz02V3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesNameRevokeTx = {
  type: {
    name: "Composite",
    className: "PathsKrpz02V3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesNameRevokeTx",
    modelProperties: {
      accountId: {
        serializedName: "account_id",
        type: {
          name: "Number"
        }
      },
      nameId: {
        serializedName: "name_id",
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const PathsPs07B4V3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesNameTransferTx = {
  type: {
    name: "Composite",
    className: "PathsPs07B4V3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesNameTransferTx",
    modelProperties: {
      recipientId: {
        serializedName: "recipient_id",
        type: {
          name: "Number"
        }
      },
      accountId: {
        serializedName: "account_id",
        type: {
          name: "Number"
        }
      },
      nameId: {
        serializedName: "name_id",
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const PathsTug6HrV3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesNameUpdateTx = {
  type: {
    name: "Composite",
    className: "PathsTug6HrV3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesNameUpdateTx",
    modelProperties: {
      accountId: {
        serializedName: "account_id",
        type: {
          name: "Number"
        }
      },
      nameId: {
        serializedName: "name_id",
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const Paths17Dchb7V3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesOracleExtendTx = {
  type: {
    name: "Composite",
    className: "Paths17Dchb7V3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesOracleExtendTx",
    modelProperties: {
      oracleId: {
        serializedName: "oracle_id",
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const Paths1Ngkd7FV3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesOracleQueryTx = {
  type: {
    name: "Composite",
    className: "Paths1Ngkd7FV3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesOracleQueryTx",
    modelProperties: {
      senderId: {
        serializedName: "sender_id",
        type: {
          name: "Number"
        }
      },
      oracleId: {
        serializedName: "oracle_id",
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const PathsMvqgifV3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesOracleRegisterTx = {
  type: {
    name: "Composite",
    className: "PathsMvqgifV3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesOracleRegisterTx",
    modelProperties: {
      accountId: {
        serializedName: "account_id",
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const Paths1U2Ve7RV3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesOracleResponseTx = {
  type: {
    name: "Composite",
    className: "Paths1U2Ve7RV3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesOracleResponseTx",
    modelProperties: {
      oracleId: {
        serializedName: "oracle_id",
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const Paths1N757S0V3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesPayingForTx = {
  type: {
    name: "Composite",
    className: "Paths1N757S0V3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesPayingForTx",
    modelProperties: {
      payerId: {
        serializedName: "payer_id",
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const Paths11Bqs5V3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesSpendTx = {
  type: {
    name: "Composite",
    className: "Paths11Bqs5V3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesSpendTx",
    modelProperties: {
      senderId: {
        serializedName: "sender_id",
        type: {
          name: "Number"
        }
      },
      recipientId: {
        serializedName: "recipient_id",
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const Paths4Pjk8DV3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesChannelOffchainTx = {
  type: {
    name: "Composite",
    className: "Paths4Pjk8DV3AccountsAccountidTransactionsCountGetResponses200ContentApplicationJsonSchemaPropertiesChannelOffchainTx",
    modelProperties: {
      channelId: {
        serializedName: "channel_id",
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const Paths8I0YgwV3Aex141GetResponses200ContentApplicationJsonSchemaAllof0 = {
  type: {
    name: "Composite",
    className: "Paths8I0YgwV3Aex141GetResponses200ContentApplicationJsonSchemaAllof0",
    modelProperties: {
      data: {
        serializedName: "data",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Aex141Response"
            }
          }
        }
      }
    }
  }
};
export const Aex141Response = {
  type: {
    name: "Composite",
    className: "Aex141Response",
    modelProperties: {
      baseUrl: {
        serializedName: "base_url",
        required: true,
        type: {
          name: "String"
        }
      },
      contractId: {
        constraints: {
          Pattern: new RegExp("^ct_\\w{38,50}$")
        },
        serializedName: "contract_id",
        required: true,
        type: {
          name: "String"
        }
      },
      contractTxHash: {
        constraints: {
          Pattern: new RegExp("^th_\\w{38,50}$")
        },
        serializedName: "contract_tx_hash",
        required: true,
        type: {
          name: "String"
        }
      },
      extensions: {
        serializedName: "extensions",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      limits: {
        serializedName: "limits",
        required: true,
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "any"
            }
          }
        }
      },
      invalid: {
        serializedName: "invalid",
        required: true,
        type: {
          name: "Boolean"
        }
      },
      creationTime: {
        serializedName: "creation_time",
        required: true,
        type: {
          name: "UnixTime"
        }
      },
      blockHeight: {
        serializedName: "block_height",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const PathsWkpcwaV3Aex141ContractidTemplatesGetResponses200ContentApplicationJsonSchemaAllof0 = {
  type: {
    name: "Composite",
    className: "PathsWkpcwaV3Aex141ContractidTemplatesGetResponses200ContentApplicationJsonSchemaAllof0",
    modelProperties: {
      data: {
        serializedName: "data",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Aex141TemplatesResponse"
            }
          }
        }
      }
    }
  }
};
export const Aex141TemplatesResponse = {
  type: {
    name: "Composite",
    className: "Aex141TemplatesResponse",
    modelProperties: {
      contractId: {
        constraints: {
          Pattern: new RegExp("^ct_\\w{38,50}$")
        },
        serializedName: "contract_id",
        required: true,
        type: {
          name: "String"
        }
      },
      edition: {
        serializedName: "edition",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "any"
            }
          }
        }
      },
      logIdx: {
        serializedName: "log_idx",
        required: true,
        type: {
          name: "Number"
        }
      },
      templateId: {
        serializedName: "template_id",
        required: true,
        type: {
          name: "Number"
        }
      },
      txHash: {
        constraints: {
          Pattern: new RegExp("^th_\\w{38,50}$")
        },
        serializedName: "tx_hash",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};
export const PathsRay4X0V3Aex141ContractidTemplatesTemplateidTokensGetResponses200ContentApplicationJsonSchemaAllof0 = {
  type: {
    name: "Composite",
    className: "PathsRay4X0V3Aex141ContractidTemplatesTemplateidTokensGetResponses200ContentApplicationJsonSchemaAllof0",
    modelProperties: {
      data: {
        serializedName: "data",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Aex141TemplateTokensResponse"
            }
          }
        }
      }
    }
  }
};
export const Aex141TemplateTokensResponse = {
  type: {
    name: "Composite",
    className: "Aex141TemplateTokensResponse",
    modelProperties: {
      ownerId: {
        constraints: {
          Pattern: new RegExp("^ak_\\w{38,50}$")
        },
        serializedName: "owner_id",
        required: true,
        type: {
          name: "String"
        }
      },
      logIdx: {
        serializedName: "log_idx",
        required: true,
        type: {
          name: "Number"
        }
      },
      tokenId: {
        serializedName: "token_id",
        required: true,
        type: {
          name: "Number"
        }
      },
      txHash: {
        constraints: {
          Pattern: new RegExp("^th_\\w{38,50}$")
        },
        serializedName: "tx_hash",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};
export const Paths1TkisghV3Aex141ContractidTokensGetResponses200ContentApplicationJsonSchemaAllof0 = {
  type: {
    name: "Composite",
    className: "Paths1TkisghV3Aex141ContractidTokensGetResponses200ContentApplicationJsonSchemaAllof0",
    modelProperties: {
      data: {
        serializedName: "data",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Aex141TokenResponse"
            }
          }
        }
      }
    }
  }
};
export const Aex141TokenDetailResponse = {
  type: {
    name: "Composite",
    className: "Aex141TokenDetailResponse",
    modelProperties: {
      contractId: {
        constraints: {
          Pattern: new RegExp("^ct_\\w{38,50}$")
        },
        serializedName: "contract_id",
        required: true,
        type: {
          name: "String"
        }
      },
      ownerId: {
        constraints: {
          Pattern: new RegExp("^ak_\\w{38,50}$")
        },
        serializedName: "owner_id",
        required: true,
        type: {
          name: "String"
        }
      },
      tokenId: {
        serializedName: "token_id",
        required: true,
        type: {
          name: "Number"
        }
      },
      metadata: {
        serializedName: "metadata",
        required: true,
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "any"
            }
          }
        }
      }
    }
  }
};
export const Paths1A8Ah39V3Aex141ContractidTransfersGetResponses200ContentApplicationJsonSchemaAllof0 = {
  type: {
    name: "Composite",
    className: "Paths1A8Ah39V3Aex141ContractidTransfersGetResponses200ContentApplicationJsonSchemaAllof0",
    modelProperties: {
      data: {
        serializedName: "data",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Aex141TransferEvent"
            }
          }
        }
      }
    }
  }
};
export const Aex141TransferEvent = {
  type: {
    name: "Composite",
    className: "Aex141TransferEvent",
    modelProperties: {
      blockHeight: {
        serializedName: "block_height",
        required: true,
        type: {
          name: "Number"
        }
      },
      contractId: {
        constraints: {
          Pattern: new RegExp("^ct_\\w{38,50}$")
        },
        serializedName: "contract_id",
        required: true,
        type: {
          name: "String"
        }
      },
      logIdx: {
        serializedName: "log_idx",
        required: true,
        type: {
          name: "Number"
        }
      },
      microIndex: {
        serializedName: "micro_index",
        required: true,
        type: {
          name: "Number"
        }
      },
      microTime: {
        serializedName: "micro_time",
        required: true,
        type: {
          name: "UnixTime"
        }
      },
      recipient: {
        constraints: {
          Pattern: new RegExp("^ak_\\w{38,50}$")
        },
        serializedName: "recipient",
        required: true,
        type: {
          name: "String"
        }
      },
      sender: {
        constraints: {
          Pattern: new RegExp("^ak_\\w{38,50}$")
        },
        serializedName: "sender",
        required: true,
        type: {
          name: "String"
        }
      },
      tokenId: {
        serializedName: "token_id",
        required: true,
        type: {
          name: "Number"
        }
      },
      txHash: {
        constraints: {
          Pattern: new RegExp("^th_\\w{38,50}$")
        },
        serializedName: "tx_hash",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};
export const Paths1Uqqby0V3Aex9GetResponses200ContentApplicationJsonSchemaAllof0 = {
  type: {
    name: "Composite",
    className: "Paths1Uqqby0V3Aex9GetResponses200ContentApplicationJsonSchemaAllof0",
    modelProperties: {
      data: {
        serializedName: "data",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Aex9Response"
            }
          }
        }
      }
    }
  }
};
export const Aex9Response = {
  type: {
    name: "Composite",
    className: "Aex9Response",
    modelProperties: {
      contractId: {
        constraints: {
          Pattern: new RegExp("^ct_\\w{38,50}$")
        },
        serializedName: "contract_id",
        required: true,
        type: {
          name: "String"
        }
      },
      contractTxHash: {
        constraints: {
          Pattern: new RegExp("^th_\\w{38,50}$")
        },
        serializedName: "contract_tx_hash",
        required: true,
        type: {
          name: "String"
        }
      },
      initialSupply: {
        serializedName: "initial_supply",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      eventSupply: {
        serializedName: "event_supply",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      decimals: {
        serializedName: "decimals",
        required: true,
        type: {
          name: "Number"
        }
      },
      extensions: {
        serializedName: "extensions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      holders: {
        serializedName: "holders",
        required: true,
        type: {
          name: "Number"
        }
      },
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      symbol: {
        serializedName: "symbol",
        required: true,
        type: {
          name: "String"
        }
      },
      invalid: {
        serializedName: "invalid",
        required: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};
export const Paths19IxhsmV3Aex9CountGetResponses200ContentApplicationJsonSchema = {
  type: {
    name: "Composite",
    className: "Paths19IxhsmV3Aex9CountGetResponses200ContentApplicationJsonSchema",
    modelProperties: {
      data: {
        serializedName: "data",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const PathsEeiffwV3Aex9ContractidBalancesGetResponses200ContentApplicationJsonSchemaAllof0 = {
  type: {
    name: "Composite",
    className: "PathsEeiffwV3Aex9ContractidBalancesGetResponses200ContentApplicationJsonSchemaAllof0",
    modelProperties: {
      data: {
        serializedName: "data",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Aex9ContractBalanceResponse"
            }
          }
        }
      }
    }
  }
};
export const Aex9ContractBalanceResponse = {
  type: {
    name: "Composite",
    className: "Aex9ContractBalanceResponse",
    modelProperties: {
      accountId: {
        constraints: {
          Pattern: new RegExp("^ak_\\w{38,50}$")
        },
        serializedName: "account_id",
        required: true,
        type: {
          name: "String"
        }
      },
      amount: {
        serializedName: "amount",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      blockHash: {
        serializedName: "block_hash",
        required: true,
        type: {
          name: "Number"
        }
      },
      contractId: {
        serializedName: "contract_id",
        required: true,
        type: {
          name: "Number"
        }
      },
      height: {
        serializedName: "height",
        required: true,
        type: {
          name: "Number"
        }
      },
      lastTxHash: {
        constraints: {
          Pattern: new RegExp("^th_\\w{38,50}$")
        },
        serializedName: "last_tx_hash",
        required: true,
        type: {
          name: "String"
        }
      },
      lastLogIdx: {
        serializedName: "last_log_idx",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const PathsKr825V3Aex9ContractidBalancesAccountidGetResponses200ContentApplicationJsonSchema = {
  type: {
    name: "Composite",
    className: "PathsKr825V3Aex9ContractidBalancesAccountidGetResponses200ContentApplicationJsonSchema",
    modelProperties: {
      account: {
        constraints: {
          Pattern: new RegExp("^ak_\\w{38,50}$")
        },
        serializedName: "account",
        required: true,
        type: {
          name: "String"
        }
      },
      amount: {
        serializedName: "amount",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      contract: {
        constraints: {
          Pattern: new RegExp("^ct_\\w{38,50}$")
        },
        serializedName: "contract",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};
export const Paths108B3VtV3Aex9ContractidBalancesAccountidHistoryGetResponses200ContentApplicationJsonSchemaAllof1 = {
  type: {
    name: "Composite",
    className: "Paths108B3VtV3Aex9ContractidBalancesAccountidHistoryGetResponses200ContentApplicationJsonSchemaAllof1",
    modelProperties: {
      data: {
        serializedName: "data",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Get200ApplicationJsonAllOfPropertiesItemsItem"
            }
          }
        }
      }
    }
  }
};
export const Get200ApplicationJsonAllOfPropertiesItemsItem = {
  type: {
    name: "Composite",
    className: "Get200ApplicationJsonAllOfPropertiesItemsItem",
    modelProperties: {
      account: {
        constraints: {
          Pattern: new RegExp("^ak_\\w{38,50}$")
        },
        serializedName: "account",
        required: true,
        type: {
          name: "String"
        }
      },
      amount: {
        serializedName: "amount",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      contract: {
        constraints: {
          Pattern: new RegExp("^ct_\\w{38,50}$")
        },
        serializedName: "contract",
        required: true,
        type: {
          name: "String"
        }
      },
      height: {
        serializedName: "height",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const PathsQmewnaV3ChannelsGetResponses200ContentApplicationJsonSchemaAllof0 = {
  type: {
    name: "Composite",
    className: "PathsQmewnaV3ChannelsGetResponses200ContentApplicationJsonSchemaAllof0",
    modelProperties: {
      data: {
        serializedName: "data",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Channel"
            }
          }
        }
      }
    }
  }
};
export const Channel = {
  type: {
    name: "Composite",
    className: "Channel",
    modelProperties: {
      active: {
        serializedName: "active",
        required: true,
        type: {
          name: "Boolean"
        }
      },
      amount: {
        serializedName: "amount",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      channel: {
        constraints: {
          Pattern: new RegExp("^ch_\\w{38,50}$")
        },
        serializedName: "channel",
        required: true,
        type: {
          name: "String"
        }
      },
      channelReserve: {
        serializedName: "channel_reserve",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      delegateIds: {
        serializedName: "delegate_ids",
        required: true,
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "any"
            }
          }
        }
      },
      initiator: {
        constraints: {
          Pattern: new RegExp("^ak_\\w{38,50}$")
        },
        serializedName: "initiator",
        required: true,
        type: {
          name: "String"
        }
      },
      initiatorAmount: {
        serializedName: "initiator_amount",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      lastUpdatedHeight: {
        serializedName: "last_updated_height",
        required: true,
        type: {
          name: "Number"
        }
      },
      lastUpdatedTxType: {
        serializedName: "last_updated_tx_type",
        required: true,
        type: {
          name: "String"
        }
      },
      lastUpdatedTime: {
        serializedName: "last_updated_time",
        required: true,
        type: {
          name: "UnixTime"
        }
      },
      lastUpdatedTxHash: {
        constraints: {
          Pattern: new RegExp("^th_\\w{38,50}$")
        },
        serializedName: "last_updated_tx_hash",
        required: true,
        type: {
          name: "String"
        }
      },
      lockPeriod: {
        serializedName: "lock_period",
        required: true,
        type: {
          name: "Number"
        }
      },
      lockedUntil: {
        serializedName: "locked_until",
        required: true,
        type: {
          name: "Number"
        }
      },
      responder: {
        constraints: {
          Pattern: new RegExp("^ak_\\w{38,50}$")
        },
        serializedName: "responder",
        required: true,
        type: {
          name: "String"
        }
      },
      responderAmount: {
        serializedName: "responder_amount",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      round: {
        serializedName: "round",
        required: true,
        type: {
          name: "Number"
        }
      },
      soloRound: {
        serializedName: "solo_round",
        required: true,
        type: {
          name: "Number"
        }
      },
      stateHash: {
        constraints: {
          Pattern: new RegExp("^st_\\w+$")
        },
        serializedName: "state_hash",
        required: true,
        type: {
          name: "String"
        }
      },
      updatesCount: {
        serializedName: "updates_count",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const Paths18L84JcV3ContractsCallsGetResponses200ContentApplicationJsonSchemaAllof0 = {
  type: {
    name: "Composite",
    className: "Paths18L84JcV3ContractsCallsGetResponses200ContentApplicationJsonSchemaAllof0",
    modelProperties: {
      data: {
        serializedName: "data",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ContractCall"
            }
          }
        }
      }
    }
  }
};
export const ContractCall = {
  type: {
    name: "Composite",
    className: "ContractCall",
    modelProperties: {
      blockHash: {
        constraints: {
          Pattern: new RegExp("^mh_\\w{38,50}$")
        },
        serializedName: "block_hash",
        required: true,
        type: {
          name: "String"
        }
      },
      callTxHash: {
        constraints: {
          Pattern: new RegExp("^th_\\w{38,50}$")
        },
        serializedName: "call_tx_hash",
        required: true,
        type: {
          name: "String"
        }
      },
      contractId: {
        constraints: {
          Pattern: new RegExp("^ct_\\w{38,50}$")
        },
        serializedName: "contract_id",
        required: true,
        type: {
          name: "String"
        }
      },
      contractTxHash: {
        constraints: {
          Pattern: new RegExp("^th_\\w{38,50}$")
        },
        serializedName: "contract_tx_hash",
        required: true,
        type: {
          name: "String"
        }
      },
      function: {
        serializedName: "function",
        required: true,
        type: {
          name: "String"
        }
      },
      height: {
        serializedName: "height",
        required: true,
        type: {
          name: "Number"
        }
      },
      internalTx: {
        serializedName: "internal_tx",
        required: true,
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "any"
            }
          }
        }
      },
      localIdx: {
        serializedName: "local_idx",
        required: true,
        type: {
          name: "Number"
        }
      },
      microIndex: {
        serializedName: "micro_index",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const Paths10Kk1UxV3ContractsLogsGetResponses200ContentApplicationJsonSchemaAllof0 = {
  type: {
    name: "Composite",
    className: "Paths10Kk1UxV3ContractsLogsGetResponses200ContentApplicationJsonSchemaAllof0",
    modelProperties: {
      data: {
        serializedName: "data",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ContractLog"
            }
          }
        }
      }
    }
  }
};
export const ContractLog = {
  type: {
    name: "Composite",
    className: "ContractLog",
    modelProperties: {
      args: {
        serializedName: "args",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      blockHash: {
        constraints: {
          Pattern: new RegExp("^mh_\\w{38,50}$")
        },
        serializedName: "block_hash",
        required: true,
        type: {
          name: "String"
        }
      },
      blockTime: {
        serializedName: "block_time",
        required: true,
        type: {
          name: "UnixTime"
        }
      },
      callTxHash: {
        constraints: {
          Pattern: new RegExp("^th_\\w{38,50}$")
        },
        serializedName: "call_tx_hash",
        required: true,
        type: {
          name: "String"
        }
      },
      contractId: {
        constraints: {
          Pattern: new RegExp("^ct_\\w{38,50}$")
        },
        serializedName: "contract_id",
        required: true,
        type: {
          name: "String"
        }
      },
      contractTxHash: {
        constraints: {
          Pattern: new RegExp("^th_\\w{38,50}$")
        },
        serializedName: "contract_tx_hash",
        required: true,
        type: {
          name: "String"
        }
      },
      data: {
        serializedName: "data",
        required: true,
        type: {
          name: "String"
        }
      },
      eventHash: {
        serializedName: "event_hash",
        required: true,
        type: {
          name: "String"
        }
      },
      eventName: {
        serializedName: "event_name",
        required: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      extCallerContractId: {
        constraints: {
          Pattern: new RegExp("^ct_\\w{38,50}$")
        },
        serializedName: "ext_caller_contract_id",
        required: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      extCallerContractTxHash: {
        constraints: {
          Pattern: new RegExp("^th_\\w{38,50}$")
        },
        serializedName: "ext_caller_contract_tx_hash",
        required: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      height: {
        serializedName: "height",
        required: true,
        type: {
          name: "Number"
        }
      },
      logIdx: {
        serializedName: "log_idx",
        required: true,
        type: {
          name: "Number"
        }
      },
      microIndex: {
        serializedName: "micro_index",
        required: true,
        type: {
          name: "Number"
        }
      },
      parentContractId: {
        serializedName: "parent_contract_id",
        required: true,
        nullable: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const Contract = {
  type: {
    name: "Composite",
    className: "Contract",
    modelProperties: {
      aexnType: {
        serializedName: "aexn_type",
        required: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      blockHash: {
        constraints: {
          Pattern: new RegExp("^mh_\\w{38,50}$")
        },
        serializedName: "block_hash",
        required: true,
        type: {
          name: "String"
        }
      },
      contract: {
        constraints: {
          Pattern: new RegExp("^ct_\\w{38,50}$")
        },
        serializedName: "contract",
        required: true,
        type: {
          name: "String"
        }
      },
      sourceTxHash: {
        constraints: {
          Pattern: new RegExp("^th_\\w{38,50}$")
        },
        serializedName: "source_tx_hash",
        required: true,
        type: {
          name: "String"
        }
      },
      sourceTxType: {
        serializedName: "source_tx_type",
        required: true,
        type: {
          name: "String"
        }
      },
      createTx: {
        serializedName: "create_tx",
        type: {
          name: "Composite",
          className: "ContractCreateTx"
        }
      }
    }
  }
};
export const ContractCreateTx = {
  type: {
    name: "Composite",
    className: "ContractCreateTx",
    modelProperties: {
      ownerId: {
        serializedName: "owner_id",
        required: true,
        type: {
          name: "String"
        }
      },
      nonce: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "nonce",
        type: {
          name: "Number"
        }
      },
      code: {
        serializedName: "code",
        required: true,
        type: {
          name: "String"
        }
      },
      vmVersion: {
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 0
        },
        serializedName: "vm_version",
        required: true,
        type: {
          name: "Number"
        }
      },
      abiVersion: {
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 0
        },
        serializedName: "abi_version",
        required: true,
        type: {
          name: "Number"
        }
      },
      deposit: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "deposit",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      amount: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "amount",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      gas: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "gas",
        required: true,
        type: {
          name: "Number"
        }
      },
      gasPrice: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "gas_price",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      fee: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "fee",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      ttl: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "ttl",
        type: {
          name: "Number"
        }
      },
      callData: {
        serializedName: "call_data",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};
export const Paths9Yfxl2V3DexSwapsGetResponses200ContentApplicationJsonSchemaAllof0 = {
  type: {
    name: "Composite",
    className: "Paths9Yfxl2V3DexSwapsGetResponses200ContentApplicationJsonSchemaAllof0",
    modelProperties: {
      data: {
        serializedName: "data",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DexSwap"
            }
          }
        }
      }
    }
  }
};
export const Paths6Vze8ZV3DexContractIdSwapsGetResponses200ContentApplicationJsonSchemaAllof0 = {
  type: {
    name: "Composite",
    className: "Paths6Vze8ZV3DexContractIdSwapsGetResponses200ContentApplicationJsonSchemaAllof0",
    modelProperties: {
      data: {
        serializedName: "data",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DexSwap"
            }
          }
        }
      }
    }
  }
};
export const Paths1F8GzwrV3HyperchainEpochsGetResponses200ContentApplicationJsonSchemaAllof0 = {
  type: {
    name: "Composite",
    className: "Paths1F8GzwrV3HyperchainEpochsGetResponses200ContentApplicationJsonSchemaAllof0",
    modelProperties: {
      data: {
        serializedName: "data",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EpochInfo"
            }
          }
        }
      }
    }
  }
};
export const EpochInfo = {
  type: {
    name: "Composite",
    className: "EpochInfo",
    modelProperties: {
      epoch: {
        serializedName: "epoch",
        required: true,
        type: {
          name: "Number"
        }
      },
      first: {
        serializedName: "first",
        required: true,
        type: {
          name: "Number"
        }
      },
      last: {
        serializedName: "last",
        required: true,
        type: {
          name: "Number"
        }
      },
      length: {
        serializedName: "length",
        required: true,
        type: {
          name: "Number"
        }
      },
      seed: {
        serializedName: "seed",
        required: true,
        type: {
          name: "String"
        }
      },
      lastPinHeight: {
        serializedName: "last_pin_height",
        required: true,
        type: {
          name: "Number"
        }
      },
      parentBlockHash: {
        serializedName: "parent_block_hash",
        required: true,
        type: {
          name: "String"
        }
      },
      lastLeader: {
        serializedName: "last_leader",
        required: true,
        type: {
          name: "String"
        }
      },
      epochStartTime: {
        serializedName: "epoch_start_time",
        required: true,
        type: {
          name: "Number"
        }
      },
      validators: {
        serializedName: "validators",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EpochInfoValidatorsItem"
            }
          }
        }
      }
    }
  }
};
export const EpochInfoValidatorsItem = {
  type: {
    name: "Composite",
    className: "EpochInfoValidatorsItem",
    modelProperties: {
      validator: {
        serializedName: "validator",
        type: {
          name: "String"
        }
      },
      stake: {
        serializedName: "stake",
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const Paths7W5O80V3HyperchainScheduleGetResponses200ContentApplicationJsonSchemaAllof0 = {
  type: {
    name: "Composite",
    className: "Paths7W5O80V3HyperchainScheduleGetResponses200ContentApplicationJsonSchemaAllof0",
    modelProperties: {
      data: {
        serializedName: "data",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Schedule"
            }
          }
        }
      }
    }
  }
};
export const Schedule = {
  type: {
    name: "Composite",
    className: "Schedule",
    modelProperties: {
      height: {
        serializedName: "height",
        required: true,
        type: {
          name: "Number"
        }
      },
      leader: {
        serializedName: "leader",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};
export const Paths1Qg7SclV3HyperchainValidatorsGetResponses200ContentApplicationJsonSchemaAllof0 = {
  type: {
    name: "Composite",
    className: "Paths1Qg7SclV3HyperchainValidatorsGetResponses200ContentApplicationJsonSchemaAllof0",
    modelProperties: {
      data: {
        serializedName: "data",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Validator"
            }
          }
        }
      }
    }
  }
};
export const Validator = {
  type: {
    name: "Composite",
    className: "Validator",
    modelProperties: {
      epoch: {
        serializedName: "epoch",
        required: true,
        type: {
          name: "Number"
        }
      },
      validator: {
        serializedName: "validator",
        required: true,
        type: {
          name: "String"
        }
      },
      totalStakes: {
        serializedName: "total_stakes",
        required: true,
        type: {
          name: "Number"
        }
      },
      delegates: {
        serializedName: "delegates",
        required: true,
        type: {
          name: "Number"
        }
      },
      rewardsEarned: {
        serializedName: "rewards_earned",
        required: true,
        type: {
          name: "Number"
        }
      },
      pinningHistory: {
        serializedName: "pinning_history",
        required: true,
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Number"
            }
          }
        }
      }
    }
  }
};
export const Paths7Ks32NV3HyperchainValidatorsValidatorDelegatesGetResponses200ContentApplicationJsonSchemaAllof0 = {
  type: {
    name: "Composite",
    className: "Paths7Ks32NV3HyperchainValidatorsValidatorDelegatesGetResponses200ContentApplicationJsonSchemaAllof0",
    modelProperties: {
      data: {
        serializedName: "data",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Delegate"
            }
          }
        }
      }
    }
  }
};
export const Delegate = {
  type: {
    name: "Composite",
    className: "Delegate",
    modelProperties: {
      epoch: {
        serializedName: "epoch",
        required: true,
        type: {
          name: "Number"
        }
      },
      delegate: {
        serializedName: "delegate",
        required: true,
        type: {
          name: "String"
        }
      },
      stake: {
        serializedName: "stake",
        required: true,
        type: {
          name: "Number"
        }
      },
      validator: {
        serializedName: "validator",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};
export const PathsDwhnfdV3HyperchainValidatorsValidatorDelegatesTopGetResponses200ContentApplicationJsonSchemaAllof0 = {
  type: {
    name: "Composite",
    className: "PathsDwhnfdV3HyperchainValidatorsValidatorDelegatesTopGetResponses200ContentApplicationJsonSchemaAllof0",
    modelProperties: {
      data: {
        serializedName: "data",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Delegate"
            }
          }
        }
      }
    }
  }
};
export const PathsEue6HzV3KeyBlocksGetResponses200ContentApplicationJsonSchemaAllof0 = {
  type: {
    name: "Composite",
    className: "PathsEue6HzV3KeyBlocksGetResponses200ContentApplicationJsonSchemaAllof0",
    modelProperties: {
      data: {
        serializedName: "data",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "KeyBlockExtended"
            }
          }
        }
      }
    }
  }
};
export const KeyBlock = {
  type: {
    name: "Composite",
    className: "KeyBlock",
    modelProperties: {
      hash: {
        serializedName: "hash",
        required: true,
        type: {
          name: "String"
        }
      },
      height: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "height",
        required: true,
        type: {
          name: "Number"
        }
      },
      prevHash: {
        serializedName: "prev_hash",
        required: true,
        type: {
          name: "String"
        }
      },
      prevKeyHash: {
        serializedName: "prev_key_hash",
        required: true,
        type: {
          name: "String"
        }
      },
      stateHash: {
        serializedName: "state_hash",
        required: true,
        type: {
          name: "String"
        }
      },
      miner: {
        serializedName: "miner",
        required: true,
        type: {
          name: "String"
        }
      },
      beneficiary: {
        serializedName: "beneficiary",
        required: true,
        type: {
          name: "String"
        }
      },
      target: {
        constraints: {
          InclusiveMaximum: 4294967295,
          InclusiveMinimum: 0
        },
        serializedName: "target",
        required: true,
        type: {
          name: "Number"
        }
      },
      pow: {
        constraints: {
          MinItems: 42,
          MaxItems: 42
        },
        serializedName: "pow",
        type: {
          name: "Sequence",
          element: {
            constraints: {
              InclusiveMaximum: 4294967295,
              InclusiveMinimum: 0
            },
            type: {
              name: "Number"
            }
          }
        }
      },
      nonce: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "nonce",
        type: {
          name: "Number"
        }
      },
      time: {
        serializedName: "time",
        required: true,
        type: {
          name: "UnixTime"
        }
      },
      version: {
        constraints: {
          InclusiveMaximum: 4294967295,
          InclusiveMinimum: 0
        },
        serializedName: "version",
        required: true,
        type: {
          name: "Number"
        }
      },
      info: {
        serializedName: "info",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};
export const PathsNn60D7V3KeyBlocksHashOrKbiMicroBlocksGetResponses200ContentApplicationJsonSchemaAllof0 = {
  type: {
    name: "Composite",
    className: "PathsNn60D7V3KeyBlocksHashOrKbiMicroBlocksGetResponses200ContentApplicationJsonSchemaAllof0",
    modelProperties: {
      data: {
        serializedName: "data",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MicroBlockExtended"
            }
          }
        }
      }
    }
  }
};
export const MicroBlockHeader = {
  type: {
    name: "Composite",
    className: "MicroBlockHeader",
    modelProperties: {
      hash: {
        serializedName: "hash",
        required: true,
        type: {
          name: "String"
        }
      },
      height: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "height",
        required: true,
        type: {
          name: "Number"
        }
      },
      pofHash: {
        serializedName: "pof_hash",
        required: true,
        type: {
          name: "String"
        }
      },
      prevHash: {
        serializedName: "prev_hash",
        required: true,
        type: {
          name: "String"
        }
      },
      prevKeyHash: {
        serializedName: "prev_key_hash",
        required: true,
        type: {
          name: "String"
        }
      },
      stateHash: {
        serializedName: "state_hash",
        required: true,
        type: {
          name: "String"
        }
      },
      txsHash: {
        serializedName: "txs_hash",
        required: true,
        type: {
          name: "String"
        }
      },
      signature: {
        serializedName: "signature",
        required: true,
        type: {
          name: "String"
        }
      },
      time: {
        serializedName: "time",
        required: true,
        type: {
          name: "UnixTime"
        }
      },
      version: {
        constraints: {
          InclusiveMaximum: 4294967295,
          InclusiveMinimum: 0
        },
        serializedName: "version",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const PathsXhlqwrV3MicroBlocksHashTransactionsGetResponses200ContentApplicationJsonSchemaAllof0 = {
  type: {
    name: "Composite",
    className: "PathsXhlqwrV3MicroBlocksHashTransactionsGetResponses200ContentApplicationJsonSchemaAllof0",
    modelProperties: {
      data: {
        serializedName: "data",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Transaction"
            }
          }
        }
      }
    }
  }
};
export const Transaction = {
  type: {
    name: "Composite",
    className: "Transaction",
    modelProperties: {
      blockHash: {
        constraints: {
          Pattern: new RegExp("^mh_\\w{38,50}$")
        },
        serializedName: "block_hash",
        required: true,
        type: {
          name: "String"
        }
      },
      blockHeight: {
        serializedName: "block_height",
        required: true,
        type: {
          name: "Number"
        }
      },
      encodedTx: {
        constraints: {
          Pattern: new RegExp("^tx_\\w+$")
        },
        serializedName: "encoded_tx",
        required: true,
        type: {
          name: "String"
        }
      },
      hash: {
        constraints: {
          Pattern: new RegExp("^th_\\w{38,50}$")
        },
        serializedName: "hash",
        required: true,
        type: {
          name: "String"
        }
      },
      microIndex: {
        serializedName: "micro_index",
        required: true,
        type: {
          name: "Number"
        }
      },
      microTime: {
        serializedName: "micro_time",
        required: true,
        type: {
          name: "UnixTime"
        }
      },
      signatures: {
        serializedName: "signatures",
        required: true,
        type: {
          name: "Sequence",
          element: {
            constraints: {
              Pattern: new RegExp("^sg_\\w+$")
            },
            type: {
              name: "String"
            }
          }
        }
      },
      tx: {
        serializedName: "tx",
        type: {
          name: "Composite",
          className: "Tx"
        }
      }
    }
  }
};
export const Paths181Cs9V3NamesGetResponses200ContentApplicationJsonSchemaAllof0 = {
  type: {
    name: "Composite",
    className: "Paths181Cs9V3NamesGetResponses200ContentApplicationJsonSchemaAllof0",
    modelProperties: {
      data: {
        serializedName: "data",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Name"
            }
          }
        }
      }
    }
  }
};
export const Name = {
  type: {
    name: "Composite",
    className: "Name",
    modelProperties: {
      active: {
        serializedName: "active",
        required: true,
        type: {
          name: "Boolean"
        }
      },
      hash: {
        constraints: {
          Pattern: new RegExp("^nm_\\w{38,50}$")
        },
        serializedName: "hash",
        required: true,
        type: {
          name: "String"
        }
      },
      activeFrom: {
        serializedName: "active_from",
        required: true,
        type: {
          name: "Number"
        }
      },
      approximateActivationTime: {
        serializedName: "approximate_activation_time",
        required: true,
        type: {
          name: "UnixTime"
        }
      },
      approximateExpireTime: {
        serializedName: "approximate_expire_time",
        required: true,
        type: {
          name: "UnixTime"
        }
      },
      expireHeight: {
        serializedName: "expire_height",
        required: true,
        type: {
          name: "Number"
        }
      },
      pointers: {
        serializedName: "pointers",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NamePointer"
            }
          }
        }
      },
      auction: {
        serializedName: "auction",
        type: {
          name: "Composite",
          className: "Auction"
        }
      },
      auctionTimeout: {
        serializedName: "auction_timeout",
        required: true,
        type: {
          name: "Number"
        }
      },
      ownership: {
        serializedName: "ownership",
        type: {
          name: "Composite",
          className: "NameOwnership"
        }
      },
      name: {
        constraints: {
          Pattern: new RegExp("^\\w+\\.chain$")
        },
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      nameFee: {
        serializedName: "name_fee",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      revoke: {
        serializedName: "revoke",
        type: {
          name: "Composite",
          className: "NameTx"
        }
      },
      claimsCount: {
        serializedName: "claims_count",
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const Auction = {
  type: {
    name: "Composite",
    className: "Auction",
    modelProperties: {
      auctionEnd: {
        serializedName: "auction_end",
        required: true,
        type: {
          name: "Number"
        }
      },
      activationTime: {
        serializedName: "activation_time",
        required: true,
        type: {
          name: "UnixTime"
        }
      },
      approximateExpireTime: {
        serializedName: "approximate_expire_time",
        required: true,
        type: {
          name: "UnixTime"
        }
      },
      lastBid: {
        serializedName: "last_bid",
        type: {
          name: "Composite",
          className: "AuctionLastBid"
        }
      },
      name: {
        constraints: {
          Pattern: new RegExp("^\\w+\\.chain$")
        },
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      nameFee: {
        serializedName: "name_fee",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      claimsCount: {
        serializedName: "claims_count",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const AuctionLastBid = {
  type: {
    name: "Composite",
    className: "AuctionLastBid",
    modelProperties: {
      blockHash: {
        constraints: {
          Pattern: new RegExp("^mh_\\w{38,50}$")
        },
        serializedName: "block_hash",
        required: true,
        type: {
          name: "String"
        }
      },
      blockHeight: {
        serializedName: "block_height",
        required: true,
        type: {
          name: "Number"
        }
      },
      encodedTx: {
        constraints: {
          Pattern: new RegExp("^tx_\\w+$")
        },
        serializedName: "encoded_tx",
        required: true,
        type: {
          name: "String"
        }
      },
      hash: {
        constraints: {
          Pattern: new RegExp("^th_\\w{38,50}$")
        },
        serializedName: "hash",
        required: true,
        type: {
          name: "String"
        }
      },
      microIndex: {
        serializedName: "micro_index",
        required: true,
        type: {
          name: "Number"
        }
      },
      microTime: {
        serializedName: "micro_time",
        required: true,
        type: {
          name: "UnixTime"
        }
      },
      signatures: {
        serializedName: "signatures",
        required: true,
        type: {
          name: "Sequence",
          element: {
            constraints: {
              Pattern: new RegExp("^sg_\\w+$")
            },
            type: {
              name: "String"
            }
          }
        }
      },
      tx: {
        serializedName: "tx",
        type: {
          name: "Composite",
          className: "AuctionLastBidTx"
        }
      }
    }
  }
};
export const Components17W16A5SchemasAuctionPropertiesLastBidPropertiesTxAllof1 = {
  type: {
    name: "Composite",
    className: "Components17W16A5SchemasAuctionPropertiesLastBidPropertiesTxAllof1",
    modelProperties: {
      nameId: {
        constraints: {
          Pattern: new RegExp("^nm_\\w{38,50}$")
        },
        serializedName: "name_id",
        required: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "version",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const NameOwnership = {
  type: {
    name: "Composite",
    className: "NameOwnership",
    modelProperties: {
      current: {
        constraints: {
          Pattern: new RegExp("^ak_\\w{38,50}$")
        },
        serializedName: "current",
        type: {
          name: "String"
        }
      },
      original: {
        constraints: {
          Pattern: new RegExp("^ak_\\w{38,50}$")
        },
        serializedName: "original",
        type: {
          name: "String"
        }
      }
    }
  }
};
export const NameTx = {
  type: {
    name: "Composite",
    className: "NameTx",
    modelProperties: {
      blockHash: {
        constraints: {
          Pattern: new RegExp("^mh_\\w{38,50}$")
        },
        serializedName: "block_hash",
        required: true,
        type: {
          name: "String"
        }
      },
      blockHeight: {
        serializedName: "block_height",
        required: true,
        type: {
          name: "Number"
        }
      },
      hash: {
        constraints: {
          Pattern: new RegExp("^th_\\w{38,50}$")
        },
        serializedName: "hash",
        required: true,
        type: {
          name: "String"
        }
      },
      microIndex: {
        serializedName: "micro_index",
        required: true,
        type: {
          name: "Number"
        }
      },
      microTime: {
        serializedName: "micro_time",
        required: true,
        type: {
          name: "UnixTime"
        }
      },
      signatures: {
        serializedName: "signatures",
        required: true,
        type: {
          name: "Sequence",
          element: {
            constraints: {
              Pattern: new RegExp("^sg_\\w+$")
            },
            type: {
              name: "String"
            }
          }
        }
      },
      tx: {
        serializedName: "tx",
        type: {
          name: "Composite",
          className: "NameTxTx"
        }
      }
    }
  }
};
export const NameRevokeTx = {
  type: {
    name: "Composite",
    className: "NameRevokeTx",
    modelProperties: {
      nameId: {
        serializedName: "name_id",
        required: true,
        type: {
          name: "String"
        }
      },
      fee: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "fee",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      ttl: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "ttl",
        type: {
          name: "Number"
        }
      },
      accountId: {
        serializedName: "account_id",
        required: true,
        type: {
          name: "String"
        }
      },
      nonce: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "nonce",
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const Components171VsjiSchemasNametxPropertiesTxAllof1 = {
  type: {
    name: "Composite",
    className: "Components171VsjiSchemasNametxPropertiesTxAllof1",
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "version",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const Paths1R08F8HV3NamesAuctionsGetResponses200ContentApplicationJsonSchemaAllof0 = {
  type: {
    name: "Composite",
    className: "Paths1R08F8HV3NamesAuctionsGetResponses200ContentApplicationJsonSchemaAllof0",
    modelProperties: {
      data: {
        serializedName: "data",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Auction"
            }
          }
        }
      }
    }
  }
};
export const PathsCrb9BgV3NamesAuctionsIdClaimsGetResponses200ContentApplicationJsonSchema = {
  type: {
    name: "Composite",
    className: "PathsCrb9BgV3NamesAuctionsIdClaimsGetResponses200ContentApplicationJsonSchema",
    modelProperties: {
      data: {
        serializedName: "data",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NameClaim"
            }
          }
        }
      }
    }
  }
};
export const PathsMyl4W2V3NamesIdClaimsGetResponses200ContentApplicationJsonSchemaAllof0 = {
  type: {
    name: "Composite",
    className: "PathsMyl4W2V3NamesIdClaimsGetResponses200ContentApplicationJsonSchemaAllof0",
    modelProperties: {
      data: {
        serializedName: "data",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NameClaim"
            }
          }
        }
      }
    }
  }
};
export const Paths1Ukwk06V3NamesIdTransfersGetResponses200ContentApplicationJsonSchemaAllof0 = {
  type: {
    name: "Composite",
    className: "Paths1Ukwk06V3NamesIdTransfersGetResponses200ContentApplicationJsonSchemaAllof0",
    modelProperties: {
      data: {
        serializedName: "data",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NameTransfer"
            }
          }
        }
      }
    }
  }
};
export const NameTransfer = {
  type: {
    name: "Composite",
    className: "NameTransfer",
    modelProperties: {
      activeFrom: {
        serializedName: "active_from",
        required: true,
        type: {
          name: "Number"
        }
      },
      blockHash: {
        constraints: {
          Pattern: new RegExp("^mh_\\w{38,50}$")
        },
        serializedName: "block_hash",
        required: true,
        type: {
          name: "String"
        }
      },
      height: {
        serializedName: "height",
        required: true,
        type: {
          name: "Number"
        }
      },
      sourceTxHash: {
        constraints: {
          Pattern: new RegExp("^th_\\w{38,50}$")
        },
        serializedName: "source_tx_hash",
        required: true,
        type: {
          name: "String"
        }
      },
      sourceTxType: {
        serializedName: "source_tx_type",
        required: true,
        type: {
          name: "String"
        }
      },
      tx: {
        serializedName: "tx",
        type: {
          name: "Composite",
          className: "NameTransferTx"
        }
      },
      internalSource: {
        serializedName: "internal_source",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};
export const NameTransferTx = {
  type: {
    name: "Composite",
    className: "NameTransferTx",
    modelProperties: {
      nameId: {
        serializedName: "name_id",
        required: true,
        type: {
          name: "String"
        }
      },
      recipientId: {
        serializedName: "recipient_id",
        required: true,
        type: {
          name: "String"
        }
      },
      fee: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "fee",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      ttl: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "ttl",
        type: {
          name: "Number"
        }
      },
      accountId: {
        serializedName: "account_id",
        required: true,
        type: {
          name: "String"
        }
      },
      nonce: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "nonce",
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const PathsRcnvllV3NamesIdUpdatesGetResponses200ContentApplicationJsonSchemaAllof0 = {
  type: {
    name: "Composite",
    className: "PathsRcnvllV3NamesIdUpdatesGetResponses200ContentApplicationJsonSchemaAllof0",
    modelProperties: {
      data: {
        serializedName: "data",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NameUpdate"
            }
          }
        }
      }
    }
  }
};
export const NameUpdate = {
  type: {
    name: "Composite",
    className: "NameUpdate",
    modelProperties: {
      activeFrom: {
        serializedName: "active_from",
        required: true,
        type: {
          name: "Number"
        }
      },
      blockHash: {
        constraints: {
          Pattern: new RegExp("^mh_\\w{38,50}$")
        },
        serializedName: "block_hash",
        required: true,
        type: {
          name: "String"
        }
      },
      height: {
        serializedName: "height",
        required: true,
        type: {
          name: "Number"
        }
      },
      sourceTxHash: {
        constraints: {
          Pattern: new RegExp("^th_\\w{38,50}$")
        },
        serializedName: "source_tx_hash",
        required: true,
        type: {
          name: "String"
        }
      },
      sourceTxType: {
        serializedName: "source_tx_type",
        required: true,
        type: {
          name: "String"
        }
      },
      tx: {
        serializedName: "tx",
        type: {
          name: "Composite",
          className: "NameUpdateTx"
        }
      },
      internalSource: {
        serializedName: "internal_source",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};
export const PathsGcr9MrV3OraclesGetResponses200ContentApplicationJsonSchemaAllof0 = {
  type: {
    name: "Composite",
    className: "PathsGcr9MrV3OraclesGetResponses200ContentApplicationJsonSchemaAllof0",
    modelProperties: {
      data: {
        serializedName: "data",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Oracle"
            }
          }
        }
      }
    }
  }
};
export const Oracle = {
  type: {
    name: "Composite",
    className: "Oracle",
    modelProperties: {
      active: {
        serializedName: "active",
        required: true,
        type: {
          name: "Boolean"
        }
      },
      activeFrom: {
        serializedName: "active_from",
        required: true,
        type: {
          name: "Number"
        }
      },
      approximateExpireTime: {
        serializedName: "approximate_expire_time",
        required: true,
        type: {
          name: "UnixTime"
        }
      },
      expireHeight: {
        serializedName: "expire_height",
        required: true,
        type: {
          name: "Number"
        }
      },
      registerTime: {
        serializedName: "register_time",
        required: true,
        type: {
          name: "UnixTime"
        }
      },
      registerTxHash: {
        constraints: {
          Pattern: new RegExp("^th_\\w{38,50}$")
        },
        serializedName: "register_tx_hash",
        required: true,
        type: {
          name: "String"
        }
      },
      format: {
        serializedName: "format",
        type: {
          name: "Composite",
          className: "OracleFormat"
        }
      },
      oracle: {
        constraints: {
          Pattern: new RegExp("^ok_\\w{38,50}$")
        },
        serializedName: "oracle",
        required: true,
        type: {
          name: "String"
        }
      },
      queryFee: {
        serializedName: "query_fee",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      register: {
        serializedName: "register",
        type: {
          name: "Composite",
          className: "OracleTx"
        }
      }
    }
  }
};
export const OracleFormat = {
  type: {
    name: "Composite",
    className: "OracleFormat",
    modelProperties: {
      query: {
        serializedName: "query",
        required: true,
        type: {
          name: "String"
        }
      },
      response: {
        serializedName: "response",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};
export const OracleTx = {
  type: {
    name: "Composite",
    className: "OracleTx",
    modelProperties: {
      blockHash: {
        constraints: {
          Pattern: new RegExp("^mh_\\w{38,50}$")
        },
        serializedName: "block_hash",
        required: true,
        type: {
          name: "String"
        }
      },
      blockHeight: {
        serializedName: "block_height",
        required: true,
        type: {
          name: "Number"
        }
      },
      hash: {
        constraints: {
          Pattern: new RegExp("^th_\\w{38,50}$")
        },
        serializedName: "hash",
        required: true,
        type: {
          name: "String"
        }
      },
      microIndex: {
        serializedName: "micro_index",
        required: true,
        type: {
          name: "Number"
        }
      },
      microTime: {
        serializedName: "micro_time",
        required: true,
        type: {
          name: "UnixTime"
        }
      },
      signatures: {
        serializedName: "signatures",
        required: true,
        type: {
          name: "Sequence",
          element: {
            constraints: {
              Pattern: new RegExp("^sg_\\w+$")
            },
            type: {
              name: "String"
            }
          }
        }
      },
      encodedTx: {
        constraints: {
          Pattern: new RegExp("^tx_\\w+$")
        },
        serializedName: "encoded_tx",
        required: true,
        type: {
          name: "String"
        }
      },
      tx: {
        serializedName: "tx",
        type: {
          name: "Composite",
          className: "OracleTxTx"
        }
      }
    }
  }
};
export const OracleRegisterTx = {
  type: {
    name: "Composite",
    className: "OracleRegisterTx",
    modelProperties: {
      queryFormat: {
        serializedName: "query_format",
        required: true,
        type: {
          name: "String"
        }
      },
      responseFormat: {
        serializedName: "response_format",
        required: true,
        type: {
          name: "String"
        }
      },
      queryFee: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "query_fee",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      oracleTtl: {
        serializedName: "oracle_ttl",
        type: {
          name: "Composite",
          className: "Ttl"
        }
      },
      accountId: {
        serializedName: "account_id",
        required: true,
        type: {
          name: "String"
        }
      },
      nonce: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "nonce",
        type: {
          name: "Number"
        }
      },
      fee: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "fee",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      ttl: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "ttl",
        type: {
          name: "Number"
        }
      },
      abiVersion: {
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 0
        },
        serializedName: "abi_version",
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const Components1Viuqa3SchemasOracletxPropertiesTxAllof1 = {
  type: {
    name: "Composite",
    className: "Components1Viuqa3SchemasOracletxPropertiesTxAllof1",
    modelProperties: {
      oracleId: {
        constraints: {
          Pattern: new RegExp("^ok_\\w{38,50}$")
        },
        serializedName: "oracle_id",
        required: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "version",
        required: true,
        type: {
          name: "Number"
        }
      },
      txHash: {
        constraints: {
          Pattern: new RegExp("^th_\\w{38,50}$")
        },
        serializedName: "tx_hash",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};
export const PathsZ4L2QlV3OraclesIdExtendsGetResponses200ContentApplicationJsonSchemaAllof0 = {
  type: {
    name: "Composite",
    className: "PathsZ4L2QlV3OraclesIdExtendsGetResponses200ContentApplicationJsonSchemaAllof0",
    modelProperties: {
      data: {
        serializedName: "data",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OracleExtend"
            }
          }
        }
      }
    }
  }
};
export const OracleExtend = {
  type: {
    name: "Composite",
    className: "OracleExtend",
    modelProperties: {
      blockHash: {
        constraints: {
          Pattern: new RegExp("^mh_\\w{38,50}$")
        },
        serializedName: "block_hash",
        required: true,
        type: {
          name: "String"
        }
      },
      height: {
        serializedName: "height",
        required: true,
        type: {
          name: "Number"
        }
      },
      sourceTxHash: {
        constraints: {
          Pattern: new RegExp("^th_\\w{38,50}$")
        },
        serializedName: "source_tx_hash",
        required: true,
        type: {
          name: "String"
        }
      },
      sourceTxType: {
        serializedName: "source_tx_type",
        required: true,
        type: {
          name: "String"
        }
      },
      tx: {
        serializedName: "tx",
        type: {
          name: "Composite",
          className: "OracleExtendTx"
        }
      }
    }
  }
};
export const OracleExtendTx = {
  type: {
    name: "Composite",
    className: "OracleExtendTx",
    modelProperties: {
      fee: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "fee",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      oracleTtl: {
        serializedName: "oracle_ttl",
        type: {
          name: "Composite",
          className: "RelativeTTL"
        }
      },
      oracleId: {
        serializedName: "oracle_id",
        required: true,
        type: {
          name: "String"
        }
      },
      nonce: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "nonce",
        type: {
          name: "Number"
        }
      },
      ttl: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "ttl",
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const Paths1Uni7AtV3OraclesIdQueriesGetResponses200ContentApplicationJsonSchemaAllof0 = {
  type: {
    name: "Composite",
    className: "Paths1Uni7AtV3OraclesIdQueriesGetResponses200ContentApplicationJsonSchemaAllof0",
    modelProperties: {
      data: {
        serializedName: "data",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OracleQuery"
            }
          }
        }
      }
    }
  }
};
export const OracleQuery = {
  type: {
    name: "Composite",
    className: "OracleQuery",
    modelProperties: {
      blockHash: {
        constraints: {
          Pattern: new RegExp("^mh_\\w{38,50}$")
        },
        serializedName: "block_hash",
        required: true,
        type: {
          name: "String"
        }
      },
      blockTime: {
        serializedName: "block_time",
        required: true,
        type: {
          name: "UnixTime"
        }
      },
      height: {
        serializedName: "height",
        required: true,
        type: {
          name: "Number"
        }
      },
      queryId: {
        constraints: {
          Pattern: new RegExp("^oq_\\w{38,50}$")
        },
        serializedName: "query_id",
        required: true,
        type: {
          name: "String"
        }
      },
      response: {
        serializedName: "response",
        type: {
          name: "Composite",
          className: "OracleResponse"
        }
      },
      sourceTxHash: {
        constraints: {
          Pattern: new RegExp("^th_\\w{38,50}$")
        },
        serializedName: "source_tx_hash",
        required: true,
        type: {
          name: "String"
        }
      },
      sourceTxType: {
        serializedName: "source_tx_type",
        required: true,
        type: {
          name: "String"
        }
      },
      fee: {
        serializedName: "fee",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      nonce: {
        serializedName: "nonce",
        required: true,
        type: {
          name: "Number"
        }
      },
      oracleId: {
        constraints: {
          Pattern: new RegExp("^ok_\\w{38,50}$")
        },
        serializedName: "oracle_id",
        required: true,
        type: {
          name: "String"
        }
      },
      query: {
        serializedName: "query",
        required: true,
        type: {
          name: "String"
        }
      },
      queryFee: {
        serializedName: "query_fee",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      queryTtl: {
        serializedName: "query_ttl",
        required: true,
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "any"
            }
          }
        }
      },
      responseTtl: {
        serializedName: "response_ttl",
        required: true,
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "any"
            }
          }
        }
      },
      senderId: {
        constraints: {
          Pattern: new RegExp("^ak_\\w{38,50}$")
        },
        serializedName: "sender_id",
        required: true,
        type: {
          name: "String"
        }
      },
      ttl: {
        serializedName: "ttl",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const OracleResponse = {
  type: {
    name: "Composite",
    className: "OracleResponse",
    modelProperties: {
      blockHash: {
        constraints: {
          Pattern: new RegExp("^mh_\\w{38,50}$")
        },
        serializedName: "block_hash",
        required: true,
        type: {
          name: "String"
        }
      },
      blockTime: {
        serializedName: "block_time",
        required: true,
        type: {
          name: "UnixTime"
        }
      },
      height: {
        serializedName: "height",
        required: true,
        type: {
          name: "Number"
        }
      },
      queryId: {
        constraints: {
          Pattern: new RegExp("^oq_\\w{38,50}$")
        },
        serializedName: "query_id",
        required: true,
        type: {
          name: "String"
        }
      },
      query: {
        serializedName: "query",
        type: {
          name: "Composite",
          className: "OracleQuery"
        }
      },
      sourceTxHash: {
        constraints: {
          Pattern: new RegExp("^th_\\w{38,50}$")
        },
        serializedName: "source_tx_hash",
        required: true,
        type: {
          name: "String"
        }
      },
      sourceTxType: {
        serializedName: "source_tx_type",
        required: true,
        type: {
          name: "String"
        }
      },
      fee: {
        serializedName: "fee",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      nonce: {
        serializedName: "nonce",
        required: true,
        type: {
          name: "Number"
        }
      },
      oracleId: {
        constraints: {
          Pattern: new RegExp("^ok_\\w{38,50}$")
        },
        serializedName: "oracle_id",
        required: true,
        type: {
          name: "String"
        }
      },
      response: {
        serializedName: "response",
        required: true,
        type: {
          name: "String"
        }
      },
      responseTtl: {
        serializedName: "response_ttl",
        required: true,
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "any"
            }
          }
        }
      },
      ttl: {
        serializedName: "ttl",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const Paths1Tcj5A9V3OraclesIdResponsesGetResponses200ContentApplicationJsonSchemaAllof0 = {
  type: {
    name: "Composite",
    className: "Paths1Tcj5A9V3OraclesIdResponsesGetResponses200ContentApplicationJsonSchemaAllof0",
    modelProperties: {
      data: {
        serializedName: "data",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OracleResponse"
            }
          }
        }
      }
    }
  }
};
export const Stats = {
  type: {
    name: "Composite",
    className: "Stats",
    modelProperties: {
      minersCount: {
        serializedName: "miners_count",
        type: {
          name: "Number"
        }
      },
      feesTrend: {
        serializedName: "fees_trend",
        type: {
          name: "Number"
        }
      },
      last24HsAverageTransactionFees: {
        serializedName: "last_24hs_average_transaction_fees",
        type: {
          name: "Number"
        }
      },
      last24HsTransactions: {
        serializedName: "last_24hs_transactions",
        type: {
          name: "Number"
        }
      },
      maxTransactionsPerSecond: {
        serializedName: "max_transactions_per_second",
        type: {
          name: "Number"
        }
      },
      maxTransactionsPerSecondBlockHash: {
        constraints: {
          Pattern: new RegExp("^kh_\\w{38,50}$")
        },
        serializedName: "max_transactions_per_second_block_hash",
        type: {
          name: "String"
        }
      },
      transactionsTrend: {
        serializedName: "transactions_trend",
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const PathsFso5IiV3StatsActiveAccountsGetResponses200ContentApplicationJsonSchemaAllof0 = {
  type: {
    name: "Composite",
    className: "PathsFso5IiV3StatsActiveAccountsGetResponses200ContentApplicationJsonSchemaAllof0",
    modelProperties: {
      data: {
        serializedName: "data",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Stat"
            }
          }
        }
      }
    }
  }
};
export const Stat = {
  type: {
    name: "Composite",
    className: "Stat",
    modelProperties: {
      count: {
        serializedName: "count",
        required: true,
        type: {
          name: "Number"
        }
      },
      startDate: {
        serializedName: "start_date",
        required: true,
        type: {
          name: "String"
        }
      },
      endDate: {
        serializedName: "end_date",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};
export const Paths1Fl1Lh2V3StatsAex9TransfersGetResponses200ContentApplicationJsonSchemaAllof0 = {
  type: {
    name: "Composite",
    className: "Paths1Fl1Lh2V3StatsAex9TransfersGetResponses200ContentApplicationJsonSchemaAllof0",
    modelProperties: {
      data: {
        serializedName: "data",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Stat"
            }
          }
        }
      }
    }
  }
};
export const Paths1A27TirV3StatsBlocksGetResponses200ContentApplicationJsonSchemaAllof0 = {
  type: {
    name: "Composite",
    className: "Paths1A27TirV3StatsBlocksGetResponses200ContentApplicationJsonSchemaAllof0",
    modelProperties: {
      data: {
        serializedName: "data",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Stat"
            }
          }
        }
      }
    }
  }
};
export const Paths72Dp44V3StatsContractsGetResponses200ContentApplicationJsonSchemaAllof0 = {
  type: {
    name: "Composite",
    className: "Paths72Dp44V3StatsContractsGetResponses200ContentApplicationJsonSchemaAllof0",
    modelProperties: {
      data: {
        serializedName: "data",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Stat"
            }
          }
        }
      }
    }
  }
};
export const Paths1J83O75V3StatsDeltaGetResponses200ContentApplicationJsonSchemaAllof0 = {
  type: {
    name: "Composite",
    className: "Paths1J83O75V3StatsDeltaGetResponses200ContentApplicationJsonSchemaAllof0",
    modelProperties: {
      data: {
        serializedName: "data",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DeltaStat"
            }
          }
        }
      }
    }
  }
};
export const DeltaStat = {
  type: {
    name: "Composite",
    className: "DeltaStat",
    modelProperties: {
      height: {
        serializedName: "height",
        required: true,
        type: {
          name: "Number"
        }
      },
      auctionsStarted: {
        serializedName: "auctions_started",
        required: true,
        type: {
          name: "Number"
        }
      },
      blockReward: {
        serializedName: "block_reward",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      burnedInAuctions: {
        serializedName: "burned_in_auctions",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      channelsClosed: {
        serializedName: "channels_closed",
        required: true,
        type: {
          name: "Number"
        }
      },
      channelsOpened: {
        serializedName: "channels_opened",
        required: true,
        type: {
          name: "Number"
        }
      },
      contractsCreated: {
        serializedName: "contracts_created",
        required: true,
        type: {
          name: "Number"
        }
      },
      devReward: {
        serializedName: "dev_reward",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      namesActivated: {
        serializedName: "names_activated",
        required: true,
        type: {
          name: "Number"
        }
      },
      namesExpired: {
        serializedName: "names_expired",
        required: true,
        type: {
          name: "Number"
        }
      },
      namesRevoked: {
        serializedName: "names_revoked",
        required: true,
        type: {
          name: "Number"
        }
      },
      oraclesExpired: {
        serializedName: "oracles_expired",
        required: true,
        type: {
          name: "Number"
        }
      },
      oraclesRegistered: {
        serializedName: "oracles_registered",
        required: true,
        type: {
          name: "Number"
        }
      },
      lastTxHash: {
        constraints: {
          Pattern: new RegExp("^th_\\w{38,50}$")
        },
        serializedName: "last_tx_hash",
        required: true,
        type: {
          name: "String"
        }
      },
      lockedInAuctions: {
        serializedName: "locked_in_auctions",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      lockedInChannels: {
        serializedName: "locked_in_channels",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      }
    }
  }
};
export const Paths1Qw6KhfV3StatsDifficultyGetResponses200ContentApplicationJsonSchemaAllof0 = {
  type: {
    name: "Composite",
    className: "Paths1Qw6KhfV3StatsDifficultyGetResponses200ContentApplicationJsonSchemaAllof0",
    modelProperties: {
      data: {
        serializedName: "data",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Stat"
            }
          }
        }
      }
    }
  }
};
export const Paths1IskjkV3StatsHashrateGetResponses200ContentApplicationJsonSchemaAllof0 = {
  type: {
    name: "Composite",
    className: "Paths1IskjkV3StatsHashrateGetResponses200ContentApplicationJsonSchemaAllof0",
    modelProperties: {
      data: {
        serializedName: "data",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Stat"
            }
          }
        }
      }
    }
  }
};
export const Paths50Qhc7V3StatsMinersGetResponses200ContentApplicationJsonSchemaAllof0 = {
  type: {
    name: "Composite",
    className: "Paths50Qhc7V3StatsMinersGetResponses200ContentApplicationJsonSchemaAllof0",
    modelProperties: {
      data: {
        serializedName: "data",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Miner"
            }
          }
        }
      }
    }
  }
};
export const Miner = {
  type: {
    name: "Composite",
    className: "Miner",
    modelProperties: {
      miner: {
        constraints: {
          Pattern: new RegExp("^ak_\\w{38,50}$")
        },
        serializedName: "miner",
        required: true,
        type: {
          name: "String"
        }
      },
      totalReward: {
        serializedName: "total_reward",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      }
    }
  }
};
export const PathsD92Xl6V3StatsNamesGetResponses200ContentApplicationJsonSchemaAllof0 = {
  type: {
    name: "Composite",
    className: "PathsD92Xl6V3StatsNamesGetResponses200ContentApplicationJsonSchemaAllof0",
    modelProperties: {
      data: {
        serializedName: "data",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Stat"
            }
          }
        }
      }
    }
  }
};
export const Paths1K55ZdgV3StatsTotalGetResponses200ContentApplicationJsonSchemaAllof0 = {
  type: {
    name: "Composite",
    className: "Paths1K55ZdgV3StatsTotalGetResponses200ContentApplicationJsonSchemaAllof0",
    modelProperties: {
      data: {
        serializedName: "data",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TotalStat"
            }
          }
        }
      }
    }
  }
};
export const TotalStat = {
  type: {
    name: "Composite",
    className: "TotalStat",
    modelProperties: {
      height: {
        serializedName: "height",
        required: true,
        type: {
          name: "Number"
        }
      },
      contracts: {
        serializedName: "contracts",
        required: true,
        type: {
          name: "Number"
        }
      },
      lockedInAuctions: {
        serializedName: "locked_in_auctions",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      burnedInAuctions: {
        serializedName: "burned_in_auctions",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      lockedInChannels: {
        serializedName: "locked_in_channels",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      activeAuctions: {
        serializedName: "active_auctions",
        required: true,
        type: {
          name: "Number"
        }
      },
      activeNames: {
        serializedName: "active_names",
        required: true,
        type: {
          name: "Number"
        }
      },
      inactiveNames: {
        serializedName: "inactive_names",
        required: true,
        type: {
          name: "Number"
        }
      },
      activeOracles: {
        serializedName: "active_oracles",
        required: true,
        type: {
          name: "Number"
        }
      },
      inactiveOracles: {
        serializedName: "inactive_oracles",
        required: true,
        type: {
          name: "Number"
        }
      },
      openChannels: {
        serializedName: "open_channels",
        required: true,
        type: {
          name: "Number"
        }
      },
      sumBlockReward: {
        serializedName: "sum_block_reward",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      sumDevReward: {
        serializedName: "sum_dev_reward",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      totalTokenSupply: {
        serializedName: "total_token_supply",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      lastTxHash: {
        constraints: {
          Pattern: new RegExp("^th_\\w{38,50}$")
        },
        serializedName: "last_tx_hash",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};
export const Paths3Bfys0V3StatsTotalAccountsGetResponses200ContentApplicationJsonSchemaAllof0 = {
  type: {
    name: "Composite",
    className: "Paths3Bfys0V3StatsTotalAccountsGetResponses200ContentApplicationJsonSchemaAllof0",
    modelProperties: {
      data: {
        serializedName: "data",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Stat"
            }
          }
        }
      }
    }
  }
};
export const Paths6PaqluV3StatsTransactionsGetResponses200ContentApplicationJsonSchemaAllof0 = {
  type: {
    name: "Composite",
    className: "Paths6PaqluV3StatsTransactionsGetResponses200ContentApplicationJsonSchemaAllof0",
    modelProperties: {
      data: {
        serializedName: "data",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Stat"
            }
          }
        }
      }
    }
  }
};
export const Status = {
  type: {
    name: "Composite",
    className: "Status",
    modelProperties: {
      mdwAsyncTasks: {
        serializedName: "mdw_async_tasks",
        type: {
          name: "Composite",
          className: "StatusMdwAsyncTasks"
        }
      },
      mdwGensPerMinute: {
        serializedName: "mdw_gens_per_minute",
        required: true,
        type: {
          name: "Number"
        }
      },
      mdwHeight: {
        serializedName: "mdw_height",
        required: true,
        type: {
          name: "Number"
        }
      },
      mdwLastMigration: {
        serializedName: "mdw_last_migration",
        required: true,
        type: {
          name: "Number"
        }
      },
      mdwRevision: {
        serializedName: "mdw_revision",
        required: true,
        type: {
          name: "String"
        }
      },
      mdwSynced: {
        serializedName: "mdw_synced",
        required: true,
        type: {
          name: "Boolean"
        }
      },
      mdwSyncing: {
        serializedName: "mdw_syncing",
        required: true,
        type: {
          name: "Boolean"
        }
      },
      mdwTxIndex: {
        serializedName: "mdw_tx_index",
        required: true,
        type: {
          name: "Number"
        }
      },
      mdwVersion: {
        serializedName: "mdw_version",
        required: true,
        type: {
          name: "String"
        }
      },
      nodeHeight: {
        serializedName: "node_height",
        required: true,
        type: {
          name: "Number"
        }
      },
      nodeProgress: {
        serializedName: "node_progress",
        required: true,
        type: {
          name: "Number"
        }
      },
      nodeRevision: {
        serializedName: "node_revision",
        required: true,
        type: {
          name: "String"
        }
      },
      nodeSyncing: {
        serializedName: "node_syncing",
        required: true,
        type: {
          name: "Boolean"
        }
      },
      nodeVersion: {
        serializedName: "node_version",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};
export const StatusMdwAsyncTasks = {
  type: {
    name: "Composite",
    className: "StatusMdwAsyncTasks",
    modelProperties: {
      longTasks: {
        serializedName: "long_tasks",
        required: true,
        type: {
          name: "Number"
        }
      },
      producerBuffer: {
        serializedName: "producer_buffer",
        required: true,
        type: {
          name: "Number"
        }
      },
      totalPending: {
        serializedName: "total_pending",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const PathsHa9C78V3TransactionsGetResponses200ContentApplicationJsonSchemaAllof0 = {
  type: {
    name: "Composite",
    className: "PathsHa9C78V3TransactionsGetResponses200ContentApplicationJsonSchemaAllof0",
    modelProperties: {
      data: {
        serializedName: "data",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Transaction"
            }
          }
        }
      }
    }
  }
};
export const PathsI72FylV3TransactionsPendingGetResponses200ContentApplicationJsonSchemaAllof0 = {
  type: {
    name: "Composite",
    className: "PathsI72FylV3TransactionsPendingGetResponses200ContentApplicationJsonSchemaAllof0",
    modelProperties: {
      data: {
        serializedName: "data",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PendingTransaction"
            }
          }
        }
      }
    }
  }
};
export const PendingTransaction = {
  type: {
    name: "Composite",
    className: "PendingTransaction",
    modelProperties: {
      blockHash: {
        serializedName: "block_hash",
        required: true,
        type: {
          name: "String"
        }
      },
      blockHeight: {
        serializedName: "block_height",
        required: true,
        type: {
          name: "Number"
        }
      },
      encodedTx: {
        constraints: {
          Pattern: new RegExp("^tx_\\w+$")
        },
        serializedName: "encoded_tx",
        required: true,
        type: {
          name: "String"
        }
      },
      failures: {
        serializedName: "failures",
        required: true,
        type: {
          name: "Number"
        }
      },
      hash: {
        constraints: {
          Pattern: new RegExp("^th_\\w{38,50}$")
        },
        serializedName: "hash",
        required: true,
        type: {
          name: "String"
        }
      },
      signatures: {
        serializedName: "signatures",
        required: true,
        type: {
          name: "Sequence",
          element: {
            constraints: {
              Pattern: new RegExp("^sg_\\w+$")
            },
            type: {
              name: "String"
            }
          }
        }
      },
      tx: {
        serializedName: "tx",
        type: {
          name: "Composite",
          className: "Tx"
        }
      }
    }
  }
};
export const PathsVdg67V3TransfersGetResponses200ContentApplicationJsonSchemaAllof0 = {
  type: {
    name: "Composite",
    className: "PathsVdg67V3TransfersGetResponses200ContentApplicationJsonSchemaAllof0",
    modelProperties: {
      data: {
        serializedName: "data",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Transfer"
            }
          }
        }
      }
    }
  }
};
export const Transfer = {
  type: {
    name: "Composite",
    className: "Transfer",
    modelProperties: {
      accountId: {
        constraints: {
          Pattern: new RegExp("^ak_\\w{38,50}$")
        },
        serializedName: "account_id",
        required: true,
        type: {
          name: "String"
        }
      },
      amount: {
        serializedName: "amount",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      height: {
        serializedName: "height",
        required: true,
        type: {
          name: "Number"
        }
      },
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["reward_dev", "reward_block"]
        }
      },
      refBlockHash: {
        constraints: {
          Pattern: new RegExp("^mh_\\w{38,50}$")
        },
        serializedName: "ref_block_hash",
        required: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      refTxHash: {
        constraints: {
          Pattern: new RegExp("^th_\\w{38,50}$")
        },
        serializedName: "ref_tx_hash",
        required: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      refTxType: {
        serializedName: "ref_tx_type",
        required: true,
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};
export const Aex9TransferEvent = {
  type: {
    name: "Composite",
    className: "Aex9TransferEvent",
    modelProperties: {
      amount: {
        serializedName: "amount",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      blockHeight: {
        serializedName: "block_height",
        required: true,
        type: {
          name: "Number"
        }
      },
      contractId: {
        constraints: {
          Pattern: new RegExp("^ct_\\w{38,50}$")
        },
        serializedName: "contract_id",
        required: true,
        type: {
          name: "String"
        }
      },
      logIdx: {
        serializedName: "log_idx",
        required: true,
        type: {
          name: "Number"
        }
      },
      microIndex: {
        serializedName: "micro_index",
        required: true,
        type: {
          name: "Number"
        }
      },
      microTime: {
        serializedName: "micro_time",
        required: true,
        type: {
          name: "UnixTime"
        }
      },
      recipientId: {
        constraints: {
          Pattern: new RegExp("^ak_\\w{38,50}$")
        },
        serializedName: "recipient_id",
        required: true,
        type: {
          name: "String"
        }
      },
      senderId: {
        constraints: {
          Pattern: new RegExp("^ak_\\w{38,50}$")
        },
        serializedName: "sender_id",
        required: true,
        type: {
          name: "String"
        }
      },
      txHash: {
        constraints: {
          Pattern: new RegExp("^th_\\w{38,50}$")
        },
        serializedName: "tx_hash",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};
export const Aex9TransferResponse = {
  type: {
    name: "Composite",
    className: "Aex9TransferResponse",
    modelProperties: {
      amount: {
        serializedName: "amount",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      blockHeight: {
        serializedName: "block_height",
        required: true,
        type: {
          name: "Number"
        }
      },
      callTxi: {
        serializedName: "call_txi",
        required: true,
        type: {
          name: "Number"
        }
      },
      contractId: {
        constraints: {
          Pattern: new RegExp("^ct_\\w{38,50}$")
        },
        serializedName: "contract_id",
        required: true,
        type: {
          name: "String"
        }
      },
      logIdx: {
        serializedName: "log_idx",
        required: true,
        type: {
          name: "Number"
        }
      },
      microTime: {
        serializedName: "micro_time",
        required: true,
        type: {
          name: "UnixTime"
        }
      },
      recipient: {
        constraints: {
          Pattern: new RegExp("^ak_\\w{38,50}$")
        },
        serializedName: "recipient",
        required: true,
        type: {
          name: "String"
        }
      },
      sender: {
        constraints: {
          Pattern: new RegExp("^ak_\\w{38,50}$")
        },
        serializedName: "sender",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};
export const InternalContractCallEvent = {
  type: {
    name: "Composite",
    className: "InternalContractCallEvent",
    modelProperties: {
      contractTxHash: {
        constraints: {
          Pattern: new RegExp("^th_\\w{38,50}$")
        },
        serializedName: "contract_tx_hash",
        required: true,
        type: {
          name: "String"
        }
      },
      contractId: {
        constraints: {
          Pattern: new RegExp("^ct_\\w{38,50}$")
        },
        serializedName: "contract_id",
        required: true,
        type: {
          name: "String"
        }
      },
      callTxHash: {
        constraints: {
          Pattern: new RegExp("^th_\\w{38,50}$")
        },
        serializedName: "call_tx_hash",
        type: {
          name: "String"
        }
      },
      function: {
        serializedName: "function",
        required: true,
        type: {
          name: "String"
        }
      },
      internalTx: {
        serializedName: "internal_tx",
        required: true,
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "any"
            }
          }
        }
      },
      height: {
        serializedName: "height",
        required: true,
        type: {
          name: "Number"
        }
      },
      microIndex: {
        serializedName: "micro_index",
        required: true,
        type: {
          name: "Number"
        }
      },
      blockHash: {
        constraints: {
          Pattern: new RegExp("^mh_\\w{38,50}$")
        },
        serializedName: "block_hash",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};
export const InternalTransferEvent = {
  type: {
    name: "Composite",
    className: "InternalTransferEvent",
    modelProperties: {
      amount: {
        serializedName: "amount",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["accounts_extra_lima", "accounts_fortuna", "accounts_genesis", "accounts_lima", "accounts_minerva", "contracts_lima", "reward_dev", "reward_block", "fee_refund_oracle", "fee_lock_name", "fee_refund_name", "fee_spend_name", "reward_oracle"]
        }
      },
      refTxHash: {
        constraints: {
          Pattern: new RegExp("^th_\\w{38,50}$")
        },
        serializedName: "ref_tx_hash",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};
export const NameClaimEvent = {
  type: {
    name: "Composite",
    className: "NameClaimEvent",
    modelProperties: {
      txHash: {
        constraints: {
          Pattern: new RegExp("^th_\\w{38,50}$")
        },
        serializedName: "tx_hash",
        required: true,
        type: {
          name: "String"
        }
      },
      tx: {
        serializedName: "tx",
        required: true,
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "any"
            }
          }
        }
      }
    }
  }
};
export const SpendTx = {
  type: {
    name: "Composite",
    className: "SpendTx",
    modelProperties: {
      recipientId: {
        serializedName: "recipient_id",
        required: true,
        type: {
          name: "String"
        }
      },
      amount: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "amount",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      fee: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "fee",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      ttl: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "ttl",
        type: {
          name: "Number"
        }
      },
      senderId: {
        serializedName: "sender_id",
        required: true,
        type: {
          name: "String"
        }
      },
      nonce: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "nonce",
        type: {
          name: "Number"
        }
      },
      payload: {
        serializedName: "payload",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};
export const ChannelCreateTx = {
  type: {
    name: "Composite",
    className: "ChannelCreateTx",
    modelProperties: {
      initiatorId: {
        serializedName: "initiator_id",
        required: true,
        type: {
          name: "String"
        }
      },
      initiatorAmount: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "initiator_amount",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      responderId: {
        serializedName: "responder_id",
        required: true,
        type: {
          name: "String"
        }
      },
      responderAmount: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "responder_amount",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      channelReserve: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "channel_reserve",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      lockPeriod: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "lock_period",
        required: true,
        type: {
          name: "Number"
        }
      },
      ttl: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "ttl",
        type: {
          name: "Number"
        }
      },
      fee: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "fee",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      nonce: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "nonce",
        type: {
          name: "Number"
        }
      },
      stateHash: {
        serializedName: "state_hash",
        required: true,
        type: {
          name: "String"
        }
      },
      delegateIds: {
        serializedName: "delegate_ids",
        type: {
          name: "Composite",
          className: "Delegates"
        }
      }
    }
  }
};
export const ChannelDepositTx = {
  type: {
    name: "Composite",
    className: "ChannelDepositTx",
    modelProperties: {
      channelId: {
        serializedName: "channel_id",
        required: true,
        type: {
          name: "String"
        }
      },
      fromId: {
        serializedName: "from_id",
        required: true,
        type: {
          name: "String"
        }
      },
      amount: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "amount",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      ttl: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "ttl",
        type: {
          name: "Number"
        }
      },
      fee: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "fee",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      nonce: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "nonce",
        required: true,
        type: {
          name: "Number"
        }
      },
      stateHash: {
        serializedName: "state_hash",
        required: true,
        type: {
          name: "String"
        }
      },
      round: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "round",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const ChannelWithdrawTx = {
  type: {
    name: "Composite",
    className: "ChannelWithdrawTx",
    modelProperties: {
      channelId: {
        serializedName: "channel_id",
        required: true,
        type: {
          name: "String"
        }
      },
      toId: {
        serializedName: "to_id",
        required: true,
        type: {
          name: "String"
        }
      },
      amount: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "amount",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      ttl: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "ttl",
        type: {
          name: "Number"
        }
      },
      fee: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "fee",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      nonce: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "nonce",
        required: true,
        type: {
          name: "Number"
        }
      },
      stateHash: {
        serializedName: "state_hash",
        required: true,
        type: {
          name: "String"
        }
      },
      round: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "round",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const ChannelForceProgressTx = {
  type: {
    name: "Composite",
    className: "ChannelForceProgressTx",
    modelProperties: {
      channelId: {
        serializedName: "channel_id",
        required: true,
        type: {
          name: "String"
        }
      },
      fromId: {
        serializedName: "from_id",
        required: true,
        type: {
          name: "String"
        }
      },
      payload: {
        serializedName: "payload",
        required: true,
        type: {
          name: "String"
        }
      },
      round: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "round",
        required: true,
        type: {
          name: "Number"
        }
      },
      update: {
        serializedName: "update",
        type: {
          name: "Composite",
          className: "OffChainUpdate"
        }
      },
      stateHash: {
        serializedName: "state_hash",
        required: true,
        type: {
          name: "String"
        }
      },
      ttl: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "ttl",
        type: {
          name: "Number"
        }
      },
      fee: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "fee",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      nonce: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "nonce",
        type: {
          name: "Number"
        }
      },
      offchainTrees: {
        serializedName: "offchain_trees",
        type: {
          name: "String"
        }
      }
    }
  }
};
export const ChannelCloseMutualTx = {
  type: {
    name: "Composite",
    className: "ChannelCloseMutualTx",
    modelProperties: {
      channelId: {
        serializedName: "channel_id",
        required: true,
        type: {
          name: "String"
        }
      },
      fromId: {
        serializedName: "from_id",
        required: true,
        type: {
          name: "String"
        }
      },
      initiatorAmountFinal: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "initiator_amount_final",
        required: true,
        type: {
          name: "Number"
        }
      },
      responderAmountFinal: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "responder_amount_final",
        required: true,
        type: {
          name: "Number"
        }
      },
      ttl: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "ttl",
        type: {
          name: "Number"
        }
      },
      fee: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "fee",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      nonce: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "nonce",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const ChannelCloseSoloTx = {
  type: {
    name: "Composite",
    className: "ChannelCloseSoloTx",
    modelProperties: {
      channelId: {
        serializedName: "channel_id",
        required: true,
        type: {
          name: "String"
        }
      },
      fromId: {
        serializedName: "from_id",
        required: true,
        type: {
          name: "String"
        }
      },
      payload: {
        serializedName: "payload",
        required: true,
        type: {
          name: "String"
        }
      },
      ttl: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "ttl",
        type: {
          name: "Number"
        }
      },
      fee: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "fee",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      nonce: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "nonce",
        type: {
          name: "Number"
        }
      },
      poi: {
        serializedName: "poi",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};
export const ChannelSlashTx = {
  type: {
    name: "Composite",
    className: "ChannelSlashTx",
    modelProperties: {
      channelId: {
        serializedName: "channel_id",
        required: true,
        type: {
          name: "String"
        }
      },
      fromId: {
        serializedName: "from_id",
        required: true,
        type: {
          name: "String"
        }
      },
      payload: {
        serializedName: "payload",
        required: true,
        type: {
          name: "String"
        }
      },
      ttl: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "ttl",
        type: {
          name: "Number"
        }
      },
      fee: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "fee",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      nonce: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "nonce",
        type: {
          name: "Number"
        }
      },
      poi: {
        serializedName: "poi",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};
export const ChannelSettleTx = {
  type: {
    name: "Composite",
    className: "ChannelSettleTx",
    modelProperties: {
      channelId: {
        serializedName: "channel_id",
        required: true,
        type: {
          name: "String"
        }
      },
      fromId: {
        serializedName: "from_id",
        required: true,
        type: {
          name: "String"
        }
      },
      initiatorAmountFinal: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "initiator_amount_final",
        required: true,
        type: {
          name: "Number"
        }
      },
      responderAmountFinal: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "responder_amount_final",
        required: true,
        type: {
          name: "Number"
        }
      },
      ttl: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "ttl",
        type: {
          name: "Number"
        }
      },
      fee: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "fee",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      nonce: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "nonce",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const ChannelSnapshotSoloTx = {
  type: {
    name: "Composite",
    className: "ChannelSnapshotSoloTx",
    modelProperties: {
      channelId: {
        serializedName: "channel_id",
        required: true,
        type: {
          name: "String"
        }
      },
      fromId: {
        serializedName: "from_id",
        required: true,
        type: {
          name: "String"
        }
      },
      payload: {
        serializedName: "payload",
        required: true,
        type: {
          name: "String"
        }
      },
      ttl: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "ttl",
        type: {
          name: "Number"
        }
      },
      fee: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "fee",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      nonce: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "nonce",
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const ChannelSetDelegatesTx = {
  type: {
    name: "Composite",
    className: "ChannelSetDelegatesTx",
    modelProperties: {
      channelId: {
        serializedName: "channel_id",
        required: true,
        type: {
          name: "String"
        }
      },
      fromId: {
        serializedName: "from_id",
        required: true,
        type: {
          name: "String"
        }
      },
      initiatorDelegateIds: {
        serializedName: "initiator_delegate_ids",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      responderDelegateIds: {
        serializedName: "responder_delegate_ids",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      stateHash: {
        serializedName: "state_hash",
        required: true,
        type: {
          name: "String"
        }
      },
      round: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "round",
        required: true,
        type: {
          name: "Number"
        }
      },
      payload: {
        serializedName: "payload",
        required: true,
        type: {
          name: "String"
        }
      },
      ttl: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "ttl",
        type: {
          name: "Number"
        }
      },
      fee: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "fee",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      nonce: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "nonce",
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const OracleQueryTx = {
  type: {
    name: "Composite",
    className: "OracleQueryTx",
    modelProperties: {
      oracleId: {
        serializedName: "oracle_id",
        required: true,
        type: {
          name: "String"
        }
      },
      query: {
        serializedName: "query",
        required: true,
        type: {
          name: "String"
        }
      },
      queryFee: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "query_fee",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      queryTtl: {
        serializedName: "query_ttl",
        type: {
          name: "Composite",
          className: "Ttl"
        }
      },
      responseTtl: {
        serializedName: "response_ttl",
        type: {
          name: "Composite",
          className: "RelativeTTL"
        }
      },
      fee: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "fee",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      ttl: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "ttl",
        type: {
          name: "Number"
        }
      },
      senderId: {
        serializedName: "sender_id",
        required: true,
        type: {
          name: "String"
        }
      },
      nonce: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "nonce",
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const OracleRespondTx = {
  type: {
    name: "Composite",
    className: "OracleRespondTx",
    modelProperties: {
      queryId: {
        serializedName: "query_id",
        required: true,
        type: {
          name: "String"
        }
      },
      response: {
        serializedName: "response",
        required: true,
        type: {
          name: "String"
        }
      },
      responseTtl: {
        serializedName: "response_ttl",
        type: {
          name: "Composite",
          className: "RelativeTTL"
        }
      },
      fee: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "fee",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      ttl: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "ttl",
        type: {
          name: "Number"
        }
      },
      oracleId: {
        serializedName: "oracle_id",
        required: true,
        type: {
          name: "String"
        }
      },
      nonce: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "nonce",
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const NamePreclaimTx = {
  type: {
    name: "Composite",
    className: "NamePreclaimTx",
    modelProperties: {
      commitmentId: {
        serializedName: "commitment_id",
        required: true,
        type: {
          name: "String"
        }
      },
      fee: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "fee",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      ttl: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "ttl",
        type: {
          name: "Number"
        }
      },
      accountId: {
        serializedName: "account_id",
        required: true,
        type: {
          name: "String"
        }
      },
      nonce: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "nonce",
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const ContractCallTx = {
  type: {
    name: "Composite",
    className: "ContractCallTx",
    modelProperties: {
      callerId: {
        serializedName: "caller_id",
        required: true,
        type: {
          name: "String"
        }
      },
      nonce: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "nonce",
        type: {
          name: "Number"
        }
      },
      contractId: {
        serializedName: "contract_id",
        required: true,
        type: {
          name: "String"
        }
      },
      abiVersion: {
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 0
        },
        serializedName: "abi_version",
        required: true,
        type: {
          name: "Number"
        }
      },
      fee: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "fee",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      ttl: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "ttl",
        type: {
          name: "Number"
        }
      },
      amount: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "amount",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      gas: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "gas",
        required: true,
        type: {
          name: "Number"
        }
      },
      gasPrice: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "gas_price",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      callData: {
        serializedName: "call_data",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};
export const GAAttachTx = {
  type: {
    name: "Composite",
    className: "GAAttachTx",
    modelProperties: {
      ownerId: {
        serializedName: "owner_id",
        required: true,
        type: {
          name: "String"
        }
      },
      nonce: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "nonce",
        type: {
          name: "Number"
        }
      },
      code: {
        serializedName: "code",
        required: true,
        type: {
          name: "String"
        }
      },
      vmVersion: {
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 0
        },
        serializedName: "vm_version",
        required: true,
        type: {
          name: "Number"
        }
      },
      abiVersion: {
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 0
        },
        serializedName: "abi_version",
        required: true,
        type: {
          name: "Number"
        }
      },
      gas: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "gas",
        required: true,
        type: {
          name: "Number"
        }
      },
      gasPrice: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "gas_price",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      fee: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "fee",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      ttl: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "ttl",
        type: {
          name: "Number"
        }
      },
      callData: {
        serializedName: "call_data",
        required: true,
        type: {
          name: "String"
        }
      },
      authFun: {
        constraints: {
          Pattern: new RegExp("^(0x|0X)?[a-fA-F0-9]+$")
        },
        serializedName: "auth_fun",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};
export const GAMetaTx = {
  type: {
    name: "Composite",
    className: "GAMetaTx",
    modelProperties: {
      gaId: {
        serializedName: "ga_id",
        required: true,
        type: {
          name: "String"
        }
      },
      abiVersion: {
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 0
        },
        serializedName: "abi_version",
        required: true,
        type: {
          name: "Number"
        }
      },
      gas: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "gas",
        required: true,
        type: {
          name: "Number"
        }
      },
      gasPrice: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "gas_price",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      fee: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "fee",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      ttl: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "ttl",
        type: {
          name: "Number"
        }
      },
      authData: {
        serializedName: "auth_data",
        required: true,
        type: {
          name: "String"
        }
      },
      tx: {
        serializedName: "tx",
        type: {
          name: "Composite",
          className: "SignedTx"
        }
      }
    }
  }
};
export const PayingForTx = {
  type: {
    name: "Composite",
    className: "PayingForTx",
    modelProperties: {
      payerId: {
        serializedName: "payer_id",
        required: true,
        type: {
          name: "String"
        }
      },
      fee: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "fee",
        required: true,
        type: {
          // @ts-expect-error we are extending autorest with BigInt support
          name: "BigInt"
        }
      },
      nonce: {
        constraints: {
          InclusiveMaximum: 18446744073709552000,
          InclusiveMinimum: 0
        },
        serializedName: "nonce",
        type: {
          name: "Number"
        }
      },
      tx: {
        serializedName: "tx",
        type: {
          name: "Composite",
          className: "SignedTx"
        }
      }
    }
  }
};
export const Paths1EfdbjrV3AccountsAccountidActivitiesGetResponses200ContentApplicationJsonSchema = {
  type: {
    name: "Composite",
    className: "Paths1EfdbjrV3AccountsAccountidActivitiesGetResponses200ContentApplicationJsonSchema",
    modelProperties: {
      ...PathsBx0Ya3V3AccountsAccountidActivitiesGetResponses200ContentApplicationJsonSchemaAllof0.type.modelProperties,
      ...PaginatedResponse.type.modelProperties
    }
  }
};
export const Paths3Hsv3GV3AccountsAccountidAex141TokensGetResponses200ContentApplicationJsonSchema = {
  type: {
    name: "Composite",
    className: "Paths3Hsv3GV3AccountsAccountidAex141TokensGetResponses200ContentApplicationJsonSchema",
    modelProperties: {
      ...Paths1Q9E32FV3AccountsAccountidAex141TokensGetResponses200ContentApplicationJsonSchemaAllof0.type.modelProperties,
      ...PaginatedResponse.type.modelProperties
    }
  }
};
export const PathsKm52GqV3AccountsAccountidAex9BalancesGetResponses200ContentApplicationJsonSchema = {
  type: {
    name: "Composite",
    className: "PathsKm52GqV3AccountsAccountidAex9BalancesGetResponses200ContentApplicationJsonSchema",
    modelProperties: {
      ...PaginatedResponse.type.modelProperties,
      ...PathsZ92TkfV3AccountsAccountidAex9BalancesGetResponses200ContentApplicationJsonSchemaAllof1.type.modelProperties
    }
  }
};
export const PathsZpy8S9V3AccountsAccountidDexSwapsGetResponses200ContentApplicationJsonSchema = {
  type: {
    name: "Composite",
    className: "PathsZpy8S9V3AccountsAccountidDexSwapsGetResponses200ContentApplicationJsonSchema",
    modelProperties: {
      ...Paths10R8Q7PV3AccountsAccountidDexSwapsGetResponses200ContentApplicationJsonSchemaAllof0.type.modelProperties,
      ...PaginatedResponse.type.modelProperties
    }
  }
};
export const Paths16Cyh9EV3AccountsAccountidNamesClaimsGetResponses200ContentApplicationJsonSchema = {
  type: {
    name: "Composite",
    className: "Paths16Cyh9EV3AccountsAccountidNamesClaimsGetResponses200ContentApplicationJsonSchema",
    modelProperties: {
      ...Paths16G4GzrV3AccountsAccountidNamesClaimsGetResponses200ContentApplicationJsonSchemaAllof0.type.modelProperties,
      ...PaginatedResponse.type.modelProperties
    }
  }
};
export const Paths1Mheci5V3AccountsAccountidNamesPointeesGetResponses200ContentApplicationJsonSchema = {
  type: {
    name: "Composite",
    className: "Paths1Mheci5V3AccountsAccountidNamesPointeesGetResponses200ContentApplicationJsonSchema",
    modelProperties: {
      ...PathsA60QxwV3AccountsAccountidNamesPointeesGetResponses200ContentApplicationJsonSchemaAllof0.type.modelProperties,
      ...PaginatedResponse.type.modelProperties
    }
  }
};
export const Paths1XwlyjtV3Aex141GetResponses200ContentApplicationJsonSchema = {
  type: {
    name: "Composite",
    className: "Paths1XwlyjtV3Aex141GetResponses200ContentApplicationJsonSchema",
    modelProperties: {
      ...Paths8I0YgwV3Aex141GetResponses200ContentApplicationJsonSchemaAllof0.type.modelProperties,
      ...PaginatedResponse.type.modelProperties
    }
  }
};
export const Paths181AjwxV3Aex141ContractidTemplatesGetResponses200ContentApplicationJsonSchema = {
  type: {
    name: "Composite",
    className: "Paths181AjwxV3Aex141ContractidTemplatesGetResponses200ContentApplicationJsonSchema",
    modelProperties: {
      ...PathsWkpcwaV3Aex141ContractidTemplatesGetResponses200ContentApplicationJsonSchemaAllof0.type.modelProperties,
      ...PaginatedResponse.type.modelProperties
    }
  }
};
export const Paths15Mi2TaV3Aex141ContractidTemplatesTemplateidTokensGetResponses200ContentApplicationJsonSchema = {
  type: {
    name: "Composite",
    className: "Paths15Mi2TaV3Aex141ContractidTemplatesTemplateidTokensGetResponses200ContentApplicationJsonSchema",
    modelProperties: {
      ...PathsRay4X0V3Aex141ContractidTemplatesTemplateidTokensGetResponses200ContentApplicationJsonSchemaAllof0.type.modelProperties,
      ...PaginatedResponse.type.modelProperties
    }
  }
};
export const PathsWl652MV3Aex141ContractidTokensGetResponses200ContentApplicationJsonSchema = {
  type: {
    name: "Composite",
    className: "PathsWl652MV3Aex141ContractidTokensGetResponses200ContentApplicationJsonSchema",
    modelProperties: {
      ...Paths1TkisghV3Aex141ContractidTokensGetResponses200ContentApplicationJsonSchemaAllof0.type.modelProperties,
      ...PaginatedResponse.type.modelProperties
    }
  }
};
export const Paths1O7Q6IhV3Aex141ContractidTransfersGetResponses200ContentApplicationJsonSchema = {
  type: {
    name: "Composite",
    className: "Paths1O7Q6IhV3Aex141ContractidTransfersGetResponses200ContentApplicationJsonSchema",
    modelProperties: {
      ...Paths1A8Ah39V3Aex141ContractidTransfersGetResponses200ContentApplicationJsonSchemaAllof0.type.modelProperties,
      ...PaginatedResponse.type.modelProperties
    }
  }
};
export const Paths1Vr3Y2EV3Aex9GetResponses200ContentApplicationJsonSchema = {
  type: {
    name: "Composite",
    className: "Paths1Vr3Y2EV3Aex9GetResponses200ContentApplicationJsonSchema",
    modelProperties: {
      ...Paths1Uqqby0V3Aex9GetResponses200ContentApplicationJsonSchemaAllof0.type.modelProperties,
      ...PaginatedResponse.type.modelProperties
    }
  }
};
export const Paths1N61UurV3Aex9ContractidBalancesGetResponses200ContentApplicationJsonSchema = {
  type: {
    name: "Composite",
    className: "Paths1N61UurV3Aex9ContractidBalancesGetResponses200ContentApplicationJsonSchema",
    modelProperties: {
      ...PathsEeiffwV3Aex9ContractidBalancesGetResponses200ContentApplicationJsonSchemaAllof0.type.modelProperties,
      ...PaginatedResponse.type.modelProperties
    }
  }
};
export const Paths1Uybd4PV3Aex9ContractidBalancesAccountidHistoryGetResponses200ContentApplicationJsonSchema = {
  type: {
    name: "Composite",
    className: "Paths1Uybd4PV3Aex9ContractidBalancesAccountidHistoryGetResponses200ContentApplicationJsonSchema",
    modelProperties: {
      ...PaginatedResponse.type.modelProperties,
      ...Paths108B3VtV3Aex9ContractidBalancesAccountidHistoryGetResponses200ContentApplicationJsonSchemaAllof1.type.modelProperties
    }
  }
};
export const Paths3EzhapV3ChannelsGetResponses200ContentApplicationJsonSchema = {
  type: {
    name: "Composite",
    className: "Paths3EzhapV3ChannelsGetResponses200ContentApplicationJsonSchema",
    modelProperties: {
      ...PathsQmewnaV3ChannelsGetResponses200ContentApplicationJsonSchemaAllof0.type.modelProperties,
      ...PaginatedResponse.type.modelProperties
    }
  }
};
export const Paths1Txblx8V3ContractsCallsGetResponses200ContentApplicationJsonSchema = {
  type: {
    name: "Composite",
    className: "Paths1Txblx8V3ContractsCallsGetResponses200ContentApplicationJsonSchema",
    modelProperties: {
      ...Paths18L84JcV3ContractsCallsGetResponses200ContentApplicationJsonSchemaAllof0.type.modelProperties,
      ...PaginatedResponse.type.modelProperties
    }
  }
};
export const Paths7A1M6RV3ContractsLogsGetResponses200ContentApplicationJsonSchema = {
  type: {
    name: "Composite",
    className: "Paths7A1M6RV3ContractsLogsGetResponses200ContentApplicationJsonSchema",
    modelProperties: {
      ...Paths10Kk1UxV3ContractsLogsGetResponses200ContentApplicationJsonSchemaAllof0.type.modelProperties,
      ...PaginatedResponse.type.modelProperties
    }
  }
};
export const Paths1Di8FnjV3DexSwapsGetResponses200ContentApplicationJsonSchema = {
  type: {
    name: "Composite",
    className: "Paths1Di8FnjV3DexSwapsGetResponses200ContentApplicationJsonSchema",
    modelProperties: {
      ...Paths9Yfxl2V3DexSwapsGetResponses200ContentApplicationJsonSchemaAllof0.type.modelProperties,
      ...PaginatedResponse.type.modelProperties
    }
  }
};
export const PathsKwxlzlV3DexContractIdSwapsGetResponses200ContentApplicationJsonSchema = {
  type: {
    name: "Composite",
    className: "PathsKwxlzlV3DexContractIdSwapsGetResponses200ContentApplicationJsonSchema",
    modelProperties: {
      ...Paths6Vze8ZV3DexContractIdSwapsGetResponses200ContentApplicationJsonSchemaAllof0.type.modelProperties,
      ...PaginatedResponse.type.modelProperties
    }
  }
};
export const Paths194Lg3IV3HyperchainEpochsGetResponses200ContentApplicationJsonSchema = {
  type: {
    name: "Composite",
    className: "Paths194Lg3IV3HyperchainEpochsGetResponses200ContentApplicationJsonSchema",
    modelProperties: {
      ...Paths1F8GzwrV3HyperchainEpochsGetResponses200ContentApplicationJsonSchemaAllof0.type.modelProperties,
      ...PaginatedResponse.type.modelProperties
    }
  }
};
export const Paths1S5Zlt1V3HyperchainScheduleGetResponses200ContentApplicationJsonSchema = {
  type: {
    name: "Composite",
    className: "Paths1S5Zlt1V3HyperchainScheduleGetResponses200ContentApplicationJsonSchema",
    modelProperties: {
      ...Paths7W5O80V3HyperchainScheduleGetResponses200ContentApplicationJsonSchemaAllof0.type.modelProperties,
      ...PaginatedResponse.type.modelProperties
    }
  }
};
export const Paths1Ibn686V3HyperchainValidatorsGetResponses200ContentApplicationJsonSchema = {
  type: {
    name: "Composite",
    className: "Paths1Ibn686V3HyperchainValidatorsGetResponses200ContentApplicationJsonSchema",
    modelProperties: {
      ...Paths1Qg7SclV3HyperchainValidatorsGetResponses200ContentApplicationJsonSchemaAllof0.type.modelProperties,
      ...PaginatedResponse.type.modelProperties
    }
  }
};
export const Paths1I4U8D5V3HyperchainValidatorsValidatorDelegatesGetResponses200ContentApplicationJsonSchema = {
  type: {
    name: "Composite",
    className: "Paths1I4U8D5V3HyperchainValidatorsValidatorDelegatesGetResponses200ContentApplicationJsonSchema",
    modelProperties: {
      ...Paths7Ks32NV3HyperchainValidatorsValidatorDelegatesGetResponses200ContentApplicationJsonSchemaAllof0.type.modelProperties,
      ...PaginatedResponse.type.modelProperties
    }
  }
};
export const Paths15K0AlgV3HyperchainValidatorsValidatorDelegatesTopGetResponses200ContentApplicationJsonSchema = {
  type: {
    name: "Composite",
    className: "Paths15K0AlgV3HyperchainValidatorsValidatorDelegatesTopGetResponses200ContentApplicationJsonSchema",
    modelProperties: {
      ...PathsDwhnfdV3HyperchainValidatorsValidatorDelegatesTopGetResponses200ContentApplicationJsonSchemaAllof0.type.modelProperties,
      ...PaginatedResponse.type.modelProperties
    }
  }
};
export const Paths277OngV3KeyBlocksGetResponses200ContentApplicationJsonSchema = {
  type: {
    name: "Composite",
    className: "Paths277OngV3KeyBlocksGetResponses200ContentApplicationJsonSchema",
    modelProperties: {
      ...PathsEue6HzV3KeyBlocksGetResponses200ContentApplicationJsonSchemaAllof0.type.modelProperties,
      ...PaginatedResponse.type.modelProperties
    }
  }
};
export const Paths1159W94V3KeyBlocksHashOrKbiMicroBlocksGetResponses200ContentApplicationJsonSchema = {
  type: {
    name: "Composite",
    className: "Paths1159W94V3KeyBlocksHashOrKbiMicroBlocksGetResponses200ContentApplicationJsonSchema",
    modelProperties: {
      ...PathsNn60D7V3KeyBlocksHashOrKbiMicroBlocksGetResponses200ContentApplicationJsonSchemaAllof0.type.modelProperties,
      ...PaginatedResponse.type.modelProperties
    }
  }
};
export const Paths15Bkk50V3MicroBlocksHashTransactionsGetResponses200ContentApplicationJsonSchema = {
  type: {
    name: "Composite",
    className: "Paths15Bkk50V3MicroBlocksHashTransactionsGetResponses200ContentApplicationJsonSchema",
    modelProperties: {
      ...PathsXhlqwrV3MicroBlocksHashTransactionsGetResponses200ContentApplicationJsonSchemaAllof0.type.modelProperties,
      ...PaginatedResponse.type.modelProperties
    }
  }
};
export const Paths12S1Nd4V3NamesGetResponses200ContentApplicationJsonSchema = {
  type: {
    name: "Composite",
    className: "Paths12S1Nd4V3NamesGetResponses200ContentApplicationJsonSchema",
    modelProperties: {
      ...Paths181Cs9V3NamesGetResponses200ContentApplicationJsonSchemaAllof0.type.modelProperties,
      ...PaginatedResponse.type.modelProperties
    }
  }
};
export const PathsKjq4D4V3NamesAuctionsGetResponses200ContentApplicationJsonSchema = {
  type: {
    name: "Composite",
    className: "PathsKjq4D4V3NamesAuctionsGetResponses200ContentApplicationJsonSchema",
    modelProperties: {
      ...Paths1R08F8HV3NamesAuctionsGetResponses200ContentApplicationJsonSchemaAllof0.type.modelProperties,
      ...PaginatedResponse.type.modelProperties
    }
  }
};
export const Paths1F98AqgV3NamesIdClaimsGetResponses200ContentApplicationJsonSchema = {
  type: {
    name: "Composite",
    className: "Paths1F98AqgV3NamesIdClaimsGetResponses200ContentApplicationJsonSchema",
    modelProperties: {
      ...PathsMyl4W2V3NamesIdClaimsGetResponses200ContentApplicationJsonSchemaAllof0.type.modelProperties,
      ...PaginatedResponse.type.modelProperties
    }
  }
};
export const Paths1Raw8PV3NamesIdTransfersGetResponses200ContentApplicationJsonSchema = {
  type: {
    name: "Composite",
    className: "Paths1Raw8PV3NamesIdTransfersGetResponses200ContentApplicationJsonSchema",
    modelProperties: {
      ...Paths1Ukwk06V3NamesIdTransfersGetResponses200ContentApplicationJsonSchemaAllof0.type.modelProperties,
      ...PaginatedResponse.type.modelProperties
    }
  }
};
export const Paths1Ec8CltV3NamesIdUpdatesGetResponses200ContentApplicationJsonSchema = {
  type: {
    name: "Composite",
    className: "Paths1Ec8CltV3NamesIdUpdatesGetResponses200ContentApplicationJsonSchema",
    modelProperties: {
      ...PathsRcnvllV3NamesIdUpdatesGetResponses200ContentApplicationJsonSchemaAllof0.type.modelProperties,
      ...PaginatedResponse.type.modelProperties
    }
  }
};
export const Paths1E14NekV3OraclesGetResponses200ContentApplicationJsonSchema = {
  type: {
    name: "Composite",
    className: "Paths1E14NekV3OraclesGetResponses200ContentApplicationJsonSchema",
    modelProperties: {
      ...PathsGcr9MrV3OraclesGetResponses200ContentApplicationJsonSchemaAllof0.type.modelProperties,
      ...PaginatedResponse.type.modelProperties
    }
  }
};
export const Paths1L5C64RV3OraclesIdExtendsGetResponses200ContentApplicationJsonSchema = {
  type: {
    name: "Composite",
    className: "Paths1L5C64RV3OraclesIdExtendsGetResponses200ContentApplicationJsonSchema",
    modelProperties: {
      ...PathsZ4L2QlV3OraclesIdExtendsGetResponses200ContentApplicationJsonSchemaAllof0.type.modelProperties,
      ...PaginatedResponse.type.modelProperties
    }
  }
};
export const Paths8722JhV3OraclesIdQueriesGetResponses200ContentApplicationJsonSchema = {
  type: {
    name: "Composite",
    className: "Paths8722JhV3OraclesIdQueriesGetResponses200ContentApplicationJsonSchema",
    modelProperties: {
      ...Paths1Uni7AtV3OraclesIdQueriesGetResponses200ContentApplicationJsonSchemaAllof0.type.modelProperties,
      ...PaginatedResponse.type.modelProperties
    }
  }
};
export const PathsVron83V3OraclesIdResponsesGetResponses200ContentApplicationJsonSchema = {
  type: {
    name: "Composite",
    className: "PathsVron83V3OraclesIdResponsesGetResponses200ContentApplicationJsonSchema",
    modelProperties: {
      ...Paths1Tcj5A9V3OraclesIdResponsesGetResponses200ContentApplicationJsonSchemaAllof0.type.modelProperties,
      ...PaginatedResponse.type.modelProperties
    }
  }
};
export const PathsCgzmimV3StatsActiveAccountsGetResponses200ContentApplicationJsonSchema = {
  type: {
    name: "Composite",
    className: "PathsCgzmimV3StatsActiveAccountsGetResponses200ContentApplicationJsonSchema",
    modelProperties: {
      ...PathsFso5IiV3StatsActiveAccountsGetResponses200ContentApplicationJsonSchemaAllof0.type.modelProperties,
      ...PaginatedResponse.type.modelProperties
    }
  }
};
export const Paths1UxyhelV3StatsAex9TransfersGetResponses200ContentApplicationJsonSchema = {
  type: {
    name: "Composite",
    className: "Paths1UxyhelV3StatsAex9TransfersGetResponses200ContentApplicationJsonSchema",
    modelProperties: {
      ...Paths1Fl1Lh2V3StatsAex9TransfersGetResponses200ContentApplicationJsonSchemaAllof0.type.modelProperties,
      ...PaginatedResponse.type.modelProperties
    }
  }
};
export const Paths1Sxjoy0V3StatsBlocksGetResponses200ContentApplicationJsonSchema = {
  type: {
    name: "Composite",
    className: "Paths1Sxjoy0V3StatsBlocksGetResponses200ContentApplicationJsonSchema",
    modelProperties: {
      ...Paths1A27TirV3StatsBlocksGetResponses200ContentApplicationJsonSchemaAllof0.type.modelProperties,
      ...PaginatedResponse.type.modelProperties
    }
  }
};
export const PathsWbrhqnV3StatsContractsGetResponses200ContentApplicationJsonSchema = {
  type: {
    name: "Composite",
    className: "PathsWbrhqnV3StatsContractsGetResponses200ContentApplicationJsonSchema",
    modelProperties: {
      ...Paths72Dp44V3StatsContractsGetResponses200ContentApplicationJsonSchemaAllof0.type.modelProperties,
      ...PaginatedResponse.type.modelProperties
    }
  }
};
export const Paths5Xf9ScV3StatsDeltaGetResponses200ContentApplicationJsonSchema = {
  type: {
    name: "Composite",
    className: "Paths5Xf9ScV3StatsDeltaGetResponses200ContentApplicationJsonSchema",
    modelProperties: {
      ...Paths1J83O75V3StatsDeltaGetResponses200ContentApplicationJsonSchemaAllof0.type.modelProperties,
      ...PaginatedResponse.type.modelProperties
    }
  }
};
export const Paths1D7Up0DV3StatsDifficultyGetResponses200ContentApplicationJsonSchema = {
  type: {
    name: "Composite",
    className: "Paths1D7Up0DV3StatsDifficultyGetResponses200ContentApplicationJsonSchema",
    modelProperties: {
      ...Paths1Qw6KhfV3StatsDifficultyGetResponses200ContentApplicationJsonSchemaAllof0.type.modelProperties,
      ...PaginatedResponse.type.modelProperties
    }
  }
};
export const PathsR51VshV3StatsHashrateGetResponses200ContentApplicationJsonSchema = {
  type: {
    name: "Composite",
    className: "PathsR51VshV3StatsHashrateGetResponses200ContentApplicationJsonSchema",
    modelProperties: {
      ...Paths1IskjkV3StatsHashrateGetResponses200ContentApplicationJsonSchemaAllof0.type.modelProperties,
      ...PaginatedResponse.type.modelProperties
    }
  }
};
export const PathsA8Q6T7V3StatsMinersGetResponses200ContentApplicationJsonSchema = {
  type: {
    name: "Composite",
    className: "PathsA8Q6T7V3StatsMinersGetResponses200ContentApplicationJsonSchema",
    modelProperties: {
      ...Paths50Qhc7V3StatsMinersGetResponses200ContentApplicationJsonSchemaAllof0.type.modelProperties,
      ...PaginatedResponse.type.modelProperties
    }
  }
};
export const PathsCeyhpaV3StatsNamesGetResponses200ContentApplicationJsonSchema = {
  type: {
    name: "Composite",
    className: "PathsCeyhpaV3StatsNamesGetResponses200ContentApplicationJsonSchema",
    modelProperties: {
      ...PathsD92Xl6V3StatsNamesGetResponses200ContentApplicationJsonSchemaAllof0.type.modelProperties,
      ...PaginatedResponse.type.modelProperties
    }
  }
};
export const PathsJoz7P5V3StatsTotalGetResponses200ContentApplicationJsonSchema = {
  type: {
    name: "Composite",
    className: "PathsJoz7P5V3StatsTotalGetResponses200ContentApplicationJsonSchema",
    modelProperties: {
      ...Paths1K55ZdgV3StatsTotalGetResponses200ContentApplicationJsonSchemaAllof0.type.modelProperties,
      ...PaginatedResponse.type.modelProperties
    }
  }
};
export const Paths15F3FfuV3StatsTotalAccountsGetResponses200ContentApplicationJsonSchema = {
  type: {
    name: "Composite",
    className: "Paths15F3FfuV3StatsTotalAccountsGetResponses200ContentApplicationJsonSchema",
    modelProperties: {
      ...Paths3Bfys0V3StatsTotalAccountsGetResponses200ContentApplicationJsonSchemaAllof0.type.modelProperties,
      ...PaginatedResponse.type.modelProperties
    }
  }
};
export const Paths1IfhshmV3StatsTransactionsGetResponses200ContentApplicationJsonSchema = {
  type: {
    name: "Composite",
    className: "Paths1IfhshmV3StatsTransactionsGetResponses200ContentApplicationJsonSchema",
    modelProperties: {
      ...Paths6PaqluV3StatsTransactionsGetResponses200ContentApplicationJsonSchemaAllof0.type.modelProperties,
      ...PaginatedResponse.type.modelProperties
    }
  }
};
export const Paths1Pymq07V3TransactionsGetResponses200ContentApplicationJsonSchema = {
  type: {
    name: "Composite",
    className: "Paths1Pymq07V3TransactionsGetResponses200ContentApplicationJsonSchema",
    modelProperties: {
      ...PathsHa9C78V3TransactionsGetResponses200ContentApplicationJsonSchemaAllof0.type.modelProperties,
      ...PaginatedResponse.type.modelProperties
    }
  }
};
export const PathsUq0T7JV3TransactionsPendingGetResponses200ContentApplicationJsonSchema = {
  type: {
    name: "Composite",
    className: "PathsUq0T7JV3TransactionsPendingGetResponses200ContentApplicationJsonSchema",
    modelProperties: {
      ...PathsI72FylV3TransactionsPendingGetResponses200ContentApplicationJsonSchemaAllof0.type.modelProperties,
      ...PaginatedResponse.type.modelProperties
    }
  }
};
export const PathsA7P0KiV3TransfersGetResponses200ContentApplicationJsonSchema = {
  type: {
    name: "Composite",
    className: "PathsA7P0KiV3TransfersGetResponses200ContentApplicationJsonSchema",
    modelProperties: {
      ...PathsVdg67V3TransfersGetResponses200ContentApplicationJsonSchemaAllof0.type.modelProperties,
      ...PaginatedResponse.type.modelProperties
    }
  }
};
export const AuctionLastBidTx = {
  type: {
    name: "Composite",
    className: "AuctionLastBidTx",
    modelProperties: {
      ...NameClaimTx.type.modelProperties,
      ...Components17W16A5SchemasAuctionPropertiesLastBidPropertiesTxAllof1.type.modelProperties
    }
  }
};
export const KeyBlockExtended = {
  type: {
    name: "Composite",
    className: "KeyBlockExtended",
    modelProperties: {
      ...KeyBlock.type.modelProperties,
      beneficiaryReward: {
        serializedName: "beneficiary_reward",
        required: true,
        type: {
          name: "Number"
        }
      },
      flags: {
        constraints: {
          Pattern: new RegExp("^ba_\\w+$")
        },
        serializedName: "flags",
        required: true,
        type: {
          name: "String"
        }
      },
      microBlocksCount: {
        serializedName: "micro_blocks_count",
        required: true,
        type: {
          name: "Number"
        }
      },
      transactionsCount: {
        serializedName: "transactions_count",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};
export const MicroBlockExtended = {
  type: {
    name: "Composite",
    className: "MicroBlockExtended",
    modelProperties: {
      ...MicroBlockHeader.type.modelProperties,
      microBlockIndex: {
        serializedName: "micro_block_index",
        required: true,
        type: {
          name: "Number"
        }
      },
      transactionsCount: {
        serializedName: "transactions_count",
        required: true,
        type: {
          name: "Number"
        }
      },
      gas: {
        serializedName: "gas",
        required: true,
        type: {
          name: "Number"
        }
      },
      flags: {
        constraints: {
          Pattern: new RegExp("^ba_\\w+$")
        },
        serializedName: "flags",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};
export const NameTxTx = {
  type: {
    name: "Composite",
    className: "NameTxTx",
    modelProperties: {
      ...NameRevokeTx.type.modelProperties,
      ...Components171VsjiSchemasNametxPropertiesTxAllof1.type.modelProperties
    }
  }
};
export const OracleTxTx = {
  type: {
    name: "Composite",
    className: "OracleTxTx",
    modelProperties: {
      ...OracleRegisterTx.type.modelProperties,
      ...Components1Viuqa3SchemasOracletxPropertiesTxAllof1.type.modelProperties
    }
  }
};
export let discriminators = {
  "OffChainUpdate.OffChainUpdate": OffChainUpdate
};
//# sourceMappingURL=mappers.js.map