import { DryRunInput as DryRunInputMapper, EncodedTx as EncodedTxMapper } from "../models/mappers.js";
export const accept = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String"
    }
  }
};
export const $host = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};
export const pubkey = {
  parameterPath: "pubkey",
  mapper: {
    serializedName: "pubkey",
    required: true,
    type: {
      name: "String"
    }
  }
};
export const hash = {
  parameterPath: "hash",
  mapper: {
    serializedName: "hash",
    required: true,
    type: {
      name: "String"
    }
  }
};
export const height = {
  parameterPath: "height",
  mapper: {
    constraints: {
      InclusiveMaximum: 18446744073709552000,
      InclusiveMinimum: 0
    },
    serializedName: "height",
    required: true,
    type: {
      name: "Number"
    }
  }
};
export const strategy = {
  parameterPath: ["options", "strategy"],
  mapper: {
    defaultValue: "max",
    serializedName: "strategy",
    type: {
      name: "Enum",
      allowedValues: ["max", "continuity"]
    }
  }
};
export const name = {
  parameterPath: "name",
  mapper: {
    serializedName: "name",
    required: true,
    type: {
      name: "String"
    }
  }
};
export const contentType = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};
export const body = {
  parameterPath: "body",
  mapper: DryRunInputMapper
};
export const index = {
  parameterPath: "index",
  mapper: {
    constraints: {
      InclusiveMinimum: 1
    },
    serializedName: "index",
    required: true,
    type: {
      name: "Number"
    }
  }
};
export const nameHash = {
  parameterPath: "nameHash",
  mapper: {
    serializedName: "name_hash",
    required: true,
    type: {
      name: "String"
    }
  }
};
export const fromParam = {
  parameterPath: ["options", "from"],
  mapper: {
    serializedName: "from",
    type: {
      name: "String"
    }
  }
};
export const limit = {
  parameterPath: ["options", "limit"],
  mapper: {
    defaultValue: 20,
    constraints: {
      InclusiveMaximum: 1000,
      InclusiveMinimum: 1
    },
    serializedName: "limit",
    type: {
      name: "Number"
    }
  }
};
export const typeParam = {
  parameterPath: ["options", "type"],
  mapper: {
    defaultValue: "all",
    serializedName: "type",
    type: {
      name: "Enum",
      allowedValues: ["open", "closed", "all"]
    }
  }
};
export const queryId = {
  parameterPath: "queryId",
  mapper: {
    serializedName: "query-id",
    required: true,
    type: {
      name: "String"
    }
  }
};
export const body1 = {
  parameterPath: "body",
  mapper: EncodedTxMapper
};
//# sourceMappingURL=parameters.js.map