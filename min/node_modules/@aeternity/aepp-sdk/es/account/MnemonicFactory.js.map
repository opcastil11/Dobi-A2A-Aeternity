{"version":3,"file":"MnemonicFactory.js","names":["mnemonicToSeed","mnemonicToSeedSync","tweetnaclAuth","AccountBaseFactory","AccountMemory","encode","Encoding","decode","concatBuffers","ArgumentError","ED25519_CURVE","_Buffer","from","HARDENED_OFFSET","deriveKey","message","key","I","full","IL","slice","IR","secretKey","chainCode","derivePathFromKey","segments","reduce","segment","indexBuffer","allocUnsafe","writeUInt32BE","data","alloc","_mnemonicOrWalletOrSeed","WeakMap","_AccountMnemonicFactory_brand","WeakSet","AccountMnemonicFactory","constructor","mnemonicOrWalletOrSeed","_classPrivateMethodInitSpec","_classPrivateFieldInitSpec","_classPrivateFieldSet","getWallet","_assertClassBrand","_getWallet","call","getWalletSync","initialize","accountIndex","wallet","_getAccountByWallet","initializeSync","sync","setWalletBySeed","seed","masterKey","walletKey","Bytearray","_classPrivateFieldGet","ArrayBuffer","isView","length","then","raw","AccountSecretKey"],"sources":["../../src/account/MnemonicFactory.ts"],"sourcesContent":["import { mnemonicToSeed, mnemonicToSeedSync } from '@scure/bip39';\nimport tweetnaclAuth from 'tweetnacl-auth';\nimport AccountBaseFactory from './BaseFactory.js';\nimport AccountMemory from './Memory.js';\nimport { encode, Encoding, Encoded, decode } from '../utils/encoder.js';\nimport { concatBuffers } from '../utils/other.js';\nimport { ArgumentError } from '../utils/errors.js';\n\nexport const ED25519_CURVE = Buffer.from('ed25519 seed');\nconst HARDENED_OFFSET = 0x80000000;\n\ninterface KeyTreeNode {\n  secretKey: Uint8Array;\n  chainCode: Uint8Array;\n}\n\nexport function deriveKey(message: Uint8Array, key: Uint8Array): KeyTreeNode {\n  const I = tweetnaclAuth.full(message, key);\n  const IL = I.slice(0, 32);\n  const IR = I.slice(32);\n  return {\n    secretKey: IL,\n    chainCode: IR,\n  };\n}\n\nexport function derivePathFromKey(key: KeyTreeNode, segments: readonly number[]): KeyTreeNode {\n  return segments.reduce(({ secretKey, chainCode }, segment) => {\n    const indexBuffer = Buffer.allocUnsafe(4);\n    indexBuffer.writeUInt32BE(segment + HARDENED_OFFSET, 0);\n    const data = concatBuffers([Buffer.alloc(1, 0), secretKey, indexBuffer]);\n    return deriveKey(data, chainCode);\n  }, key);\n}\n\ninterface Wallet {\n  secretKey: Encoded.Bytearray;\n  chainCode: Encoded.Bytearray;\n}\n\n/**\n * A factory class that generates instances of AccountMemory based on provided mnemonic phrase.\n * @category account\n */\nexport default class AccountMnemonicFactory extends AccountBaseFactory {\n  #mnemonicOrWalletOrSeed: string | Wallet | Uint8Array;\n\n  /**\n   * @param mnemonicOrWalletOrSeed - BIP39-compatible mnemonic phrase or a wallet/seed derived from\n   * mnemonic\n   */\n  constructor(mnemonicOrWalletOrSeed: string | Wallet | Uint8Array) {\n    super();\n    this.#mnemonicOrWalletOrSeed = mnemonicOrWalletOrSeed;\n  }\n\n  #getWallet(sync: true): Wallet;\n  #getWallet(sync: false): Wallet | Promise<Wallet>;\n  #getWallet(sync: boolean): Wallet | Promise<Wallet> {\n    const setWalletBySeed = (seed: Uint8Array): Wallet => {\n      const masterKey = deriveKey(seed, ED25519_CURVE);\n      const walletKey = derivePathFromKey(masterKey, [44, 457]);\n      this.#mnemonicOrWalletOrSeed = {\n        secretKey: encode(walletKey.secretKey, Encoding.Bytearray),\n        chainCode: encode(walletKey.chainCode, Encoding.Bytearray),\n      };\n      return this.#mnemonicOrWalletOrSeed;\n    };\n\n    if (ArrayBuffer.isView(this.#mnemonicOrWalletOrSeed)) {\n      if (this.#mnemonicOrWalletOrSeed.length !== 64) {\n        throw new ArgumentError('seed length', 64, this.#mnemonicOrWalletOrSeed.length);\n      }\n      return setWalletBySeed(this.#mnemonicOrWalletOrSeed);\n    }\n    if (typeof this.#mnemonicOrWalletOrSeed === 'object') return this.#mnemonicOrWalletOrSeed;\n    return sync\n      ? setWalletBySeed(mnemonicToSeedSync(this.#mnemonicOrWalletOrSeed))\n      : mnemonicToSeed(this.#mnemonicOrWalletOrSeed).then(setWalletBySeed);\n  }\n\n  /**\n   * Get a wallet to initialize AccountMnemonicFactory instead mnemonic phrase.\n   * In comparison with mnemonic, the wallet can be used to derive aeternity accounts only.\n   */\n  async getWallet(): Promise<Wallet> {\n    return this.#getWallet(false);\n  }\n\n  /**\n   * The same as `getWallet` but synchronous.\n   */\n  getWalletSync(): Wallet {\n    return this.#getWallet(true);\n  }\n\n  #getAccountByWallet(accountIndex: number, wallet: Wallet): AccountMemory {\n    const walletKey = {\n      secretKey: decode(wallet.secretKey),\n      chainCode: decode(wallet.chainCode),\n    };\n    const raw = derivePathFromKey(walletKey, [accountIndex, 0, 0]).secretKey;\n    return new AccountMemory(encode(raw, Encoding.AccountSecretKey));\n  }\n\n  /**\n   * Get an instance of AccountMemory for a given account index.\n   * @param accountIndex - Index of account\n   */\n  async initialize(accountIndex: number): Promise<AccountMemory> {\n    const wallet = await this.getWallet();\n    return this.#getAccountByWallet(accountIndex, wallet);\n  }\n\n  /**\n   * The same as `initialize` but synchronous.\n   */\n  initializeSync(accountIndex: number): AccountMemory {\n    const wallet = this.getWalletSync();\n    return this.#getAccountByWallet(accountIndex, wallet);\n  }\n}\n"],"mappings":"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","ignoreList":[]}