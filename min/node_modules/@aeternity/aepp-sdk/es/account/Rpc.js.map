{"version":3,"file":"Rpc.js","names":["AccountBase","METHODS","ArgumentError","UnsupportedProtocolError","Encoding","decode","encode","AccountRpc","constructor","rpcClient","address","_rpcClient","sign","dataRaw","unsafeSign","data","_Buffer","from","Bytearray","signature","request","onAccount","signTransaction","tx","innerTx","networkId","res","returnSigned","signedTransaction","signMessage","message","signTypedData","aci","name","version","contractAddress","domain","signDelegation","delegation"],"sources":["../../src/account/Rpc.ts"],"sourcesContent":["import AccountBase from './Base.js';\nimport { METHODS } from '../aepp-wallet-communication/schema.js';\nimport { ArgumentError, UnsupportedProtocolError } from '../utils/errors.js';\nimport { Encoded, Encoding, decode, encode } from '../utils/encoder.js';\nimport RpcClient from '../aepp-wallet-communication/rpc/RpcClient.js';\nimport { AeppApi, WalletApi } from '../aepp-wallet-communication/rpc/types.js';\n\n/**\n * Account provided by wallet\n * @param params - Params\n * @param params.rpcClient - RpcClient instance\n * @param params.address - RPC account address\n * @returns AccountRpc instance\n * @category account\n */\nexport default class AccountRpc extends AccountBase {\n  _rpcClient: RpcClient<WalletApi, AeppApi>;\n\n  override readonly address: Encoded.AccountAddress;\n\n  constructor(rpcClient: RpcClient<WalletApi, AeppApi>, address: Encoded.AccountAddress) {\n    super();\n    this._rpcClient = rpcClient;\n    this.address = address;\n  }\n\n  /**\n   * @deprecated Use `unsafeSign` method instead\n   */\n  async sign(dataRaw: string | Uint8Array): Promise<Uint8Array> {\n    return this.unsafeSign(dataRaw);\n  }\n\n  async unsafeSign(dataRaw: string | Uint8Array): Promise<Uint8Array> {\n    const data = encode(Buffer.from(dataRaw), Encoding.Bytearray);\n    const { signature } = await this._rpcClient.request(METHODS.unsafeSign, {\n      onAccount: this.address,\n      data,\n    });\n    return decode(signature);\n  }\n\n  override async signTransaction(\n    tx: Encoded.Transaction,\n    { innerTx, networkId }: Parameters<AccountBase['signTransaction']>[1] = {},\n  ): Promise<Encoded.Transaction> {\n    if (networkId == null) throw new ArgumentError('networkId', 'provided', networkId);\n    const res = await this._rpcClient.request(METHODS.sign, {\n      onAccount: this.address,\n      tx,\n      returnSigned: true,\n      networkId,\n      innerTx,\n    });\n    if (res.signedTransaction == null) {\n      throw new UnsupportedProtocolError('signedTransaction is missed in wallet response');\n    }\n    return res.signedTransaction;\n  }\n\n  override async signMessage(message: string): Promise<Uint8Array> {\n    const { signature } = await this._rpcClient.request(METHODS.signMessage, {\n      onAccount: this.address,\n      message,\n    });\n    return Buffer.from(signature, 'hex');\n  }\n\n  override async signTypedData(\n    data: Encoded.ContractBytearray,\n    aci: Parameters<AccountBase['signTypedData']>[1],\n    { name, version, contractAddress, networkId }: Parameters<AccountBase['signTypedData']>[2] = {},\n  ): Promise<Encoded.Signature> {\n    const { signature } = await this._rpcClient.request(METHODS.signTypedData, {\n      onAccount: this.address,\n      domain: {\n        name,\n        version,\n        networkId,\n        contractAddress,\n      },\n      aci,\n      data,\n    });\n    return signature;\n  }\n\n  override async signDelegation(delegation: Encoded.Bytearray): Promise<Encoded.Signature> {\n    const { signature } = await this._rpcClient.request(METHODS.signDelegation, {\n      delegation,\n      onAccount: this.address,\n    });\n    return signature;\n  }\n}\n"],"mappings":"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","ignoreList":[]}