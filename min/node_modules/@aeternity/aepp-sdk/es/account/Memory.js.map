{"version":3,"file":"Memory.js","names":["nacl","AccountBase","hash","hashMessage","messagePrefixLength","ArgumentError","decode","encode","Encoding","concatBuffers","hashTypedData","buildTx","Tag","getBufferToSign","transaction","networkId","innerTx","prefixes","push","rlpBinaryTx","_Buffer","from","join","_secretKeyDecoded","WeakMap","AccountMemory","constructor","secretKey","_classPrivateFieldInitSpec","keyPair","sign","fromSeed","_classPrivateFieldSet","address","publicKey","AccountAddress","generate","randomBytes","AccountSecretKey","data","options","unsafeSign","detached","_classPrivateFieldGet","signTransaction","txWithNetworkId","signatures","tag","SignedTx","encodedTx","signMessage","message","signTypedData","aci","name","version","contractAddress","dHash","signature","Signature","signDelegation","delegation","payload","Uint8Array"],"sources":["../../src/account/Memory.ts"],"sourcesContent":["import nacl from 'tweetnacl';\nimport AccountBase from './Base.js';\nimport { hash, hashMessage, messagePrefixLength } from '../utils/crypto.js';\nimport { ArgumentError } from '../utils/errors.js';\nimport { decode, encode, Encoded, Encoding } from '../utils/encoder.js';\nimport { concatBuffers } from '../utils/other.js';\nimport { hashTypedData, AciValue } from '../utils/typed-data.js';\nimport { buildTx } from '../tx/builder/index.js';\nimport { Tag } from '../tx/builder/constants.js';\n\nexport function getBufferToSign(\n  transaction: Encoded.Transaction,\n  networkId: string,\n  innerTx: boolean,\n): Uint8Array {\n  const prefixes = [networkId];\n  if (innerTx) prefixes.push('inner_tx');\n  const rlpBinaryTx = decode(transaction);\n  return concatBuffers([Buffer.from(prefixes.join('-')), hash(rlpBinaryTx)]);\n}\n\n/**\n * In-memory account class\n * @category account\n */\nexport default class AccountMemory extends AccountBase {\n  override readonly address: Encoded.AccountAddress;\n\n  readonly #secretKeyDecoded: Uint8Array;\n\n  /**\n   * @param secretKey - Secret key\n   */\n  constructor(public readonly secretKey: Encoded.AccountSecretKey) {\n    super();\n    const keyPair = nacl.sign.keyPair.fromSeed(decode(secretKey));\n    this.#secretKeyDecoded = keyPair.secretKey;\n    this.address = encode(keyPair.publicKey, Encoding.AccountAddress);\n  }\n\n  /**\n   * Generates a new AccountMemory using a random secret key\n   */\n  static generate(): AccountMemory {\n    const secretKey = encode(nacl.randomBytes(32), Encoding.AccountSecretKey);\n    return new AccountMemory(secretKey);\n  }\n\n  /**\n   * @deprecated Use `unsafeSign` method instead\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  override async sign(data: string | Uint8Array, options?: any): Promise<Uint8Array> {\n    return this.unsafeSign(data, options);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  override async unsafeSign(data: string | Uint8Array, options?: any): Promise<Uint8Array> {\n    return nacl.sign.detached(Buffer.from(data), this.#secretKeyDecoded);\n  }\n\n  override async signTransaction(\n    transaction: Encoded.Transaction,\n    { innerTx, networkId, ...options }: { innerTx?: boolean; networkId?: string } = {},\n  ): Promise<Encoded.Transaction> {\n    if (networkId == null) {\n      throw new ArgumentError('networkId', 'provided', networkId);\n    }\n    const rlpBinaryTx = decode(transaction);\n    const txWithNetworkId = getBufferToSign(transaction, networkId, innerTx === true);\n\n    const signatures = [await this.unsafeSign(txWithNetworkId, options)];\n    return buildTx({ tag: Tag.SignedTx, encodedTx: rlpBinaryTx, signatures });\n  }\n\n  override async signMessage(message: string, options?: any): Promise<Uint8Array> {\n    return this.unsafeSign(hashMessage(message), options);\n  }\n\n  override async signTypedData(\n    data: Encoded.ContractBytearray,\n    aci: AciValue,\n    {\n      name,\n      version,\n      networkId,\n      contractAddress,\n      ...options\n    }: Parameters<AccountBase['signTypedData']>[2] = {},\n  ): Promise<Encoded.Signature> {\n    const dHash = hashTypedData(data, aci, {\n      name,\n      version,\n      networkId,\n      contractAddress,\n    });\n    const signature = await this.unsafeSign(dHash, options);\n    return encode(signature, Encoding.Signature);\n  }\n\n  override async signDelegation(\n    delegation: Encoded.Bytearray,\n    { networkId }: { networkId?: string } = {},\n  ): Promise<Encoded.Signature> {\n    if (networkId == null) throw new ArgumentError('networkId', 'provided', networkId);\n    const payload = concatBuffers([\n      messagePrefixLength,\n      new Uint8Array([1]),\n      Buffer.from(networkId),\n      decode(delegation),\n    ]);\n    const signature = await this.unsafeSign(payload);\n    return encode(signature, Encoding.Signature);\n  }\n}\n"],"mappings":"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","ignoreList":[]}