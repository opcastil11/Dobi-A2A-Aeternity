{"version":3,"file":"LedgerFactory.js","names":["AccountLedger","CLA","GET_ADDRESS","GET_APP_CONFIGURATION","UnsupportedVersionError","semverSatisfies","AccountBaseFactory","_ensureReadyPromise","WeakMap","_AccountLedgerFactory_brand","WeakSet","AccountLedgerFactory","constructor","transport","_classPrivateMethodInitSpec","_classPrivateFieldInitSpec","_defineProperty","decorateAppAPIMethods","ensureReady","version","_assertClassBrand","_getAppConfiguration","call","oldApp","newApp","_enableExperimentalLedgerAppSupport","_classPrivateFieldSet","Promise","resolve","getAppConfiguration","getAddress","accountIndex","verify","_ensureReady","buffer","_Buffer","alloc","writeUInt32BE","response","send","addressLength","subarray","toString","initialize","_classPrivateFieldGet2","_classPrivateFieldGet","length","join"],"sources":["../../src/account/LedgerFactory.ts"],"sourcesContent":["import type Transport from '@ledgerhq/hw-transport';\nimport AccountLedger, { CLA, GET_ADDRESS, GET_APP_CONFIGURATION } from './Ledger.js';\nimport { UnsupportedVersionError } from '../utils/errors.js';\nimport { Encoded } from '../utils/encoder.js';\nimport semverSatisfies from '../utils/semver-satisfies.js';\nimport AccountBaseFactory from './BaseFactory.js';\n\ninterface AppConfiguration {\n  version: string;\n}\n\n/**\n * A factory class that generates instances of AccountLedger based on provided transport.\n * @category account\n */\nexport default class AccountLedgerFactory extends AccountBaseFactory {\n  /**\n   * @param transport - Connection to Ledger to use\n   */\n  constructor(readonly transport: Transport) {\n    super();\n    transport.decorateAppAPIMethods(this, ['getAddress', 'getAppConfiguration'], 'w0w');\n  }\n\n  #ensureReadyPromise?: Promise<void>;\n\n  // TODO: remove after release Ledger app v1.0.0\n  _enableExperimentalLedgerAppSupport = false;\n\n  /**\n   * It throws an exception if Aeternity app on Ledger has an incompatible version, not opened or\n   * not installed.\n   */\n  async ensureReady(): Promise<void> {\n    const { version } = await this.#getAppConfiguration();\n    const oldApp = [version, '0.4.4', '0.5.0'] as const;\n    const newApp = [version, '1.0.0', '2.0.0'] as const;\n    if (\n      !semverSatisfies(...oldApp) &&\n      (!this._enableExperimentalLedgerAppSupport || !semverSatisfies(...newApp))\n    )\n      throw new UnsupportedVersionError('Aeternity app on Ledger', ...oldApp);\n    this.#ensureReadyPromise = Promise.resolve();\n  }\n\n  async #ensureReady(): Promise<void> {\n    this.#ensureReadyPromise ??= this.ensureReady();\n    return this.#ensureReadyPromise;\n  }\n\n  async #getAppConfiguration(): Promise<AppConfiguration> {\n    let response = await this.transport.send(CLA, GET_APP_CONFIGURATION, 0x00, 0x00);\n    if (response.length === 6) response = response.subarray(1);\n    return {\n      version: [response[0], response[1], response[2]].join('.'),\n    };\n  }\n\n  /**\n   * @returns the version of Aeternity app installed on Ledger wallet\n   */\n  async getAppConfiguration(): Promise<AppConfiguration> {\n    return this.#getAppConfiguration();\n  }\n\n  /**\n   * Get `ak_`-prefixed address for a given account index.\n   * @param accountIndex - Index of account\n   * @param verify - Ask user to confirm address by showing it on the device screen\n   */\n  async getAddress(accountIndex: number, verify = false): Promise<Encoded.AccountAddress> {\n    await this.#ensureReady();\n    const buffer = Buffer.alloc(4);\n    buffer.writeUInt32BE(accountIndex, 0);\n    const response = await this.transport.send(\n      CLA,\n      GET_ADDRESS,\n      verify ? 0x01 : 0x00,\n      0x00,\n      buffer,\n    );\n    const addressLength = response[0];\n    return response.subarray(1, 1 + addressLength).toString('ascii') as Encoded.AccountAddress;\n  }\n\n  /**\n   * Get an instance of AccountLedger for a given account index.\n   * @param accountIndex - Index of account\n   */\n  async initialize(accountIndex: number): Promise<AccountLedger> {\n    return new AccountLedger(this.transport, accountIndex, await this.getAddress(accountIndex));\n  }\n}\n"],"mappings":"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","ignoreList":[]}