{"version":3,"file":"MetamaskFactory.js","names":["InternalError","UnsupportedPlatformError","UnsupportedVersionError","semverSatisfies","AccountBaseFactory","AccountMetamask","invokeSnap","snapId","snapMinVersion","snapMaxVersion","metamaskVersionPrefix","_provider","WeakMap","_AccountMetamaskFactory_brand","WeakSet","_providerPromise","AccountMetamaskFactory","provider","_classPrivateFieldGet","constructor","_classPrivateMethodInitSpec","_classPrivateFieldInitSpec","_classPrivateFieldSet","window","installSnap","_assertClassBrand","_getProvider","call","details","request","method","params","version","requestSnap","ensureReady","snapVersion","getSnapVersion","args","snaps","initialize","accountIndex","address","derivationPath","_getMetamaskAsInjected","ethereum","startsWith","_getMetamaskOverEip","setTimeout","dispatchEvent","Event","Promise","resolve","handler","event","detail","info","rdns","removeEventListener","addEventListener","undefined","_classPrivateFieldGet2","_classPrivateFieldGet3","_await$_assertClassBr","slice","length"],"sources":["../../src/account/MetamaskFactory.ts"],"sourcesContent":["import type { BaseProvider } from '@metamask/providers';\nimport {\n  InternalError,\n  UnsupportedPlatformError,\n  UnsupportedVersionError,\n} from '../utils/errors.js';\nimport { Encoded } from '../utils/encoder.js';\nimport semverSatisfies from '../utils/semver-satisfies.js';\nimport AccountBaseFactory from './BaseFactory.js';\nimport AccountMetamask, { invokeSnap, snapId } from './Metamask.js';\n\nconst snapMinVersion = '0.0.9';\nconst snapMaxVersion = '0.1.0';\nconst metamaskVersionPrefix = 'MetaMask/v';\n\ninterface SnapDetails {\n  blocked: boolean;\n  enabled: boolean;\n  id: typeof snapId;\n  version: string;\n  initialPermissions: Record<string, unknown>;\n}\n\n/**\n * A factory class that generates instances of AccountMetamask.\n * @see {@link https://www.npmjs.com/package/@aeternity-snap/plugin | Aeternity snap}\n * @category account\n */\nexport default class AccountMetamaskFactory extends AccountBaseFactory {\n  // TODO: remove after removing `provider`\n  #provider: BaseProvider | undefined;\n\n  /**\n   * @deprecated this class is not intended to provide raw access to the provider\n   */\n  get provider(): BaseProvider {\n    if (this.#provider == null) throw new UnsupportedPlatformError('Metamask is not detected yet');\n    return this.#provider;\n  }\n\n  async #getMetamaskAsInjected(): Promise<BaseProvider | undefined> {\n    if (!('ethereum' in window) || window.ethereum == null) return;\n    const provider = window.ethereum as BaseProvider;\n    const version = await provider.request<string>({ method: 'web3_clientVersion' });\n    if (version == null) throw new InternalError(\"Can't get Ethereum Provider version\");\n    if (!version.startsWith(metamaskVersionPrefix)) return;\n    return provider;\n  }\n\n  async #getMetamaskOverEip6963(): Promise<BaseProvider | undefined> {\n    setTimeout(() => window.dispatchEvent(new Event('eip6963:requestProvider')));\n    return new Promise<BaseProvider | undefined>((resolve) => {\n      const handler = (\n        event: CustomEvent<{ info: { rdns: string }; provider: BaseProvider }>,\n      ): void => {\n        if (event.detail.info.rdns !== 'io.metamask') return;\n        window.removeEventListener('eip6963:announceProvider', handler);\n        resolve(event.detail.provider);\n      };\n      window.addEventListener('eip6963:announceProvider', handler);\n      setTimeout(() => {\n        window.removeEventListener('eip6963:announceProvider', handler);\n        resolve(undefined);\n      }, 500);\n    });\n  }\n\n  #providerPromise: Promise<BaseProvider> | undefined;\n\n  async #getProvider(): Promise<BaseProvider> {\n    this.#providerPromise ??= (async () => {\n      this.#provider ??=\n        (await this.#getMetamaskAsInjected()) ?? (await this.#getMetamaskOverEip6963());\n      if (this.#provider == null) {\n        throw new UnsupportedPlatformError(\n          \"Can't find a Metamask extension as an injected provider and over EIP-6963. Ensure that Metamask is installed or setup a provider.\",\n        );\n      }\n      const version = await this.#provider.request<string>({ method: 'web3_clientVersion' });\n      if (version == null) throw new InternalError(\"Can't get Ethereum Provider version\");\n      const args = [version.slice(metamaskVersionPrefix.length), '12.2.4'] as const;\n      if (!semverSatisfies(...args)) throw new UnsupportedVersionError('Metamask', ...args);\n      return this.#provider;\n    })();\n    return this.#providerPromise;\n  }\n\n  /**\n   * @param provider - Connection to MetaMask to use\n   */\n  constructor(provider?: BaseProvider) {\n    super();\n    this.#provider = provider;\n    if (this.#provider == null && window == null) {\n      throw new UnsupportedPlatformError(\n        'Window object not found, you can run AccountMetamaskFactory only in browser or setup a provider',\n      );\n    }\n  }\n\n  /**\n   * Request MetaMask to install Aeternity snap.\n   * @deprecated use `requestSnap` instead\n   */\n  async installSnap(): Promise<SnapDetails> {\n    const provider = await this.#getProvider();\n    const details = (await provider.request({\n      method: 'wallet_requestSnaps',\n      params: { [snapId]: { version: snapMinVersion } },\n    })) as { [key in typeof snapId]: SnapDetails };\n    return details[snapId];\n  }\n\n  /**\n   * Request MetaMask to install Aeternity snap or connect it to the current aepp.\n   * MetaMask can have only one Aeternity snap version installed at a time.\n   * This method is intended to upgrade the snap to a specified version if needed by the aepp.\n   * If Aeternity snap is installed but wasn't used by the aepp, then the user still needs to approve the connection.\n   * If the currently installed version corresponds to the version range, then the snap won't be upgraded.\n   * To downgrade the snap, the user must manually uninstall the current version.\n   * @param version - Snap version range (e.g. `1`, `0.1.*`, `^0.0.9`, `~0.0.9`; `>=0.0.9 <0.1.0`)\n   * (default: a version range supported by sdk)\n   */\n  async requestSnap(version = `>=${snapMinVersion} <${snapMaxVersion}`): Promise<SnapDetails> {\n    const provider = await this.#getProvider();\n    const details = (await provider.request({\n      method: 'wallet_requestSnaps',\n      params: { [snapId]: { version } },\n    })) as { [key in typeof snapId]: SnapDetails };\n    return details[snapId];\n  }\n\n  /**\n   * It throws an exception if MetaMask or Aeternity snap has an incompatible version or is not\n   * installed or is not connected to the aepp.\n   * @deprecated use `requestSnap` instead\n   */\n  async ensureReady(): Promise<void> {\n    const snapVersion = await this.getSnapVersion();\n    const args = [snapVersion, snapMinVersion, snapMaxVersion] as const;\n    if (!semverSatisfies(...args))\n      throw new UnsupportedVersionError('Aeternity snap in MetaMask', ...args);\n  }\n\n  /**\n   * @returns the version of snap installed in MetaMask\n   */\n  async getSnapVersion(): Promise<string> {\n    const provider = await this.#getProvider();\n    const snaps = (await provider.request({ method: 'wallet_getSnaps' })) as Record<\n      string,\n      { version: string }\n    >;\n    const version = snaps[snapId]?.version;\n    if (version == null)\n      throw new UnsupportedPlatformError(\n        'Aeternity snap is not installed to MetaMask or not connected to this aepp',\n      );\n    return version;\n  }\n\n  /**\n   * Get an instance of AccountMetaMask for a given account index.\n   * @param accountIndex - Index of account\n   */\n  async initialize(accountIndex: number): Promise<AccountMetamask> {\n    await this.requestSnap();\n    const provider = await this.#getProvider();\n    const address = await invokeSnap<Encoded.AccountAddress>(\n      provider,\n      'getPublicKey',\n      { derivationPath: [`${accountIndex}'`, \"0'\", \"0'\"] },\n      'publicKey',\n    );\n    return new AccountMetamask(provider, accountIndex, address);\n  }\n}\n"],"mappings":"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","ignoreList":[]}