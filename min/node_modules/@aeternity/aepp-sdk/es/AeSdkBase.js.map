{"version":3,"file":"AeSdkBase.js","names":["CompilerError","DuplicateNodeError","NodeNotFoundError","NotImplementedError","TypeError","wrapWithProxy","AeSdkMethods","_wrappedOptions","WeakMap","AeSdkBase","constructor","nodes","options","_defineProperty","Map","_classPrivateFieldInitSpec","forEach","name","instance","i","addNode","_classPrivateFieldSet","onNode","api","onCompiler","compilerApi","onAccount","_resolveAccount","_options","ensureNodeConnected","pool","get","selectedNodeName","node","select","has","set","selectNode","isNodeConnected","getNodeInfo","getNodesInPool","Promise","all","Array","from","entries","map","addresses","account","String","address","sign","data","unsafeSign","signTransaction","tx","networkId","getNetworkId","undefined","signMessage","message","signTypedData","aci","signDelegation","delegation","_options$networkId","getContext","mergeWith","_classPrivateFieldGet"],"sources":["../src/AeSdkBase.ts"],"sourcesContent":["import Node from './Node.js';\nimport AccountBase from './account/Base.js';\nimport {\n  CompilerError,\n  DuplicateNodeError,\n  NodeNotFoundError,\n  NotImplementedError,\n  TypeError,\n} from './utils/errors.js';\nimport { Encoded } from './utils/encoder.js';\nimport { wrapWithProxy } from './utils/wrap-proxy.js';\nimport CompilerBase from './contract/compiler/Base.js';\nimport AeSdkMethods, { OnAccount, AeSdkMethodsOptions, WrappedOptions } from './AeSdkMethods.js';\n\ntype NodeInfo = Awaited<ReturnType<Node['getNodeInfo']>> & { name: string };\n\n/**\n * Basic AeSdk class implements:\n * - node selector,\n * - integrated compiler support,\n * - wrappers of account methods mapped to the current account.\n */\nexport default class AeSdkBase extends AeSdkMethods {\n  pool: Map<string, Node> = new Map();\n\n  selectedNodeName?: string;\n\n  readonly #wrappedOptions: WrappedOptions;\n\n  /**\n   * @param options - Options\n   * @param options.nodes - Array of nodes\n   */\n  constructor({\n    nodes = [],\n    ...options\n  }: AeSdkMethodsOptions & {\n    nodes?: Array<{ name: string; instance: Node }>;\n  } = {}) {\n    super(options);\n\n    nodes.forEach(({ name, instance }, i) => this.addNode(name, instance, i === 0));\n\n    this.#wrappedOptions = {\n      onNode: wrapWithProxy(() => this.api),\n      onCompiler: wrapWithProxy(() => this.compilerApi),\n      onAccount: wrapWithProxy(() => this._resolveAccount()),\n    };\n  }\n\n  // TODO: consider dropping this getter, because:\n  // compiler is not intended to be used separately any more (functionality limited to sdk needs)\n  // and user creates its instance by himself\n  get compilerApi(): CompilerBase {\n    if (this._options.onCompiler == null) {\n      throw new CompilerError(\"You can't use Compiler API. Compiler is not ready!\");\n    }\n    return this._options.onCompiler;\n  }\n\n  get api(): Node {\n    this.ensureNodeConnected();\n    return this.pool.get(this.selectedNodeName) as Node;\n  }\n\n  /**\n   * Add Node\n   * @param name - Node name\n   * @param node - Node instance\n   * @param select - Select this node as current\n   * @example\n   * ```js\n   * // add and select new node with name 'testNode'\n   * aeSdkBase.addNode('testNode', new Node({ url }), true)\n   * ```\n   */\n  addNode(name: string, node: Node, select = false): void {\n    if (this.pool.has(name)) throw new DuplicateNodeError(name);\n\n    this.pool.set(name, node);\n    if (select || this.selectedNodeName == null) {\n      this.selectNode(name);\n    }\n  }\n\n  /**\n   * Select Node\n   * @param name - Node name\n   * @example\n   * nodePool.selectNode('testNode')\n   */\n  selectNode(name: string): void {\n    if (!this.pool.has(name)) throw new NodeNotFoundError(`Node with name ${name} not in pool`);\n    this.selectedNodeName = name;\n  }\n\n  /**\n   * Check if you have selected node\n   * @example\n   * nodePool.isNodeConnected()\n   */\n  isNodeConnected(): this is AeSdkBase & { selectedNodeName: string } {\n    return this.selectedNodeName != null;\n  }\n\n  protected ensureNodeConnected(): asserts this is AeSdkBase & { selectedNodeName: string } {\n    if (!this.isNodeConnected()) {\n      throw new NodeNotFoundError(\"You can't use Node API. Node is not connected or not defined!\");\n    }\n  }\n\n  /**\n   * Get information about node\n   * @example\n   * ```js\n   * nodePool.getNodeInfo() // { name, version, networkId, protocol, ... }\n   * ```\n   */\n  async getNodeInfo(): Promise<NodeInfo> {\n    this.ensureNodeConnected();\n    return {\n      name: this.selectedNodeName,\n      ...(await this.api.getNodeInfo()),\n    };\n  }\n\n  /**\n   * Get array of available nodes\n   * @example\n   * nodePool.getNodesInPool()\n   */\n  async getNodesInPool(): Promise<NodeInfo[]> {\n    return Promise.all(\n      Array.from(this.pool.entries()).map(async ([name, node]) => ({\n        name,\n        ...(await node.getNodeInfo()),\n      })),\n    );\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  addresses(): Encoded.AccountAddress[] {\n    return [];\n  }\n\n  /**\n   * Resolves an account\n   * @param account - ak-address, instance of AccountBase, or keypair\n   */\n  _resolveAccount(account: OnAccount = this._options.onAccount): AccountBase {\n    if (typeof account === 'string') throw new NotImplementedError('Address in AccountResolver');\n    if (typeof account === 'object') return account;\n    throw new TypeError(\n      'Account should be an address (ak-prefixed string), ' +\n        `or instance of AccountBase, got ${String(account)} instead`,\n    );\n  }\n\n  get address(): Encoded.AccountAddress {\n    return this._resolveAccount().address;\n  }\n\n  /**\n   * Sign data blob\n   * @param data - Data to sign\n   * @param options - Options\n   * @deprecated Use `unsafeSign` method instead\n   */\n  async sign(\n    data: string | Uint8Array,\n    options: { onAccount?: OnAccount } = {},\n  ): Promise<Uint8Array> {\n    return this.unsafeSign(data, options);\n  }\n\n  /**\n   * Sign data blob\n   * @param data - Data to sign\n   * @param options - Options\n   */\n  async unsafeSign(\n    data: string | Uint8Array,\n    { onAccount, ...options }: { onAccount?: OnAccount } = {},\n  ): Promise<Uint8Array> {\n    return this._resolveAccount(onAccount).unsafeSign(data, options);\n  }\n\n  /**\n   * Sign encoded transaction\n   * @param tx - Transaction to sign\n   * @param options - Options\n   */\n  async signTransaction(\n    tx: Encoded.Transaction,\n    {\n      onAccount,\n      ...options\n    }: { onAccount?: OnAccount } & Parameters<AccountBase['signTransaction']>[1] = {},\n  ): Promise<Encoded.Transaction> {\n    const networkId = this.selectedNodeName !== null ? await this.api.getNetworkId() : undefined;\n    return this._resolveAccount(onAccount).signTransaction(tx, { networkId, ...options });\n  }\n\n  /**\n   * Sign message\n   * @param message - Message to sign\n   * @param options - Options\n   */\n  async signMessage(\n    message: string,\n    {\n      onAccount,\n      ...options\n    }: { onAccount?: OnAccount } & Parameters<AccountBase['signMessage']>[1] = {},\n  ): Promise<Uint8Array> {\n    return this._resolveAccount(onAccount).signMessage(message, options);\n  }\n\n  /**\n   * Sign typed data\n   * @param data - Encoded data to sign\n   * @param aci - Type of data to sign\n   * @param options - Options\n   */\n  async signTypedData(\n    data: Encoded.ContractBytearray,\n    aci: Parameters<AccountBase['signTypedData']>[1],\n    {\n      onAccount,\n      ...options\n    }: { onAccount?: OnAccount } & Parameters<AccountBase['signTypedData']>[2] = {},\n  ): Promise<Encoded.Signature> {\n    return this._resolveAccount(onAccount).signTypedData(data, aci, options);\n  }\n\n  /**\n   * Sign delegation, works only in Ceres\n   * @param delegation - Delegation to sign\n   * @param options - Options\n   */\n  async signDelegation(\n    delegation: Encoded.Bytearray,\n    {\n      onAccount,\n      ...options\n    }: { onAccount?: OnAccount } & Parameters<AccountBase['signDelegation']>[1] = {},\n  ): Promise<Encoded.Signature> {\n    options.networkId ??=\n      this.selectedNodeName !== null ? await this.api.getNetworkId() : undefined;\n    return this._resolveAccount(onAccount).signDelegation(delegation, options);\n  }\n\n  /**\n   * The same as AeSdkMethods:getContext, but it would resolve ak_-prefixed address in\n   * `mergeWith.onAccount` to AccountBase.\n   */\n  override getContext(mergeWith: AeSdkMethodsOptions = {}): AeSdkMethodsOptions & WrappedOptions {\n    return {\n      ...this._options,\n      ...this.#wrappedOptions,\n      ...mergeWith,\n      ...(mergeWith.onAccount != null && {\n        onAccount: this._resolveAccount(mergeWith.onAccount),\n      }),\n    };\n  }\n}\n"],"mappings":"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","ignoreList":[]}