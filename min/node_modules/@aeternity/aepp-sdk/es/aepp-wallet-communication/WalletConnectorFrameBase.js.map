{"version":3,"file":"WalletConnectorFrameBase.js","names":["EventEmitter","AccountRpc","RPC_VERSION","RpcClient","METHODS","NoWalletConnectedError","_rpcClient","WeakMap","_WalletConnectorFrameBase_brand","WeakSet","_accounts","WalletConnectorFrameBase","isConnected","_classPrivateFieldGet","accounts","constructor","_classPrivateMethodInitSpec","_classPrivateFieldInitSpec","_connect","name","connection","connector","connectNode","disconnectParams","client","_classPrivateFieldSet","undefined","emit","updateAddress","_assertClassBrand","_updateAccounts","bind","updateNetwork","_updateNetwork","closeConnection","params","disconnect","readyToConnect","walletInfo","request","connect","version","_getRpcClient","call","notify","reason","getAccounts","addresses","address","map","subscribeAccounts","type","value","result","subscribeAddress","askToSelectNetwork","network","Set","Object","keys","current","connected"],"sources":["../../src/aepp-wallet-communication/WalletConnectorFrameBase.ts"],"sourcesContent":["import { EventEmitter } from 'eventemitter3';\nimport AccountRpc from '../account/Rpc.js';\nimport { Encoded } from '../utils/encoder.js';\nimport {\n  Accounts,\n  RPC_VERSION,\n  Network,\n  WalletApi,\n  AeppApi,\n  NetworkToSelect,\n} from './rpc/types.js';\nimport RpcClient from './rpc/RpcClient.js';\nimport { METHODS, SUBSCRIPTION_TYPES } from './schema.js';\nimport { NoWalletConnectedError } from '../utils/errors.js';\nimport BrowserConnection from './connection/Browser.js';\n\ninterface EventsBase {\n  accountsChange: (accounts: AccountRpc[]) => void;\n  disconnect: (p: any) => void;\n}\n\nexport default abstract class WalletConnectorFrameBase<T extends {}> extends EventEmitter<\n  EventsBase | T\n> {\n  #rpcClient?: RpcClient<WalletApi, AeppApi>;\n\n  #getRpcClient(): RpcClient<WalletApi, AeppApi> {\n    if (this.#rpcClient == null)\n      throw new NoWalletConnectedError('You are not connected to Wallet');\n    return this.#rpcClient;\n  }\n\n  /**\n   * Is connected to wallet\n   */\n  get isConnected(): boolean {\n    return this.#rpcClient != null;\n  }\n\n  #accounts: AccountRpc[] = [];\n\n  /**\n   * Accounts provided by wallet over subscription\n   */\n  get accounts(): AccountRpc[] {\n    return this.#accounts;\n  }\n\n  protected constructor() {\n    super();\n  }\n\n  protected abstract _updateNetwork(params: Network): void;\n\n  #updateAccounts(params: Accounts): void {\n    const addresses = [\n      ...new Set([...Object.keys(params.current), ...Object.keys(params.connected)]),\n    ] as Encoded.AccountAddress[];\n    this.#accounts = addresses.map((address) => new AccountRpc(this.#getRpcClient(), address));\n    this.emit('accountsChange', this.#accounts);\n  }\n\n  static async _connect(\n    name: string,\n    connection: BrowserConnection,\n    connector: WalletConnectorFrameBase<any>,\n    connectNode: boolean,\n  ): Promise<void> {\n    let disconnectParams: any;\n\n    const client = new RpcClient<WalletApi, AeppApi>(\n      connection,\n      () => {\n        connector.#rpcClient = undefined;\n        connector.#accounts = [];\n        connector.emit('disconnect', disconnectParams);\n      },\n      {\n        [METHODS.updateAddress]: connector.#updateAccounts.bind(connector),\n        [METHODS.updateNetwork]: connector._updateNetwork.bind(connector),\n        [METHODS.closeConnection]: (params) => {\n          disconnectParams = params;\n          client.connection.disconnect();\n        },\n        [METHODS.readyToConnect]: () => {},\n      },\n    );\n    connector.#rpcClient = client;\n    const walletInfo = await connector.#rpcClient.request(METHODS.connect, {\n      name,\n      version: RPC_VERSION,\n      connectNode,\n    });\n    connector._updateNetwork(walletInfo);\n  }\n\n  /**\n   * Disconnect from wallet\n   */\n  disconnect(): void {\n    const client = this.#getRpcClient();\n    client.notify(METHODS.closeConnection, { reason: 'bye' });\n    client.connection.disconnect();\n  }\n\n  /**\n   * Request accounts from wallet\n   */\n  async getAccounts(): Promise<AccountRpc[]> {\n    const client = this.#getRpcClient();\n    const addresses = await client.request(METHODS.address, undefined);\n    return addresses.map((address) => new AccountRpc(client, address));\n  }\n\n  /**\n   * Subscribe for wallet accounts, get account updates adding handler to `accountsChange` event\n   * @param type - Subscription type\n   * @param value - Should be one of 'current' (the selected account), 'connected' (all)\n   * @returns Accounts from wallet\n   */\n  async subscribeAccounts(\n    type: SUBSCRIPTION_TYPES,\n    value: 'current' | 'connected',\n  ): Promise<AccountRpc[]> {\n    const result = await this.#getRpcClient().request(METHODS.subscribeAddress, { type, value });\n    this.#updateAccounts(result.address);\n    return this.#accounts;\n  }\n\n  /**\n   * Ask wallet to select a network\n   */\n  async askToSelectNetwork(network: NetworkToSelect): Promise<void> {\n    await this.#getRpcClient().request(METHODS.updateNetwork, network);\n  }\n}\n"],"mappings":"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","ignoreList":[]}