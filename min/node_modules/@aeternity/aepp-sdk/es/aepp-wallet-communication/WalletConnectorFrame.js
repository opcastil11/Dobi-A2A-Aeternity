function _classPrivateFieldInitSpec(e, t, a) { _checkPrivateRedeclaration(e, t), t.set(e, a); }
function _checkPrivateRedeclaration(e, t) { if (t.has(e)) throw new TypeError("Cannot initialize the same private elements twice on an object"); }
function _classPrivateFieldSet(s, a, r) { return s.set(_assertClassBrand(s, a), r), r; }
function _classPrivateFieldGet(s, a) { return s.get(_assertClassBrand(s, a)); }
function _assertClassBrand(e, t, n) { if ("function" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError("Private element is not present on this object"); }
import WalletConnectorFrameBase from './WalletConnectorFrameBase.js';
var _networkId = /*#__PURE__*/new WeakMap();
/**
 * Connect to wallet as iframe/web-extension
 * @category aepp wallet communication
 */
export default class WalletConnectorFrame extends WalletConnectorFrameBase {
  constructor(...args) {
    super(...args);
    _classPrivateFieldInitSpec(this, _networkId, '');
  }
  /**
   * The last network id reported by wallet
   */
  get networkId() {
    return _classPrivateFieldGet(_networkId, this);
  }
  _updateNetwork(params) {
    _classPrivateFieldSet(_networkId, this, params.networkId);
    this.emit('networkIdChange', _classPrivateFieldGet(_networkId, this));
  }

  /**
   * Connect to wallet
   * @param name - Aepp name
   * @param connection - Wallet connection object
   */
  static async connect(name, connection) {
    const connector = new WalletConnectorFrame();
    await WalletConnectorFrame._connect(name, connection, connector, false);
    return connector;
  }
}
//# sourceMappingURL=WalletConnectorFrame.js.map