export declare const pause: (duration: number) => Promise<void>;
export declare const mapObject: <InputV, OutputV>(object: {
    [k: string]: InputV;
}, fn: (value: [string, InputV], index: number, array: Array<[string, InputV]>) => [number | string, OutputV]) => {
    [k: string]: OutputV;
};
export declare const concatBuffers: (list: readonly Uint8Array[], totalLength?: number) => Buffer;
/**
 * Object key type guard
 * @param key - Maybe object key
 * @param object - Object
 */
export declare function isKeyOfObject<T extends object>(key: string | number | symbol, object: T): key is keyof T;
/**
 * Array item type guard
 * @param item - Maybe array item
 * @param array - Array
 */
export declare function isItemOfArray<T>(item: any, array: readonly T[]): item is T;
export declare function isAccountNotFoundError(error: Error): boolean;
export type UnionToIntersection<Union> = (Union extends any ? (k: Union) => void : never) extends (k: infer Intersection) => void ? Intersection : never;
export type Optional<T, K extends keyof T> = Pick<Partial<T>, K> & Omit<T, K>;
export declare function ensureError(error: unknown): asserts error is Error;
